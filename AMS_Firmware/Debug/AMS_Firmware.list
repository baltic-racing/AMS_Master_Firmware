
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de74  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800e000  0800e000  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d4  0800e7d4  00020390  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7d4  0800e7d4  0001e7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7dc  0800e7dc  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7dc  0800e7dc  0001e7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e7e0  0800e7e0  0001e7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000390  20000000  0800e7e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a6c  20000390  0800eb74  00020390  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001dfc  0800eb74  00021dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a57f  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a1c  00000000  00000000  0003a97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0003f398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b3  00000000  00000000  00040ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024015  00000000  00000000  00041c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e6ce  00000000  00000000  00065cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c55dc  00000000  00000000  0008437e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007118  00000000  00000000  0014995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00150a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000390 	.word	0x20000390
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800dfe4 	.word	0x0800dfe4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000394 	.word	0x20000394
 80001c4:	0800dfe4 	.word	0x0800dfe4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14c      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d967      	bls.n	8000c56 <__udivmoddi4+0xe6>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b153      	cbz	r3, 8000ba2 <__udivmoddi4+0x32>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fbbe f1f7 	udiv	r1, lr, r7
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fb07 ee11 	mls	lr, r7, r1, lr
 8000bb2:	fb01 f005 	mul.w	r0, r1, r5
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x66>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000bc8:	f080 8119 	bcs.w	8000dfe <__udivmoddi4+0x28e>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8116 	bls.w	8000dfe <__udivmoddi4+0x28e>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000be0:	fb00 f505 	mul.w	r5, r0, r5
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8104 	bcs.w	8000e02 <__udivmoddi4+0x292>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8101 	bls.w	8000e02 <__udivmoddi4+0x292>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	1b64      	subs	r4, r4, r5
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xc0>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ea 	beq.w	8000df8 <__udivmoddi4+0x288>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d148      	bne.n	8000cca <__udivmoddi4+0x15a>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xd2>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4696      	mov	lr, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c50:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xea>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 808e 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c64:	1a88      	subs	r0, r1, r2
 8000c66:	2101      	movs	r1, #1
 8000c68:	0c17      	lsrs	r7, r2, #16
 8000c6a:	fa1f fe82 	uxth.w	lr, r2
 8000c6e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000c72:	fb07 0015 	mls	r0, r7, r5, r0
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7c:	fb0e f005 	mul.w	r0, lr, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x126>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x124>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 80cc 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c94:	4645      	mov	r5, r8
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	b2a4      	uxth	r4, r4
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x150>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14e>
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	f200 80b4 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	eba4 040e 	sub.w	r4, r4, lr
 8000cc4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc8:	e7a0      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cca:	f1c1 0720 	rsb	r7, r1, #32
 8000cce:	408b      	lsls	r3, r1
 8000cd0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd8:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	fbba f8f9 	udiv	r8, sl, r9
 8000ce4:	408d      	lsls	r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	432b      	orrs	r3, r5
 8000cf4:	fa00 f501 	lsl.w	r5, r0, r1
 8000cf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cfc:	0c1c      	lsrs	r4, r3, #16
 8000cfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	fa02 f201 	lsl.w	r2, r2, r1
 8000d08:	d90b      	bls.n	8000d22 <__udivmoddi4+0x1b2>
 8000d0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d12:	f080 8086 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	f240 8083 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1c:	f1a8 0802 	sub.w	r8, r8, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1a24      	subs	r4, r4, r0
 8000d24:	b298      	uxth	r0, r3
 8000d26:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2a:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d32:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x1dc>
 8000d3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d42:	d26a      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d968      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d50:	fba0 9302 	umull	r9, r3, r0, r2
 8000d54:	eba4 040e 	sub.w	r4, r4, lr
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	46c8      	mov	r8, r9
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	d354      	bcc.n	8000e0a <__udivmoddi4+0x29a>
 8000d60:	d051      	beq.n	8000e06 <__udivmoddi4+0x296>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d067      	beq.n	8000e36 <__udivmoddi4+0x2c6>
 8000d66:	ebb5 0308 	subs.w	r3, r5, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	40cb      	lsrs	r3, r1
 8000d70:	fa04 f707 	lsl.w	r7, r4, r7
 8000d74:	431f      	orrs	r7, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0020 	rsb	r0, r3, #32
 8000d88:	40c1      	lsrs	r1, r0
 8000d8a:	409d      	lsls	r5, r3
 8000d8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	4328      	orrs	r0, r5
 8000d96:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9a:	fb07 1115 	mls	r1, r7, r5, r1
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	0c02      	lsrs	r2, r0, #16
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dac:	4291      	cmp	r1, r2
 8000dae:	fa04 f403 	lsl.w	r4, r4, r3
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	4291      	cmp	r1, r2
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	fbb2 f1f7 	udiv	r1, r2, r7
 8000dcc:	fb07 2211 	mls	r2, r7, r1, r2
 8000dd0:	b280      	uxth	r0, r0
 8000dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dd6:	fb01 f20e 	mul.w	r2, r1, lr
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x280>
 8000dde:	eb1c 0000 	adds.w	r0, ip, r0
 8000de2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000de6:	d216      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	d914      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dec:	3902      	subs	r1, #2
 8000dee:	4460      	add	r0, ip
 8000df0:	1a80      	subs	r0, r0, r2
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	e73a      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e70b      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000dfe:	4671      	mov	r1, lr
 8000e00:	e6e9      	b.n	8000bd6 <__udivmoddi4+0x66>
 8000e02:	4610      	mov	r0, r2
 8000e04:	e6fe      	b.n	8000c04 <__udivmoddi4+0x94>
 8000e06:	454d      	cmp	r5, r9
 8000e08:	d2ab      	bcs.n	8000d62 <__udivmoddi4+0x1f2>
 8000e0a:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a5      	b.n	8000d62 <__udivmoddi4+0x1f2>
 8000e16:	4641      	mov	r1, r8
 8000e18:	e7ea      	b.n	8000df0 <__udivmoddi4+0x280>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e796      	b.n	8000d4c <__udivmoddi4+0x1dc>
 8000e1e:	4645      	mov	r5, r8
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	46d0      	mov	r8, sl
 8000e24:	e77d      	b.n	8000d22 <__udivmoddi4+0x1b2>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e749      	b.n	8000cc0 <__udivmoddi4+0x150>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e731      	b.n	8000c96 <__udivmoddi4+0x126>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xdc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e6ed      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <spi_write_array+0x24>)
 8000e58:	f005 fd13 	bl	8006882 <HAL_SPI_Transmit>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000a3c 	.word	0x20000a3c

08000e68 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <spi_write_read+0x3c>)
 8000e88:	f005 fcfb 	bl	8006882 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <spi_write_read+0x3c>)
 8000e98:	f005 fe36 	bl	8006b08 <HAL_SPI_Receive>

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000a3c 	.word	0x20000a3c

08000ea8 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f81f 	bl	8000efc <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <wakeup_idle>:

void wakeup_idle()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ed0:	f003 fddb 	bl	8004a8a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <wakeup_idle+0x30>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <wakeup_idle+0x34>)
 8000edc:	f005 fcd1 	bl	8006882 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ee8:	f003 fdcf 	bl	8004a8a <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	200003b2 	.word	0x200003b2
 8000ef8:	20000a3c 	.word	0x20000a3c

08000efc <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000efc:	b490      	push	{r4, r7}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	717b      	strb	r3, [r7, #5]
 8000f16:	4613      	mov	r3, r2
 8000f18:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	105b      	asrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <set_adc+0x94>)
 8000f30:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <set_adc+0x94>)
 8000f52:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <set_adc+0x98>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <set_adc+0x98>)
 8000f82:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc90      	pop	{r4, r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200003ac 	.word	0x200003ac
 8000f94:	200003b0 	.word	0x200003b0

08000f98 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <LTC6811_adcv+0x74>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <LTC6811_adcv+0x74>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000faa:	4918      	ldr	r1, [pc, #96]	; (800100c <LTC6811_adcv+0x74>)
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 fb0d 	bl	80015cc <pec15_calc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fc6:	f7ff ff7d 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <LTC6811_adcv+0x78>)
 8000fd2:	f003 fd5a 	bl	8004a8a <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f7ff ff30 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <LTC6811_adcv+0x78>)
 8000fe8:	f003 fd4f 	bl	8004a8a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fec:	2301      	movs	r3, #1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <LTC6811_adcv+0x80>)
 8000ff4:	f005 fc45 	bl	8006882 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <LTC6811_adcv+0x80>)
 8001000:	f005 fc3f 	bl	8006882 <HAL_SPI_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200003ac 	.word	0x200003ac
 8001010:	40020000 	.word	0x40020000
 8001014:	200003b2 	.word	0x200003b2
 8001018:	20000a3c 	.word	0x20000a3c

0800101c <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <LTC6811_adax+0x74>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <LTC6811_adax+0x74>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <LTC6811_adax+0x74>)
 8001030:	2002      	movs	r0, #2
 8001032:	f000 facb 	bl	80015cc <pec15_calc>
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 800104a:	f7ff ff3b 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <LTC6811_adax+0x78>)
 8001056:	f003 fd18 	bl	8004a8a <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff feee 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <LTC6811_adax+0x78>)
 800106c:	f003 fd0d 	bl	8004a8a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001070:	2301      	movs	r3, #1
 8001072:	2201      	movs	r2, #1
 8001074:	4908      	ldr	r1, [pc, #32]	; (8001098 <LTC6811_adax+0x7c>)
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <LTC6811_adax+0x80>)
 8001078:	f005 fc03 	bl	8006882 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	2201      	movs	r2, #1
 8001080:	4905      	ldr	r1, [pc, #20]	; (8001098 <LTC6811_adax+0x7c>)
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <LTC6811_adax+0x80>)
 8001084:	f005 fbfd 	bl	8006882 <HAL_SPI_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200003b0 	.word	0x200003b0
 8001094:	40020000 	.word	0x40020000
 8001098:	200003b2 	.word	0x200003b2
 800109c:	20000a3c 	.word	0x20000a3c

080010a0 <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00a f8f7 	bl	800b2b4 <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e03f      	b.n	8001150 <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	757b      	strb	r3, [r7, #21]
 80010d4:	e013      	b.n	80010fe <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	1899      	adds	r1, r3, r2
 80010e6:	7d7a      	ldrb	r2, [r7, #21]
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	4403      	add	r3, r0
 80010ee:	5c8a      	ldrb	r2, [r1, r2]
 80010f0:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7a      	ldrb	r2, [r7, #21]
 8001100:	7d3b      	ldrb	r3, [r7, #20]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3e7      	bcc.n	80010d6 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 8001106:	7dfa      	ldrb	r2, [r7, #23]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	7d3b      	ldrb	r3, [r7, #20]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa55 	bl	80015cc <pec15_calc>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	3301      	adds	r3, #1
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	897a      	ldrh	r2, [r7, #10]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	3302      	adds	r3, #2
 8001148:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3bb      	bcc.n	80010d0 <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001158:	f7ff feb4 	bl	8000ec4 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	e045      	b.n	80011ee <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3b80      	subs	r3, #128	; 0x80
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	2002      	movs	r0, #2
 800117c:	f000 fa26 	bl	80015cc <pec15_calc>
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3302      	adds	r3, #2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3303      	adds	r3, #3
 8001196:	897a      	ldrh	r2, [r7, #10]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011a4:	f003 fc71 	bl	8004a8a <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff fe48 	bl	8000e40 <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	3304      	adds	r3, #4
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	2008      	movs	r0, #8
 80011c0:	f7ff fe3e 	bl	8000e40 <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011cc:	f003 fc5d 	bl	8004a8a <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011d0:	2301      	movs	r3, #1
 80011d2:	2201      	movs	r2, #1
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011d8:	f005 fb53 	bl	8006882 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011dc:	2301      	movs	r3, #1
 80011de:	2201      	movs	r2, #1
 80011e0:	4909      	ldr	r1, [pc, #36]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011e4:	f005 fb4d 	bl	8006882 <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3301      	adds	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	7dfa      	ldrb	r2, [r7, #23]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3b5      	bcc.n	8001162 <LTC6811_wrcfg+0xc2>

	}

	free(WRCFG);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f00a f864 	bl	800b2c4 <free>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000
 8001208:	200003b2 	.word	0x200003b2
 800120c:	20000a3c 	.word	0x20000a3c

08001210 <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	460b      	mov	r3, r1
 800121e:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001224:	2306      	movs	r3, #6
 8001226:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001228:	2303      	movs	r3, #3
 800122a:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001234:	7ebb      	ldrb	r3, [r7, #26]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f00a f839 	bl	800b2b4 <malloc>
 8001242:	4603      	mov	r3, r0
 8001244:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001246:	2301      	movs	r3, #1
 8001248:	777b      	strb	r3, [r7, #29]
 800124a:	e068      	b.n	800131e <LTC6811_rdcv+0x10e>
	{
		data_counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 8001250:	79b9      	ldrb	r1, [r7, #6]
 8001252:	7f7b      	ldrb	r3, [r7, #29]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f86c 	bl	8001334 <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800125c:	2300      	movs	r3, #0
 800125e:	773b      	strb	r3, [r7, #28]
 8001260:	e056      	b.n	8001310 <LTC6811_rdcv+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001262:	2300      	movs	r3, #0
 8001264:	76fb      	strb	r3, [r7, #27]
 8001266:	e026      	b.n	80012b6 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	3301      	adds	r3, #1
 8001276:	6979      	ldr	r1, [r7, #20]
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001286:	7f3a      	ldrb	r2, [r7, #28]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4413      	add	r3, r2
 8001296:	7ef9      	ldrb	r1, [r7, #27]
 8001298:	7f7a      	ldrb	r2, [r7, #29]
 800129a:	3a01      	subs	r2, #1
 800129c:	7e38      	ldrb	r0, [r7, #24]
 800129e:	fb00 f202 	mul.w	r2, r0, r2
 80012a2:	440a      	add	r2, r1
 80012a4:	89f9      	ldrh	r1, [r7, #14]
 80012a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	3302      	adds	r3, #2
 80012ae:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 80012b0:	7efb      	ldrb	r3, [r7, #27]
 80012b2:	3301      	adds	r3, #1
 80012b4:	76fb      	strb	r3, [r7, #27]
 80012b6:	7efa      	ldrb	r2, [r7, #27]
 80012b8:	7e3b      	ldrb	r3, [r7, #24]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3d4      	bcc.n	8001268 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	7fbb      	ldrb	r3, [r7, #30]
 80012ce:	3301      	adds	r3, #1
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012dc:	7f3b      	ldrb	r3, [r7, #28]
 80012de:	7eba      	ldrb	r2, [r7, #26]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	441a      	add	r2, r3
 80012ea:	7e7b      	ldrb	r3, [r7, #25]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f96c 	bl	80015cc <pec15_calc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012f8:	8a7a      	ldrh	r2, [r7, #18]
 80012fa:	8a3b      	ldrh	r3, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <LTC6811_rdcv+0xf4>
			{
			  pec_error = -1;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 8001304:	7fbb      	ldrb	r3, [r7, #30]
 8001306:	3302      	adds	r3, #2
 8001308:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800130a:	7f3b      	ldrb	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	773b      	strb	r3, [r7, #28]
 8001310:	7f3a      	ldrb	r2, [r7, #28]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3a4      	bcc.n	8001262 <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001318:	7f7b      	ldrb	r3, [r7, #29]
 800131a:	3301      	adds	r3, #1
 800131c:	777b      	strb	r3, [r7, #29]
 800131e:	7f7b      	ldrb	r3, [r7, #29]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d993      	bls.n	800124c <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f009 ffcd 	bl	800b2c4 <free>
	return(pec_error);
 800132a:	7ffb      	ldrb	r3, [r7, #31]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3b01      	subs	r3, #1
 8001348:	2b03      	cmp	r3, #3
 800134a:	d817      	bhi.n	800137c <LTC6811_rdcv_reg+0x48>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <LTC6811_rdcv_reg+0x20>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	0800136b 	.word	0x0800136b
 800135c:	08001371 	.word	0x08001371
 8001360:	08001377 	.word	0x08001377
		case 1: RDCV[1] = 0x04; break;
 8001364:	2304      	movs	r3, #4
 8001366:	727b      	strb	r3, [r7, #9]
 8001368:	e008      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 800136a:	2306      	movs	r3, #6
 800136c:	727b      	strb	r3, [r7, #9]
 800136e:	e005      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001370:	2308      	movs	r3, #8
 8001372:	727b      	strb	r3, [r7, #9]
 8001374:	e002      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 8001376:	230a      	movs	r3, #10
 8001378:	727b      	strb	r3, [r7, #9]
 800137a:	bf00      	nop
	}

	wakeup_idle();
 800137c:	f7ff fda2 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e02f      	b.n	80013e6 <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b80      	subs	r3, #128	; 0x80
 800138e:	b2db      	uxtb	r3, r3
 8001390:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	2002      	movs	r0, #2
 800139a:	f000 f917 	bl	80015cc <pec15_calc>
 800139e:	4603      	mov	r3, r0
 80013a0:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013ba:	f003 fb66 	bl	8004a8a <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	441a      	add	r2, r3
 80013c8:	f107 0008 	add.w	r0, r7, #8
 80013cc:	2308      	movs	r3, #8
 80013ce:	2104      	movs	r1, #4
 80013d0:	f7ff fd4a 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013dc:	f003 fb55 	bl	8004a8a <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3cb      	bcc.n	8001386 <LTC6811_rdcv_reg+0x52>
    }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020000 	.word	0x40020000

080013fc <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001410:	2306      	movs	r3, #6
 8001412:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 8001414:	2303      	movs	r3, #3
 8001416:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001420:	7ebb      	ldrb	r3, [r7, #26]
 8001422:	79ba      	ldrb	r2, [r7, #6]
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f009 ff43 	bl	800b2b4 <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001432:	2301      	movs	r3, #1
 8001434:	777b      	strb	r3, [r7, #29]
 8001436:	e068      	b.n	800150a <LTC6811_rdaux+0x10e>
	{
		data_counter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 800143c:	79b9      	ldrb	r1, [r7, #6]
 800143e:	7f7b      	ldrb	r3, [r7, #29]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f86e 	bl	8001524 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001448:	2300      	movs	r3, #0
 800144a:	773b      	strb	r3, [r7, #28]
 800144c:	e056      	b.n	80014fc <LTC6811_rdaux+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800144e:	2300      	movs	r3, #0
 8001450:	76fb      	strb	r3, [r7, #27]
 8001452:	e026      	b.n	80014a2 <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b21a      	sxth	r2, r3
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	3301      	adds	r3, #1
 8001462:	6979      	ldr	r1, [r7, #20]
 8001464:	440b      	add	r3, r1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 8001472:	7f3a      	ldrb	r2, [r7, #28]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	7ef9      	ldrb	r1, [r7, #27]
 8001484:	7f7a      	ldrb	r2, [r7, #29]
 8001486:	3a01      	subs	r2, #1
 8001488:	7e38      	ldrb	r0, [r7, #24]
 800148a:	fb00 f202 	mul.w	r2, r0, r2
 800148e:	440a      	add	r2, r1
 8001490:	89f9      	ldrh	r1, [r7, #14]
 8001492:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 8001496:	7fbb      	ldrb	r3, [r7, #30]
 8001498:	3302      	adds	r3, #2
 800149a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800149c:	7efb      	ldrb	r3, [r7, #27]
 800149e:	3301      	adds	r3, #1
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	7efa      	ldrb	r2, [r7, #27]
 80014a4:	7e3b      	ldrb	r3, [r7, #24]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3d4      	bcc.n	8001454 <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 80014aa:	7fbb      	ldrb	r3, [r7, #30]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	7fbb      	ldrb	r3, [r7, #30]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	440b      	add	r3, r1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014c8:	7f3b      	ldrb	r3, [r7, #28]
 80014ca:	7eba      	ldrb	r2, [r7, #26]
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	441a      	add	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f876 	bl	80015cc <pec15_calc>
 80014e0:	4603      	mov	r3, r0
 80014e2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014e4:	8a7a      	ldrh	r2, [r7, #18]
 80014e6:	8a3b      	ldrh	r3, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <LTC6811_rdaux+0xf4>
			{
			  pec_error = -1;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014f0:	7fbb      	ldrb	r3, [r7, #30]
 80014f2:	3302      	adds	r3, #2
 80014f4:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014f6:	7f3b      	ldrb	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	773b      	strb	r3, [r7, #28]
 80014fc:	7f3a      	ldrb	r2, [r7, #28]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3a4      	bcc.n	800144e <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	3301      	adds	r3, #1
 8001508:	777b      	strb	r3, [r7, #29]
 800150a:	7f7a      	ldrb	r2, [r7, #29]
 800150c:	7e3b      	ldrb	r3, [r7, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	d392      	bcc.n	8001438 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f009 fed6 	bl	800b2c4 <free>
	return(pec_error);
 8001518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	603a      	str	r2, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	460b      	mov	r3, r1
 8001532:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <LTC6811_rdaux_reg+0x1c>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <LTC6811_rdaux_reg+0x22>
 800153e:	e005      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001540:	230c      	movs	r3, #12
 8001542:	727b      	strb	r3, [r7, #9]
 8001544:	e002      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
 800154a:	bf00      	nop
	}

	wakeup_idle();
 800154c:	f7ff fcba 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e02f      	b.n	80015b6 <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3b80      	subs	r3, #128	; 0x80
 800155e:	b2db      	uxtb	r3, r3
 8001560:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f000 f82f 	bl	80015cc <pec15_calc>
 800156e:	4603      	mov	r3, r0
 8001570:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001572:	89bb      	ldrh	r3, [r7, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 800158a:	f003 fa7e 	bl	8004a8a <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	461a      	mov	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	441a      	add	r2, r3
 8001598:	f107 0008 	add.w	r0, r7, #8
 800159c:	2308      	movs	r3, #8
 800159e:	2104      	movs	r1, #4
 80015a0:	f7ff fc62 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 80015ac:	f003 fa6d 	bl	8004a8a <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3cb      	bcc.n	8001556 <LTC6811_rdaux_reg+0x32>
    }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020000 	.word	0x40020000

080015cc <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015d8:	2310      	movs	r3, #16
 80015da:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e018      	b.n	8001614 <pec15_calc+0x48>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015e2:	8afb      	ldrh	r3, [r7, #22]
 80015e4:	09db      	lsrs	r3, r3, #7
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4053      	eors	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b29a      	uxth	r2, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <pec15_calc+0x60>)
 8001604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4053      	eors	r3, r2
 800160c:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3301      	adds	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbe2      	blt.n	80015e2 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800161c:	8afb      	ldrh	r3, [r7, #22]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b29b      	uxth	r3, r3
 }
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	0800e054 	.word	0x0800e054

08001630 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <MX_ADC1_Init+0x9c>)
 8001646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_ADC1_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_ADC1_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_ADC1_Init+0x98>)
 800166a:	2200      	movs	r2, #0
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <MX_ADC1_Init+0xa0>)
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_ADC1_Init+0x98>)
 800167c:	2201      	movs	r2, #1
 800167e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_ADC1_Init+0x98>)
 800168a:	2201      	movs	r2, #1
 800168c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001690:	f001 fd04 	bl	800309c <HAL_ADC_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800169a:	f001 f9fe 	bl	8002a9a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800169e:	230a      	movs	r3, #10
 80016a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_ADC1_Init+0x98>)
 80016b0:	f001 feaa 	bl	8003408 <HAL_ADC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016ba:	f001 f9ee 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200003b4 	.word	0x200003b4
 80016cc:	40012000 	.word	0x40012000
 80016d0:	0f000001 	.word	0x0f000001

080016d4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_ADC2_Init+0x98>)
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <MX_ADC2_Init+0x9c>)
 80016ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_ADC2_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_ADC2_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_ADC2_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_ADC2_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_ADC2_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_ADC2_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_ADC2_Init+0x98>)
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <MX_ADC2_Init+0xa0>)
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_ADC2_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_ADC2_Init+0x98>)
 8001720:	2201      	movs	r2, #1
 8001722:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_ADC2_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_ADC2_Init+0x98>)
 800172e:	2201      	movs	r2, #1
 8001730:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001732:	480e      	ldr	r0, [pc, #56]	; (800176c <MX_ADC2_Init+0x98>)
 8001734:	f001 fcb2 	bl	800309c <HAL_ADC_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800173e:	f001 f9ac 	bl	8002a9a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001742:	230b      	movs	r3, #11
 8001744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_ADC2_Init+0x98>)
 8001754:	f001 fe58 	bl	8003408 <HAL_ADC_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800175e:	f001 f99c 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003fc 	.word	0x200003fc
 8001770:	40012100 	.word	0x40012100
 8001774:	0f000001 	.word	0x0f000001

08001778 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2e      	ldr	r2, [pc, #184]	; (8001850 <HAL_ADC_MspInit+0xd8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d128      	bne.n	80017ec <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <HAL_ADC_MspInit+0xe0>)
 80017e6:	f002 ff9b 	bl	8004720 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80017ea:	e02c      	b.n	8001846 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_ADC_MspInit+0xe4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d127      	bne.n	8001846 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_ADC_MspInit+0xe0>)
 8001842:	f002 ff6d 	bl	8004720 <HAL_GPIO_Init>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40012000 	.word	0x40012000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020800 	.word	0x40020800
 800185c:	40012100 	.word	0x40012100

08001860 <ADC_TS_Voltage>:
uint16_t adc_vehic_volt;
uint16_t diff_volt;
uint8_t pre = 0;

uint8_t ADC_TS_Voltage(uint16_t MAX_TS_VOLTAGE, uint16_t MIN_TS_VOLTAGE)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	80fb      	strh	r3, [r7, #6]
 800186c:	4613      	mov	r3, r2
 800186e:	80bb      	strh	r3, [r7, #4]
	//Vehicle side
	HAL_ADC_Start(&hadc1);
 8001870:	4853      	ldr	r0, [pc, #332]	; (80019c0 <ADC_TS_Voltage+0x160>)
 8001872:	f001 fc57 	bl	8003124 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8001876:	2164      	movs	r1, #100	; 0x64
 8001878:	4851      	ldr	r0, [pc, #324]	; (80019c0 <ADC_TS_Voltage+0x160>)
 800187a:	f001 fd35 	bl	80032e8 <HAL_ADC_PollForConversion>
	raw_adc_vehic_volt = HAL_ADC_GetValue(&hadc1); // get the adc value
 800187e:	4850      	ldr	r0, [pc, #320]	; (80019c0 <ADC_TS_Voltage+0x160>)
 8001880:	f001 fdb6 	bl	80033f0 <HAL_ADC_GetValue>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <ADC_TS_Voltage+0x164>)
 800188a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1); // stop adc
 800188c:	484c      	ldr	r0, [pc, #304]	; (80019c0 <ADC_TS_Voltage+0x160>)
 800188e:	f001 fcf9 	bl	8003284 <HAL_ADC_Stop>
	//Accu side
	HAL_ADC_Start(&hadc2);
 8001892:	484d      	ldr	r0, [pc, #308]	; (80019c8 <ADC_TS_Voltage+0x168>)
 8001894:	f001 fc46 	bl	8003124 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100); // poll for conversion
 8001898:	2164      	movs	r1, #100	; 0x64
 800189a:	484b      	ldr	r0, [pc, #300]	; (80019c8 <ADC_TS_Voltage+0x168>)
 800189c:	f001 fd24 	bl	80032e8 <HAL_ADC_PollForConversion>
	raw_adc_accu_volt = HAL_ADC_GetValue(&hadc2); // get the adc value
 80018a0:	4849      	ldr	r0, [pc, #292]	; (80019c8 <ADC_TS_Voltage+0x168>)
 80018a2:	f001 fda5 	bl	80033f0 <HAL_ADC_GetValue>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b48      	ldr	r3, [pc, #288]	; (80019cc <ADC_TS_Voltage+0x16c>)
 80018ac:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2); // stop adc
 80018ae:	4846      	ldr	r0, [pc, #280]	; (80019c8 <ADC_TS_Voltage+0x168>)
 80018b0:	f001 fce8 	bl	8003284 <HAL_ADC_Stop>

	adc_accu_volt = (3.3/4095.0)* raw_adc_accu_volt * 175.5;
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <ADC_TS_Voltage+0x16c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fddf 	bl	800047c <__aeabi_i2d>
 80018be:	a33a      	add	r3, pc, #232	; (adr r3, 80019a8 <ADC_TS_Voltage+0x148>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fe44 	bl	8000550 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	a337      	add	r3, pc, #220	; (adr r3, 80019b0 <ADC_TS_Voltage+0x150>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe3b 	bl	8000550 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f90d 	bl	8000b00 <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <ADC_TS_Voltage+0x170>)
 80018ec:	801a      	strh	r2, [r3, #0]
	adc_vehic_volt = (3.3/4095.0)* raw_adc_vehic_volt * 175.5;
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <ADC_TS_Voltage+0x164>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdc2 	bl	800047c <__aeabi_i2d>
 80018f8:	a32b      	add	r3, pc, #172	; (adr r3, 80019a8 <ADC_TS_Voltage+0x148>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe27 	bl	8000550 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	a329      	add	r3, pc, #164	; (adr r3, 80019b0 <ADC_TS_Voltage+0x150>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe1e 	bl	8000550 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f8f0 	bl	8000b00 <__aeabi_d2uiz>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <ADC_TS_Voltage+0x174>)
 8001926:	801a      	strh	r2, [r3, #0]
	diff_volt = adc_accu_volt - adc_vehic_volt;
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <ADC_TS_Voltage+0x170>)
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <ADC_TS_Voltage+0x174>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <ADC_TS_Voltage+0x178>)
 8001936:	801a      	strh	r2, [r3, #0]

	if(adc_accu_volt - adc_vehic_volt < 1) diff_volt = 0;
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <ADC_TS_Voltage+0x170>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <ADC_TS_Voltage+0x174>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	dc02      	bgt.n	800194e <ADC_TS_Voltage+0xee>
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <ADC_TS_Voltage+0x178>)
 800194a:	2200      	movs	r2, #0
 800194c:	801a      	strh	r2, [r3, #0]

	if(diff_volt <= 0.1 * MAX_TS_VOLTAGE && MIN_TS_VOLTAGE < adc_accu_volt)
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <ADC_TS_Voltage+0x178>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd92 	bl	800047c <__aeabi_i2d>
 8001958:	4604      	mov	r4, r0
 800195a:	460d      	mov	r5, r1
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd8c 	bl	800047c <__aeabi_i2d>
 8001964:	a314      	add	r3, pc, #80	; (adr r3, 80019b8 <ADC_TS_Voltage+0x158>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fdf1 	bl	8000550 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7ff f867 	bl	8000a48 <__aeabi_dcmple>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <ADC_TS_Voltage+0x132>
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <ADC_TS_Voltage+0x170>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	88ba      	ldrh	r2, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	d203      	bcs.n	8001992 <ADC_TS_Voltage+0x132>
		pre = 1;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <ADC_TS_Voltage+0x17c>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e002      	b.n	8001998 <ADC_TS_Voltage+0x138>
	else
		pre = 0;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <ADC_TS_Voltage+0x17c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]

	return pre;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <ADC_TS_Voltage+0x17c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	e734d9b4 	.word	0xe734d9b4
 80019ac:	3f4a680c 	.word	0x3f4a680c
 80019b0:	00000000 	.word	0x00000000
 80019b4:	4065f000 	.word	0x4065f000
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999
 80019c0:	200003b4 	.word	0x200003b4
 80019c4:	20000448 	.word	0x20000448
 80019c8:	200003fc 	.word	0x200003fc
 80019cc:	20000444 	.word	0x20000444
 80019d0:	20000446 	.word	0x20000446
 80019d4:	2000044a 	.word	0x2000044a
 80019d8:	2000044c 	.word	0x2000044c
 80019dc:	2000044e 	.word	0x2000044e

080019e0 <HAL_TIM_PeriodElapsedCallback>:
 * HLCK 96 MHz
 * APB1 48 MHz
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

CAN_interrupt();
 80019e8:	f000 fa46 	bl	8001e78 <CAN_interrupt>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af06      	add	r7, sp, #24
 80019fa:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 80019fc:	4e0f      	ldr	r6, [pc, #60]	; (8001a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80019fe:	466d      	mov	r5, sp
 8001a00:	f106 0410 	add.w	r4, r6, #16
 8001a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a14:	f000 fc00 	bl	8002218 <CAN_RX>
    CAN_RX_IVT(hcan2);
 8001a18:	4e09      	ldr	r6, [pc, #36]	; (8001a40 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001a1a:	466d      	mov	r5, sp
 8001a1c:	f106 0410 	add.w	r4, r6, #16
 8001a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a30:	f000 fc64 	bl	80022fc <CAN_RX_IVT>
   }
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3c:	200009e4 	.word	0x200009e4
 8001a40:	20000a0c 	.word	0x20000a0c

08001a44 <BMS_init>:
	CAN_RX_IVT(hcan2);
}
*/

void BMS_init()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 8001a48:	f7ff fa2e 	bl	8000ea8 <LTC6811_initialize>
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	//uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
	//uint16_t VUV = (MIN_VOLTAGE/16)-1;

	//precharge = 1 when complete and 0 when still charging
	precharge = ADC_TS_Voltage(MAX_TS_VOLTAGE, MIN_TS_VOLTAGE);
 8001a5a:	f240 1157 	movw	r1, #343	; 0x157
 8001a5e:	f240 202a 	movw	r0, #554	; 0x22a
 8001a62:	f7ff fefd 	bl	8001860 <ADC_TS_Voltage>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b87      	ldr	r3, [pc, #540]	; (8001c88 <BMS+0x238>)
 8001a6c:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	e0bc      	b.n	8001bee <BMS+0x19e>
		cfg[i][4] = 0x00 | OV_flag[i];
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);

*/
		//Balancing without flags
		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 8001a74:	4b85      	ldr	r3, [pc, #532]	; (8001c8c <BMS+0x23c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	b2d8      	uxtb	r0, r3
 8001a86:	4982      	ldr	r1, [pc, #520]	; (8001c90 <BMS+0x240>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	440b      	add	r3, r1
 8001a92:	4602      	mov	r2, r0
 8001a94:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	497d      	ldr	r1, [pc, #500]	; (8001c90 <BMS+0x240>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 8001aaa:	79fa      	ldrb	r2, [r7, #7]
 8001aac:	4978      	ldr	r1, [pc, #480]	; (8001c90 <BMS+0x240>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3302      	adds	r3, #2
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 8001abe:	79fa      	ldrb	r2, [r7, #7]
 8001ac0:	4973      	ldr	r1, [pc, #460]	; (8001c90 <BMS+0x240>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	440b      	add	r3, r1
 8001acc:	3303      	adds	r3, #3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	496e      	ldr	r1, [pc, #440]	; (8001c90 <BMS+0x240>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	440b      	add	r3, r1
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	4969      	ldr	r1, [pc, #420]	; (8001c90 <BMS+0x240>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	440b      	add	r3, r1
 8001af4:	3305      	adds	r3, #5
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001afa:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <BMS+0x244>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d072      	beq.n	8001be8 <BMS+0x198>
		{
			if(selTemp < 3)
 8001b02:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <BMS+0x23c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d86e      	bhi.n	8001be8 <BMS+0x198>
			{
				for(uint8_t j = 0; j < 8; j++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	71bb      	strb	r3, [r7, #6]
 8001b0e:	e030      	b.n	8001b72 <BMS+0x122>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	79bb      	ldrb	r3, [r7, #6]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <BMS+0x248>)
 8001b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b26:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8001b2a:	3b58      	subs	r3, #88	; 0x58
 8001b2c:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <BMS+0x24c>)
 8001b2e:	8812      	ldrh	r2, [r2, #0]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	dd1b      	ble.n	8001b6c <BMS+0x11c>
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	4956      	ldr	r1, [pc, #344]	; (8001c90 <BMS+0x240>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	440b      	add	r3, r1
 8001b42:	3304      	adds	r3, #4
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25a      	sxtb	r2, r3
 8001b48:	79bb      	ldrb	r3, [r7, #6]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	79fa      	ldrb	r2, [r7, #7]
 8001b58:	b2d8      	uxtb	r0, r3
 8001b5a:	494d      	ldr	r1, [pc, #308]	; (8001c90 <BMS+0x240>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	440b      	add	r3, r1
 8001b66:	3304      	adds	r3, #4
 8001b68:	4602      	mov	r2, r0
 8001b6a:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	71bb      	strb	r3, [r7, #6]
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	2b07      	cmp	r3, #7
 8001b76:	d9cb      	bls.n	8001b10 <BMS+0xc0>
				}
				for(uint8_t j = 0; j < 3; j++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	717b      	strb	r3, [r7, #5]
 8001b7c:	e031      	b.n	8001be2 <BMS+0x192>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	797b      	ldrb	r3, [r7, #5]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3308      	adds	r3, #8
 8001b90:	4a41      	ldr	r2, [pc, #260]	; (8001c98 <BMS+0x248>)
 8001b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b96:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8001b9a:	3b58      	subs	r3, #88	; 0x58
 8001b9c:	4a3f      	ldr	r2, [pc, #252]	; (8001c9c <BMS+0x24c>)
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	dd1b      	ble.n	8001bdc <BMS+0x18c>
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	493a      	ldr	r1, [pc, #232]	; (8001c90 <BMS+0x240>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3305      	adds	r3, #5
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b25a      	sxtb	r2, r3
 8001bb8:	797b      	ldrb	r3, [r7, #5]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	b2d8      	uxtb	r0, r3
 8001bca:	4931      	ldr	r1, [pc, #196]	; (8001c90 <BMS+0x240>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3305      	adds	r3, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 8001bdc:	797b      	ldrb	r3, [r7, #5]
 8001bde:	3301      	adds	r3, #1
 8001be0:	717b      	strb	r3, [r7, #5]
 8001be2:	797b      	ldrb	r3, [r7, #5]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d9ca      	bls.n	8001b7e <BMS+0x12e>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	3301      	adds	r3, #1
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2b0b      	cmp	r3, #11
 8001bf2:	f67f af3f 	bls.w	8001a74 <BMS+0x24>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 8001bf6:	4926      	ldr	r1, [pc, #152]	; (8001c90 <BMS+0x240>)
 8001bf8:	200c      	movs	r0, #12
 8001bfa:	f7ff fa51 	bl	80010a0 <LTC6811_wrcfg>
	HAL_Delay(3);
 8001bfe:	2003      	movs	r0, #3
 8001c00:	f001 fa28 	bl	8003054 <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 8001c04:	f7ff f9c8 	bl	8000f98 <LTC6811_adcv>
	HAL_Delay(3);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f001 fa23 	bl	8003054 <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001c0e:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <BMS+0x248>)
 8001c10:	210c      	movs	r1, #12
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fafc 	bl	8001210 <LTC6811_rdcv>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	793b      	ldrb	r3, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001c22:	2003      	movs	r0, #3
 8001c24:	f001 fa16 	bl	8003054 <HAL_Delay>

	LTC6811_adax();										// measure 3 celltemp
 8001c28:	f7ff f9f8 	bl	800101c <LTC6811_adax>
	HAL_Delay(3);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f001 fa11 	bl	8003054 <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 8001c32:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <BMS+0x250>)
 8001c34:	210c      	movs	r1, #12
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7ff fbe0 	bl	80013fc <LTC6811_rdaux>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	793b      	ldrb	r3, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001c46:	2003      	movs	r0, #3
 8001c48:	f001 fa04 	bl	8003054 <HAL_Delay>

	//pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
	//HAL_Delay(3);


	convertVoltage();
 8001c4c:	f000 f82a 	bl	8001ca4 <convertVoltage>

	convertTemperature(selTemp);
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <BMS+0x23c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f97d 	bl	8001f54 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <BMS+0x23c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d806      	bhi.n	8001c70 <BMS+0x220>
	{
		selTemp++;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <BMS+0x23c>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <BMS+0x23c>)
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	e002      	b.n	8001c76 <BMS+0x226>
		//CAN_interrupt();
	}


	else
		selTemp = 0;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <BMS+0x23c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]

	can_put_data();
 8001c76:	f000 fb0b 	bl	8002290 <can_put_data>

	send_usb();
 8001c7a:	f000 fa3b 	bl	80020f4 <send_usb>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000044f 	.word	0x2000044f
 8001c8c:	200009d0 	.word	0x200009d0
 8001c90:	20000574 	.word	0x20000574
 8001c94:	20000450 	.word	0x20000450
 8001c98:	20000454 	.word	0x20000454
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	200005bc 	.word	0x200005bc

08001ca4 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
	//double voltage[NUM_CELLS];


	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	71fb      	strb	r3, [r7, #7]
 8001cae:	e00f      	b.n	8001cd0 <convertVoltage+0x2c>
	{
		usb_voltages[i] = cellVoltages[i]/1000;
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <convertVoltage+0xf8>)
 8001cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb8:	4a39      	ldr	r2, [pc, #228]	; (8001da0 <convertVoltage+0xfc>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	099b      	lsrs	r3, r3, #6
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	b2d1      	uxtb	r1, r2
 8001cc6:	4a37      	ldr	r2, [pc, #220]	; (8001da4 <convertVoltage+0x100>)
 8001cc8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b8f      	cmp	r3, #143	; 0x8f
 8001cd4:	d9ec      	bls.n	8001cb0 <convertVoltage+0xc>
	}

	//uint16_t cell_max = 42890;
	//uint16_t cell_min = 37789;

	uint16_t cell_max = cellVoltages[0];
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <convertVoltage+0xf8>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	80bb      	strh	r3, [r7, #4]
	uint16_t cell_min = cellVoltages[0];
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <convertVoltage+0xf8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	807b      	strh	r3, [r7, #2]
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	707b      	strb	r3, [r7, #1]
 8001ce6:	e03c      	b.n	8001d62 <convertVoltage+0xbe>
	{
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	703b      	strb	r3, [r7, #0]
 8001cec:	e033      	b.n	8001d56 <convertVoltage+0xb2>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 8001cee:	7839      	ldrb	r1, [r7, #0]
 8001cf0:	787a      	ldrb	r2, [r7, #1]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <convertVoltage+0xf8>)
 8001cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d02:	88ba      	ldrh	r2, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d20b      	bcs.n	8001d20 <convertVoltage+0x7c>
 8001d08:	7839      	ldrb	r1, [r7, #0]
 8001d0a:	787a      	ldrb	r2, [r7, #1]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <convertVoltage+0xf8>)
 8001d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d1c:	80bb      	strh	r3, [r7, #4]
 8001d1e:	e017      	b.n	8001d50 <convertVoltage+0xac>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 8001d20:	7839      	ldrb	r1, [r7, #0]
 8001d22:	787a      	ldrb	r2, [r7, #1]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <convertVoltage+0xf8>)
 8001d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d90a      	bls.n	8001d50 <convertVoltage+0xac>
 8001d3a:	7839      	ldrb	r1, [r7, #0]
 8001d3c:	787a      	ldrb	r2, [r7, #1]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <convertVoltage+0xf8>)
 8001d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d4e:	807b      	strh	r3, [r7, #2]
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001d50:	783b      	ldrb	r3, [r7, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	703b      	strb	r3, [r7, #0]
 8001d56:	783b      	ldrb	r3, [r7, #0]
 8001d58:	2b0b      	cmp	r3, #11
 8001d5a:	d9c8      	bls.n	8001cee <convertVoltage+0x4a>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	707b      	strb	r3, [r7, #1]
 8001d62:	787b      	ldrb	r3, [r7, #1]
 8001d64:	2b0b      	cmp	r3, #11
 8001d66:	d9bf      	bls.n	8001ce8 <convertVoltage+0x44>
			//voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
			//printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
		}
	}

	AMS1_databytes[0] = cell_min;
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <convertVoltage+0x104>)
 8001d6e:	701a      	strb	r2, [r3, #0]
	AMS1_databytes[1] = (cell_min >> 8);
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <convertVoltage+0x104>)
 8001d7a:	705a      	strb	r2, [r3, #1]
	AMS1_databytes[2] = cell_max;
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <convertVoltage+0x104>)
 8001d82:	709a      	strb	r2, [r3, #2]
	AMS1_databytes[3] = (cell_max >> 8);
 8001d84:	88bb      	ldrh	r3, [r7, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <convertVoltage+0x104>)
 8001d8e:	70da      	strb	r2, [r3, #3]



}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000454 	.word	0x20000454
 8001da0:	10624dd3 	.word	0x10624dd3
 8001da4:	20000890 	.word	0x20000890
 8001da8:	200009b8 	.word	0x200009b8
 8001dac:	00000000 	.word	0x00000000

08001db0 <calculateTemperature>:


uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	460a      	mov	r2, r1
 8001dba:	80fb      	strh	r3, [r7, #6]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	80bb      	strh	r3, [r7, #4]
	if(referenceCode - voltageCode != 0)
 8001dc0:	88ba      	ldrh	r2, [r7, #4]
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d03e      	beq.n	8001e46 <calculateTemperature+0x96>
	{
		uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <calculateTemperature+0xc0>)
 8001dcc:	fb03 f202 	mul.w	r2, r3, r2
 8001dd0:	88b9      	ldrh	r1, [r7, #4]
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	1acb      	subs	r3, r1, r3
 8001dd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dda:	60fb      	str	r3, [r7, #12]
		return 1000.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 273150.0;
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7fe fb3d 	bl	800045c <__aeabi_ui2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	a11a      	add	r1, pc, #104	; (adr r1, 8001e50 <calculateTemperature+0xa0>)
 8001de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dec:	f7fe fcda 	bl	80007a4 <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f00b ff08 	bl	800dc0c <log>
 8001dfc:	a316      	add	r3, pc, #88	; (adr r3, 8001e58 <calculateTemperature+0xa8>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fccf 	bl	80007a4 <__aeabi_ddiv>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	a115      	add	r1, pc, #84	; (adr r1, 8001e60 <calculateTemperature+0xb0>)
 8001e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e10:	f7fe f9e6 	bl	80001e0 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	4915      	ldr	r1, [pc, #84]	; (8001e74 <calculateTemperature+0xc4>)
 8001e1e:	f7fe fcc1 	bl	80007a4 <__aeabi_ddiv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	a30f      	add	r3, pc, #60	; (adr r3, 8001e68 <calculateTemperature+0xb8>)
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	f7fe f9d6 	bl	80001e0 <__aeabi_dsub>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fe60 	bl	8000b00 <__aeabi_d2uiz>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	e000      	b.n	8001e48 <calculateTemperature+0x98>
	}
	else
		return 0x00;
 8001e46:	2300      	movs	r3, #0


}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40c38800 	.word	0x40c38800
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40aad600 	.word	0x40aad600
 8001e60:	dcb5db83 	.word	0xdcb5db83
 8001e64:	3f6b79e1 	.word	0x3f6b79e1
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	4110abf8 	.word	0x4110abf8
 8001e70:	000186a0 	.word	0x000186a0
 8001e74:	408f4000 	.word	0x408f4000

08001e78 <CAN_interrupt>:

void CAN_interrupt()
{
 8001e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0

	if (HAL_GetTick()>= last20 + 20)
 8001e80:	f001 f8de 	bl	8003040 <HAL_GetTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2200      	movs	r2, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	617a      	str	r2, [r7, #20]
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <CAN_interrupt+0xc0>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f112 0814 	adds.w	r8, r2, #20
 8001e96:	f143 0900 	adc.w	r9, r3, #0
 8001e9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4541      	cmp	r1, r8
 8001ea2:	eb73 0309 	sbcs.w	r3, r3, r9
 8001ea6:	d319      	bcc.n	8001edc <CAN_interrupt+0x64>
	{

		AMS0_databytes[6] |= (precharge << 4);
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <CAN_interrupt+0xc4>)
 8001eaa:	799b      	ldrb	r3, [r3, #6]
 8001eac:	b25a      	sxtb	r2, r3
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <CAN_interrupt+0xc8>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b25b      	sxtb	r3, r3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <CAN_interrupt+0xc4>)
 8001ebe:	719a      	strb	r2, [r3, #6]

		CAN_50(AMS0_databytes);
 8001ec0:	481e      	ldr	r0, [pc, #120]	; (8001f3c <CAN_interrupt+0xc4>)
 8001ec2:	f000 fa57 	bl	8002374 <CAN_50>
		last20 = HAL_GetTick();
 8001ec6:	f001 f8bb 	bl	8003040 <HAL_GetTick>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	60fa      	str	r2, [r7, #12]
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <CAN_interrupt+0xc0>)
 8001ed4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ed8:	e9c3 1200 	strd	r1, r2, [r3]

	}
	if (HAL_GetTick()>= last100 + 100)
 8001edc:	f001 f8b0 	bl	8003040 <HAL_GetTick>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	469a      	mov	sl, r3
 8001ee6:	4693      	mov	fp, r2
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <CAN_interrupt+0xcc>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 8001ef2:	f143 0500 	adc.w	r5, r3, #0
 8001ef6:	45a2      	cmp	sl, r4
 8001ef8:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001efc:	d316      	bcc.n	8001f2c <CAN_interrupt+0xb4>
	{
		CAN_10(AMS1_databytes);
 8001efe:	4812      	ldr	r0, [pc, #72]	; (8001f48 <CAN_interrupt+0xd0>)
 8001f00:	f000 fa7c 	bl	80023fc <CAN_10>

		HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 8001f04:	2110      	movs	r1, #16
 8001f06:	4811      	ldr	r0, [pc, #68]	; (8001f4c <CAN_interrupt+0xd4>)
 8001f08:	f002 fdd7 	bl	8004aba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f10:	480f      	ldr	r0, [pc, #60]	; (8001f50 <CAN_interrupt+0xd8>)
 8001f12:	f002 fdd2 	bl	8004aba <HAL_GPIO_TogglePin>
		last100 = HAL_GetTick();
 8001f16:	f001 f893 	bl	8003040 <HAL_GetTick>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <CAN_interrupt+0xcc>)
 8001f24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f28:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f36:	bf00      	nop
 8001f38:	200009c0 	.word	0x200009c0
 8001f3c:	200009b0 	.word	0x200009b0
 8001f40:	2000044f 	.word	0x2000044f
 8001f44:	200009c8 	.word	0x200009c8
 8001f48:	200009b8 	.word	0x200009b8
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020800 	.word	0x40020800

08001f54 <convertTemperature>:


void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001f54:	b5b0      	push	{r4, r5, r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]

	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001f5e:	4a5f      	ldr	r2, [pc, #380]	; (80020dc <convertTemperature+0x188>)
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	77fb      	strb	r3, [r7, #31]
 8001f6e:	e037      	b.n	8001fe0 <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	77bb      	strb	r3, [r7, #30]
 8001f74:	e02e      	b.n	8001fd4 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001f76:	7fb9      	ldrb	r1, [r7, #30]
 8001f78:	7ffa      	ldrb	r2, [r7, #31]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	440b      	add	r3, r1
 8001f84:	4a56      	ldr	r2, [pc, #344]	; (80020e0 <convertTemperature+0x18c>)
 8001f86:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001f8a:	7ffa      	ldrb	r2, [r7, #31]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	3305      	adds	r3, #5
 8001f96:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <convertTemperature+0x18c>)
 8001f98:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001f9c:	7ffa      	ldrb	r2, [r7, #31]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	461c      	mov	r4, r3
 8001fa8:	7fb9      	ldrb	r1, [r7, #30]
 8001faa:	79fa      	ldrb	r2, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3320      	adds	r3, #32
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001fbc:	441c      	add	r4, r3
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f7ff fef6 	bl	8001db0 <calculateTemperature>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <convertTemperature+0x190>)
 8001fca:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001fce:	7fbb      	ldrb	r3, [r7, #30]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	77bb      	strb	r3, [r7, #30]
 8001fd4:	7fbb      	ldrb	r3, [r7, #30]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d9cd      	bls.n	8001f76 <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001fda:	7ffb      	ldrb	r3, [r7, #31]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	77fb      	strb	r3, [r7, #31]
 8001fe0:	7ffb      	ldrb	r3, [r7, #31]
 8001fe2:	2b0b      	cmp	r3, #11
 8001fe4:	d9c4      	bls.n	8001f70 <convertTemperature+0x1c>
				}
			}
			*/
		//USB STUFF

	if(selTemp == 3)
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d172      	bne.n	80020d2 <convertTemperature+0x17e>
	{
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	777b      	strb	r3, [r7, #29]
 8001ff0:	e00f      	b.n	8002012 <convertTemperature+0xbe>
		{
			usb_temperatures[i] = temperature[i]/1000;
 8001ff2:	7f7b      	ldrb	r3, [r7, #29]
 8001ff4:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <convertTemperature+0x190>)
 8001ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ffa:	4a3b      	ldr	r2, [pc, #236]	; (80020e8 <convertTemperature+0x194>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	b29a      	uxth	r2, r3
 8002004:	7f7b      	ldrb	r3, [r7, #29]
 8002006:	b2d1      	uxtb	r1, r2
 8002008:	4a38      	ldr	r2, [pc, #224]	; (80020ec <convertTemperature+0x198>)
 800200a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 800200c:	7f7b      	ldrb	r3, [r7, #29]
 800200e:	3301      	adds	r3, #1
 8002010:	777b      	strb	r3, [r7, #29]
 8002012:	7f7b      	ldrb	r3, [r7, #29]
 8002014:	2b8f      	cmp	r3, #143	; 0x8f
 8002016:	d9ec      	bls.n	8001ff2 <convertTemperature+0x9e>
		}

		//CAN stuff


		uint16_t temp_min = temperature[0];
 8002018:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <convertTemperature+0x190>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	837b      	strh	r3, [r7, #26]
			uint16_t temp_max = temperature[0];
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <convertTemperature+0x190>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	833b      	strh	r3, [r7, #24]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8002024:	2300      	movs	r3, #0
 8002026:	75fb      	strb	r3, [r7, #23]
 8002028:	e050      	b.n	80020cc <convertTemperature+0x178>
			{
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	75bb      	strb	r3, [r7, #22]
 800202e:	e033      	b.n	8002098 <convertTemperature+0x144>
				{
					if(temperature[i + k * 12] > temp_max) temp_max = temperature[i + k * 12];
 8002030:	7db9      	ldrb	r1, [r7, #22]
 8002032:	7dfa      	ldrb	r2, [r7, #23]
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <convertTemperature+0x190>)
 8002040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002044:	8b3a      	ldrh	r2, [r7, #24]
 8002046:	429a      	cmp	r2, r3
 8002048:	d20b      	bcs.n	8002062 <convertTemperature+0x10e>
 800204a:	7db9      	ldrb	r1, [r7, #22]
 800204c:	7dfa      	ldrb	r2, [r7, #23]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <convertTemperature+0x190>)
 800205a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800205e:	833b      	strh	r3, [r7, #24]
 8002060:	e017      	b.n	8002092 <convertTemperature+0x13e>
					else if(temperature[i + k * 12] < temp_min) temp_min = temperature[i + k * 12];
 8002062:	7db9      	ldrb	r1, [r7, #22]
 8002064:	7dfa      	ldrb	r2, [r7, #23]
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <convertTemperature+0x190>)
 8002072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002076:	8b7a      	ldrh	r2, [r7, #26]
 8002078:	429a      	cmp	r2, r3
 800207a:	d90a      	bls.n	8002092 <convertTemperature+0x13e>
 800207c:	7db9      	ldrb	r1, [r7, #22]
 800207e:	7dfa      	ldrb	r2, [r7, #23]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <convertTemperature+0x190>)
 800208c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002090:	837b      	strh	r3, [r7, #26]
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8002092:	7dbb      	ldrb	r3, [r7, #22]
 8002094:	3301      	adds	r3, #1
 8002096:	75bb      	strb	r3, [r7, #22]
 8002098:	7dbb      	ldrb	r3, [r7, #22]
 800209a:	2b0b      	cmp	r3, #11
 800209c:	d9c8      	bls.n	8002030 <convertTemperature+0xdc>
				}

				AMS1_databytes[4] = temp_min;
 800209e:	8b7b      	ldrh	r3, [r7, #26]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <convertTemperature+0x19c>)
 80020a4:	711a      	strb	r2, [r3, #4]
				AMS1_databytes[5] = (temp_min >> 8);
 80020a6:	8b7b      	ldrh	r3, [r7, #26]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <convertTemperature+0x19c>)
 80020b0:	715a      	strb	r2, [r3, #5]
				AMS1_databytes[6] = temp_max;
 80020b2:	8b3b      	ldrh	r3, [r7, #24]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <convertTemperature+0x19c>)
 80020b8:	719a      	strb	r2, [r3, #6]
				AMS1_databytes[7] = (temp_max >> 8);
 80020ba:	8b3b      	ldrh	r3, [r7, #24]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <convertTemperature+0x19c>)
 80020c4:	71da      	strb	r2, [r3, #7]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	3301      	adds	r3, #1
 80020ca:	75fb      	strb	r3, [r7, #23]
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b0b      	cmp	r3, #11
 80020d0:	d9ab      	bls.n	800202a <convertTemperature+0xd6>
			}
	}
}
 80020d2:	bf00      	nop
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdb0      	pop	{r4, r5, r7, pc}
 80020da:	bf00      	nop
 80020dc:	0800e000 	.word	0x0800e000
 80020e0:	200005bc 	.word	0x200005bc
 80020e4:	2000064c 	.word	0x2000064c
 80020e8:	10624dd3 	.word	0x10624dd3
 80020ec:	20000920 	.word	0x20000920
 80020f0:	200009b8 	.word	0x200009b8

080020f4 <send_usb>:

void send_usb()
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
	usb_data[NUM_CELLS * 2] = 0xff;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <send_usb+0x4c>)
 80020fc:	22ff      	movs	r2, #255	; 0xff
 80020fe:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8002102:	2300      	movs	r3, #0
 8002104:	71fb      	strb	r3, [r7, #7]
 8002106:	e00f      	b.n	8002128 <send_usb+0x34>
	{
		usb_data[i] = usb_voltages[i];
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	490d      	ldr	r1, [pc, #52]	; (8002144 <send_usb+0x50>)
 800210e:	5c89      	ldrb	r1, [r1, r2]
 8002110:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <send_usb+0x4c>)
 8002112:	54d1      	strb	r1, [r2, r3]
		usb_data[NUM_CELLS + i] = usb_temperatures[i];
 8002114:	79fa      	ldrb	r2, [r7, #7]
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	3390      	adds	r3, #144	; 0x90
 800211a:	490b      	ldr	r1, [pc, #44]	; (8002148 <send_usb+0x54>)
 800211c:	5c89      	ldrb	r1, [r1, r2]
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <send_usb+0x4c>)
 8002120:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	3301      	adds	r3, #1
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	2b8f      	cmp	r3, #143	; 0x8f
 800212c:	d9ec      	bls.n	8002108 <send_usb+0x14>

	}

	CDC_Transmit_FS(usb_data, NUM_CELLS * 2 + 1);
 800212e:	f240 1121 	movw	r1, #289	; 0x121
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <send_usb+0x4c>)
 8002134:	f008 fc7e 	bl	800aa34 <CDC_Transmit_FS>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000076c 	.word	0x2000076c
 8002144:	20000890 	.word	0x20000890
 8002148:	20000920 	.word	0x20000920

0800214c <CAN_TX>:
CAN_TxHeaderTypeDef test_header = {0x069, 0 , CAN_ID_STD, CAN_RTR_DATA, 8};


	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 800214c:	b084      	sub	sp, #16
 800214e:	b5b0      	push	{r4, r5, r7, lr}
 8002150:	b090      	sub	sp, #64	; 0x40
 8002152:	af0e      	add	r7, sp, #56	; 0x38
 8002154:	f107 0418 	add.w	r4, r7, #24
 8002158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002164:	f107 0018 	add.w	r0, r7, #24
 8002168:	f001 fd94 	bl	8003c94 <HAL_CAN_AddTxMessage>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d018      	beq.n	80021a4 <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 8002172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002174:	930c      	str	r3, [sp, #48]	; 0x30
 8002176:	ad06      	add	r5, sp, #24
 8002178:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800217c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002180:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002184:	e885 0003 	stmia.w	r5, {r0, r1}
 8002188:	466d      	mov	r5, sp
 800218a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800218e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002196:	e885 0003 	stmia.w	r5, {r0, r1}
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a0:	f7ff ffd4 	bl	800214c <CAN_TX>
	}
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80021ae:	b004      	add	sp, #16
 80021b0:	4770      	bx	lr

080021b2 <CAN_TX_IVT>:

void CAN_TX_IVT(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 80021b2:	b084      	sub	sp, #16
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b090      	sub	sp, #64	; 0x40
 80021b8:	af0e      	add	r7, sp, #56	; 0x38
 80021ba:	f107 0418 	add.w	r4, r7, #24
 80021be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox2;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox2) != HAL_OK)
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80021c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021ca:	f107 0018 	add.w	r0, r7, #24
 80021ce:	f001 fd61 	bl	8003c94 <HAL_CAN_AddTxMessage>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d018      	beq.n	800220a <CAN_TX_IVT+0x58>
	{
		CAN_TX_IVT(hcan, TxHeader, TxData);		//retry when failed
 80021d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021da:	930c      	str	r3, [sp, #48]	; 0x30
 80021dc:	ad06      	add	r5, sp, #24
 80021de:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80021e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ee:	466d      	mov	r5, sp
 80021f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002206:	f7ff ffd4 	bl	80021b2 <CAN_TX_IVT>
	}
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002214:	b004      	add	sp, #16
 8002216:	4770      	bx	lr

08002218 <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 8002218:	b084      	sub	sp, #16
 800221a:	b580      	push	{r7, lr}
 800221c:	b08a      	sub	sp, #40	; 0x28
 800221e:	af00      	add	r7, sp, #0
 8002220:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8002224:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	f107 020c 	add.w	r2, r7, #12
 800222e:	2100      	movs	r1, #0
 8002230:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002234:	f001 fdfd 	bl	8003e32 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800223e:	d119      	bne.n	8002274 <CAN_RX+0x5c>
	{
		if(RxData[0] == 1)
 8002240:	793b      	ldrb	r3, [r7, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d108      	bne.n	8002258 <CAN_RX+0x40>
		{

			HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800224c:	480d      	ldr	r0, [pc, #52]	; (8002284 <CAN_RX+0x6c>)
 800224e:	f002 fc1c 	bl	8004a8a <HAL_GPIO_WritePin>
			ts_on = 1;
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <CAN_RX+0x70>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]

		}
		if(ts_on)							// verhindert das Drücken in falscher Reihenfolge
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <CAN_RX+0x70>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <CAN_RX+0x56>
		{

			if(RxData[1] == 1)
 8002260:	797b      	ldrb	r3, [r7, #5]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d106      	bne.n	8002274 <CAN_RX+0x5c>
				{
					ts_start = 1;
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <CAN_RX+0x74>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
		//AMS0_databytes[6]|= (ts_ready << 3);
	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 800226c:	e002      	b.n	8002274 <CAN_RX+0x5c>
			ts_start = 0;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <CAN_RX+0x74>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800227e:	b004      	add	sp, #16
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40020400 	.word	0x40020400
 8002288:	200009e2 	.word	0x200009e2
 800228c:	200009e3 	.word	0x200009e3

08002290 <can_put_data>:


void can_put_data()
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0


	AMS0_databytes[0] = adc_accu_volt;
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <can_put_data+0x58>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <can_put_data+0x5c>)
 800229c:	701a      	strb	r2, [r3, #0]
	AMS0_databytes[1] = (adc_accu_volt >> 8);
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <can_put_data+0x58>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <can_put_data+0x5c>)
 80022aa:	705a      	strb	r2, [r3, #1]
	AMS0_databytes[2] = current;
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <can_put_data+0x60>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <can_put_data+0x5c>)
 80022b4:	709a      	strb	r2, [r3, #2]
	AMS0_databytes[3] = (current >> 8);
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <can_put_data+0x60>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b29b      	uxth	r3, r3
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <can_put_data+0x5c>)
 80022c2:	70da      	strb	r2, [r3, #3]
	AMS0_databytes[6] =  0  | (ts_ready << 3) | (precharge << 4);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <can_put_data+0x64>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	b25a      	sxtb	r2, r3
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <can_put_data+0x68>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	b25b      	sxtb	r3, r3
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <can_put_data+0x5c>)
 80022dc:	719a      	strb	r2, [r3, #6]
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000446 	.word	0x20000446
 80022ec:	200009b0 	.word	0x200009b0
 80022f0:	200009e0 	.word	0x200009e0
 80022f4:	20000a38 	.word	0x20000a38
 80022f8:	2000044f 	.word	0x2000044f

080022fc <CAN_RX_IVT>:

void CAN_RX_IVT(CAN_HandleTypeDef hcan)
{
 80022fc:	b084      	sub	sp, #16
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08a      	sub	sp, #40	; 0x28
 8002302:	af00      	add	r7, sp, #0
 8002304:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8002308:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[6];

	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	f107 020c 	add.w	r2, r7, #12
 8002312:	2100      	movs	r1, #0
 8002314:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002318:	f001 fd8b 	bl	8003e32 <HAL_CAN_GetRxMessage>
	{

	}
	current_data = 0;
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <CAN_RX_IVT+0x6c>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

	if(RxHeader.StdId == 0x521)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f240 5221 	movw	r2, #1313	; 0x521
 8002328:	4293      	cmp	r3, r2
 800232a:	d116      	bne.n	800235a <CAN_RX_IVT+0x5e>
		for(uint8_t i = 0; i < 5; i++)
		{
			current_data |= (RxData[5-i] << (i*8));
		}
*/
		current_data = RxData[5] | (RxData[4] << (1*8)) | (RxData[3] << (2*8)) | (RxData[2] << (3*8));
 800232c:	7a7b      	ldrb	r3, [r7, #9]
 800232e:	461a      	mov	r2, r3
 8002330:	7a3b      	ldrb	r3, [r7, #8]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	431a      	orrs	r2, r3
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	431a      	orrs	r2, r3
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	061b      	lsls	r3, r3, #24
 8002340:	4313      	orrs	r3, r2
 8002342:	461a      	mov	r2, r3
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <CAN_RX_IVT+0x6c>)
 8002346:	601a      	str	r2, [r3, #0]

		current = current_data/100;
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <CAN_RX_IVT+0x6c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <CAN_RX_IVT+0x70>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <CAN_RX_IVT+0x74>)
 8002358:	801a      	strh	r2, [r3, #0]


	}


}
 800235a:	bf00      	nop
 800235c:	3728      	adds	r7, #40	; 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002364:	b004      	add	sp, #16
 8002366:	4770      	bx	lr
 8002368:	200009dc 	.word	0x200009dc
 800236c:	51eb851f 	.word	0x51eb851f
 8002370:	200009e0 	.word	0x200009e0

08002374 <CAN_50>:

void CAN_50(uint8_t precharge_data[])		// CAN Messages transmitted with 50 Hz
{
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	b091      	sub	sp, #68	; 0x44
 8002378:	af0e      	add	r7, sp, #56	; 0x38
 800237a:	6078      	str	r0, [r7, #4]

	CAN_TX(hcan1, AMS0_header, precharge_data);
 800237c:	4e1a      	ldr	r6, [pc, #104]	; (80023e8 <CAN_50+0x74>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	930c      	str	r3, [sp, #48]	; 0x30
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <CAN_50+0x78>)
 8002384:	ac06      	add	r4, sp, #24
 8002386:	461d      	mov	r5, r3
 8002388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800238a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800238c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002390:	e884 0003 	stmia.w	r4, {r0, r1}
 8002394:	466d      	mov	r5, sp
 8002396:	f106 0410 	add.w	r4, r6, #16
 800239a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80023aa:	f7ff fecf 	bl	800214c <CAN_TX>
	CAN_TX_IVT(hcan2,test_header, test);
 80023ae:	4e10      	ldr	r6, [pc, #64]	; (80023f0 <CAN_50+0x7c>)
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <CAN_50+0x80>)
 80023b2:	930c      	str	r3, [sp, #48]	; 0x30
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <CAN_50+0x84>)
 80023b6:	ac06      	add	r4, sp, #24
 80023b8:	461d      	mov	r5, r3
 80023ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80023c6:	466d      	mov	r5, sp
 80023c8:	f106 0410 	add.w	r4, r6, #16
 80023cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80023dc:	f7ff fee9 	bl	80021b2 <CAN_TX_IVT>
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e8:	200009e4 	.word	0x200009e4
 80023ec:	20000004 	.word	0x20000004
 80023f0:	20000a0c 	.word	0x20000a0c
 80023f4:	200009d4 	.word	0x200009d4
 80023f8:	20000034 	.word	0x20000034

080023fc <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 80023fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fe:	b091      	sub	sp, #68	; 0x44
 8002400:	af0e      	add	r7, sp, #56	; 0x38
 8002402:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, bms_data);
 8002404:	4e0f      	ldr	r6, [pc, #60]	; (8002444 <CAN_10+0x48>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	930c      	str	r3, [sp, #48]	; 0x30
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <CAN_10+0x4c>)
 800240c:	ac06      	add	r4, sp, #24
 800240e:	461d      	mov	r5, r3
 8002410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002414:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002418:	e884 0003 	stmia.w	r4, {r0, r1}
 800241c:	466d      	mov	r5, sp
 800241e:	f106 0410 	add.w	r4, r6, #16
 8002422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800242a:	e885 0003 	stmia.w	r5, {r0, r1}
 800242e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002432:	f7ff fe8b 	bl	800214c <CAN_TX>

	 get_ts_ready();
 8002436:	f000 f97d 	bl	8002734 <get_ts_ready>

				HAL_GPIO_WritePin(AIR_P_SW_GPIO_Port, AIR_P_SW_Pin, GPIO_PIN_RESET);
				sc_closed = 0;
			}
			*/
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002442:	bf00      	nop
 8002444:	200009e4 	.word	0x200009e4
 8002448:	2000001c 	.word	0x2000001c

0800244c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <MX_CAN1_Init+0xa0>)
 8002454:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <MX_CAN1_Init+0xa4>)
 8002456:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <MX_CAN1_Init+0xa0>)
 800245a:	2204      	movs	r2, #4
 800245c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <MX_CAN1_Init+0xa0>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <MX_CAN1_Init+0xa0>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <MX_CAN1_Init+0xa0>)
 800246c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002470:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_CAN1_Init+0xa0>)
 8002474:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002478:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <MX_CAN1_Init+0xa0>)
 800247c:	2200      	movs	r2, #0
 800247e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_CAN1_Init+0xa0>)
 8002482:	2200      	movs	r2, #0
 8002484:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <MX_CAN1_Init+0xa0>)
 8002488:	2200      	movs	r2, #0
 800248a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_CAN1_Init+0xa0>)
 800248e:	2200      	movs	r2, #0
 8002490:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_CAN1_Init+0xa0>)
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_CAN1_Init+0xa0>)
 800249a:	2200      	movs	r2, #0
 800249c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800249e:	4813      	ldr	r0, [pc, #76]	; (80024ec <MX_CAN1_Init+0xa0>)
 80024a0:	f001 f9d8 	bl	8003854 <HAL_CAN_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80024aa:	f000 faf6 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80024ae:	2301      	movs	r3, #1
 80024b0:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x500<<5;
 80024ba:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80024be:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7FF<<5;
 80024c4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024c8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 80024d6:	230e      	movs	r3, #14
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80024da:	463b      	mov	r3, r7
 80024dc:	4619      	mov	r1, r3
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <MX_CAN1_Init+0xa0>)
 80024e0:	f001 fab4 	bl	8003a4c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200009e4 	.word	0x200009e4
 80024f0:	40006400 	.word	0x40006400

080024f4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <MX_CAN2_Init+0xa0>)
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <MX_CAN2_Init+0xa4>)
 80024fe:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002502:	2208      	movs	r2, #8
 8002504:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800250c:	4b21      	ldr	r3, [pc, #132]	; (8002594 <MX_CAN2_Init+0xa0>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002514:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002518:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <MX_CAN2_Init+0xa0>)
 800251c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002520:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002524:	2200      	movs	r2, #0
 8002526:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <MX_CAN2_Init+0xa0>)
 800252a:	2200      	movs	r2, #0
 800252c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002530:	2200      	movs	r2, #0
 8002532:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002536:	2200      	movs	r2, #0
 8002538:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <MX_CAN2_Init+0xa0>)
 800253c:	2200      	movs	r2, #0
 800253e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002542:	2200      	movs	r2, #0
 8002544:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002546:	4813      	ldr	r0, [pc, #76]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002548:	f001 f984 	bl	8003854 <HAL_CAN_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8002552:	f000 faa2 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig_ivt;

  canfilterconfig_ivt.FilterActivation = CAN_FILTER_ENABLE;
 8002556:	2301      	movs	r3, #1
 8002558:	623b      	str	r3, [r7, #32]
  canfilterconfig_ivt.FilterBank = 14;  // which filter bank to use from the assigned ones
 800255a:	230e      	movs	r3, #14
 800255c:	617b      	str	r3, [r7, #20]
  canfilterconfig_ivt.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  canfilterconfig_ivt.FilterIdHigh = 0x521<<5;
 8002562:	f24a 4320 	movw	r3, #42016	; 0xa420
 8002566:	603b      	str	r3, [r7, #0]
  canfilterconfig_ivt.FilterIdLow = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	607b      	str	r3, [r7, #4]
  canfilterconfig_ivt.FilterMaskIdHigh = 0x7FF<<5;
 800256c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002570:	60bb      	str	r3, [r7, #8]
  canfilterconfig_ivt.FilterMaskIdLow = 0x0000;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  canfilterconfig_ivt.FilterMode = CAN_FILTERMODE_IDMASK;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  canfilterconfig_ivt.FilterScale = CAN_FILTERSCALE_32BIT;
 800257a:	2301      	movs	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
  canfilterconfig_ivt.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 800257e:	230e      	movs	r3, #14
 8002580:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig_ivt);
 8002582:	463b      	mov	r3, r7
 8002584:	4619      	mov	r1, r3
 8002586:	4803      	ldr	r0, [pc, #12]	; (8002594 <MX_CAN2_Init+0xa0>)
 8002588:	f001 fa60 	bl	8003a4c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	3728      	adds	r7, #40	; 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000a0c 	.word	0x20000a0c
 8002598:	40006800 	.word	0x40006800

0800259c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a53      	ldr	r2, [pc, #332]	; (8002708 <HAL_CAN_MspInit+0x16c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d146      	bne.n	800264c <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80025be:	4b53      	ldr	r3, [pc, #332]	; (800270c <HAL_CAN_MspInit+0x170>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_CAN_MspInit+0x170>)
 80025c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_CAN_MspInit+0x170>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d10d      	bne.n	80025ec <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a4d      	ldr	r2, [pc, #308]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80025da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025de:	6413      	str	r3, [r2, #64]	; 0x40
 80025e0:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	4b47      	ldr	r3, [pc, #284]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a46      	ldr	r2, [pc, #280]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b44      	ldr	r3, [pc, #272]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002608:	f44f 7340 	mov.w	r3, #768	; 0x300
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800261a:	2309      	movs	r3, #9
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	4619      	mov	r1, r3
 8002624:	483b      	ldr	r0, [pc, #236]	; (8002714 <HAL_CAN_MspInit+0x178>)
 8002626:	f002 f87b 	bl	8004720 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2013      	movs	r0, #19
 8002630:	f002 f83f 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002634:	2013      	movs	r0, #19
 8002636:	f002 f858 	bl	80046ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2014      	movs	r0, #20
 8002640:	f002 f837 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002644:	2014      	movs	r0, #20
 8002646:	f002 f850 	bl	80046ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800264a:	e058      	b.n	80026fe <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a31      	ldr	r2, [pc, #196]	; (8002718 <HAL_CAN_MspInit+0x17c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d153      	bne.n	80026fe <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <HAL_CAN_MspInit+0x174>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a2c      	ldr	r2, [pc, #176]	; (8002710 <HAL_CAN_MspInit+0x174>)
 8002660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <HAL_CAN_MspInit+0x174>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002672:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_CAN_MspInit+0x170>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a24      	ldr	r2, [pc, #144]	; (800270c <HAL_CAN_MspInit+0x170>)
 800267a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_CAN_MspInit+0x170>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10d      	bne.n	80026a0 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_CAN_MspInit+0x174>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <HAL_CAN_MspInit+0x174>)
 800268e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002692:	6413      	str	r3, [r2, #64]	; 0x40
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_CAN_MspInit+0x174>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	6313      	str	r3, [r2, #48]	; 0x30
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_CAN_MspInit+0x174>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80026bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ca:	2303      	movs	r3, #3
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80026ce:	2309      	movs	r3, #9
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 031c 	add.w	r3, r7, #28
 80026d6:	4619      	mov	r1, r3
 80026d8:	480e      	ldr	r0, [pc, #56]	; (8002714 <HAL_CAN_MspInit+0x178>)
 80026da:	f002 f821 	bl	8004720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	203f      	movs	r0, #63	; 0x3f
 80026e4:	f001 ffe5 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80026e8:	203f      	movs	r0, #63	; 0x3f
 80026ea:	f001 fffe 	bl	80046ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2040      	movs	r0, #64	; 0x40
 80026f4:	f001 ffdd 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80026f8:	2040      	movs	r0, #64	; 0x40
 80026fa:	f001 fff6 	bl	80046ea <HAL_NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3730      	adds	r7, #48	; 0x30
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40006400 	.word	0x40006400
 800270c:	20000a34 	.word	0x20000a34
 8002710:	40023800 	.word	0x40023800
 8002714:	40020400 	.word	0x40020400
 8002718:	40006800 	.word	0x40006800

0800271c <read_sdc>:
	HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);

}

uint8_t read_sdc()
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	// returns 1 if closed
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC, AIR_N_INT_Pin);
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	4803      	ldr	r0, [pc, #12]	; (8002730 <read_sdc+0x14>)
 8002724:	f002 f99a 	bl	8004a5c <HAL_GPIO_ReadPin>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40020800 	.word	0x40020800

08002734 <get_ts_ready>:
*/

	 return AIR_OK;
}
void get_ts_ready()
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0


	if(read_sdc())//&& precharge)
 8002738:	f7ff fff0 	bl	800271c <read_sdc>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d020      	beq.n	8002784 <get_ts_ready+0x50>
	{

		if(ts_on)
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <get_ts_ready+0x94>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03b      	beq.n	80027c2 <get_ts_ready+0x8e>
		{

			 HAL_GPIO_WritePin(GPIOC, LED_YW_Pin, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002750:	481e      	ldr	r0, [pc, #120]	; (80027cc <get_ts_ready+0x98>)
 8002752:	f002 f99a 	bl	8004a8a <HAL_GPIO_WritePin>

			 if(ts_start)
 8002756:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <get_ts_ready+0x9c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d031      	beq.n	80027c2 <get_ts_ready+0x8e>
			 		{
				 sc_closed  = 1;
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <get_ts_ready+0xa0>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
				 ts_ready = 1;
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <get_ts_ready+0xa4>)
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
			 			 HAL_GPIO_WritePin(GPIOC, AIR_P_SW_Pin, GPIO_PIN_SET);
 800276a:	2201      	movs	r2, #1
 800276c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002770:	4816      	ldr	r0, [pc, #88]	; (80027cc <get_ts_ready+0x98>)
 8002772:	f002 f98a 	bl	8004a8a <HAL_GPIO_WritePin>
			 			HAL_GPIO_WritePin(GPIOC, LED_RD_Pin, GPIO_PIN_RESET);
 8002776:	2200      	movs	r2, #0
 8002778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277c:	4813      	ldr	r0, [pc, #76]	; (80027cc <get_ts_ready+0x98>)
 800277e:	f002 f984 	bl	8004a8a <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);


	}

}
 8002782:	e01e      	b.n	80027c2 <get_ts_ready+0x8e>
		ts_ready = 0;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <get_ts_ready+0xa4>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
		ts_on = 0;
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <get_ts_ready+0x94>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
			if (sc_closed ==1)
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <get_ts_ready+0xa0>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d114      	bne.n	80027c2 <get_ts_ready+0x8e>
				ts_on = 0;
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <get_ts_ready+0x94>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
				ts_start = 0;
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <get_ts_ready+0x9c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <get_ts_ready+0xa8>)
 80027ac:	f002 f96d 	bl	8004a8a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AIR_P_SW_GPIO_Port, AIR_P_SW_Pin, GPIO_PIN_RESET);
 80027b0:	2200      	movs	r2, #0
 80027b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <get_ts_ready+0x98>)
 80027b8:	f002 f967 	bl	8004a8a <HAL_GPIO_WritePin>
				sc_closed = 0;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <get_ts_ready+0xa0>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200009e2 	.word	0x200009e2
 80027cc:	40020800 	.word	0x40020800
 80027d0:	200009e3 	.word	0x200009e3
 80027d4:	20000a39 	.word	0x20000a39
 80027d8:	20000a38 	.word	0x20000a38
 80027dc:	40020400 	.word	0x40020400

080027e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b61      	ldr	r3, [pc, #388]	; (8002980 <MX_GPIO_Init+0x1a0>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a60      	ldr	r2, [pc, #384]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b5a      	ldr	r3, [pc, #360]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a59      	ldr	r2, [pc, #356]	; (8002980 <MX_GPIO_Init+0x1a0>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b57      	ldr	r3, [pc, #348]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b53      	ldr	r3, [pc, #332]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a52      	ldr	r2, [pc, #328]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b50      	ldr	r3, [pc, #320]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b49      	ldr	r3, [pc, #292]	; (8002980 <MX_GPIO_Init+0x1a0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4b45      	ldr	r3, [pc, #276]	; (8002980 <MX_GPIO_Init+0x1a0>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a44      	ldr	r2, [pc, #272]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002870:	f043 0308 	orr.w	r3, r3, #8
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b42      	ldr	r3, [pc, #264]	; (8002980 <MX_GPIO_Init+0x1a0>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin, GPIO_PIN_SET);
 8002882:	2201      	movs	r2, #1
 8002884:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002888:	483e      	ldr	r0, [pc, #248]	; (8002984 <MX_GPIO_Init+0x1a4>)
 800288a:	f002 f8fe 	bl	8004a8a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, AIR_P_SW_Pin, GPIO_PIN_RESET);
 800288e:	2200      	movs	r2, #0
 8002890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002894:	483b      	ldr	r0, [pc, #236]	; (8002984 <MX_GPIO_Init+0x1a4>)
 8002896:	f002 f8f8 	bl	8004a8a <HAL_GPIO_WritePin>



  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800289a:	2200      	movs	r2, #0
 800289c:	f248 0110 	movw	r1, #32784	; 0x8010
 80028a0:	4839      	ldr	r0, [pc, #228]	; (8002988 <MX_GPIO_Init+0x1a8>)
 80028a2:	f002 f8f2 	bl	8004a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 80028a6:	2201      	movs	r2, #1
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	4837      	ldr	r0, [pc, #220]	; (8002988 <MX_GPIO_Init+0x1a8>)
 80028ac:	f002 f8ed 	bl	8004a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 80028b0:	2200      	movs	r2, #0
 80028b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028b6:	4835      	ldr	r0, [pc, #212]	; (800298c <MX_GPIO_Init+0x1ac>)
 80028b8:	f002 f8e7 	bl	8004a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 80028bc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80028c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c2:	2301      	movs	r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	482b      	ldr	r0, [pc, #172]	; (8002984 <MX_GPIO_Init+0x1a4>)
 80028d6:	f001 ff23 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 80028da:	2368      	movs	r3, #104	; 0x68
 80028dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4619      	mov	r1, r3
 80028ec:	4826      	ldr	r0, [pc, #152]	; (8002988 <MX_GPIO_Init+0x1a8>)
 80028ee:	f001 ff17 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 80028f2:	f248 0390 	movw	r3, #32912	; 0x8090
 80028f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	481f      	ldr	r0, [pc, #124]	; (8002988 <MX_GPIO_Init+0x1a8>)
 800290c:	f001 ff08 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SC_CLOSING_Pin|SC_STATE_Pin|AIR_N_ACT_Pin|AIR_N_INT_Pin;
 8002910:	23f0      	movs	r3, #240	; 0xf0
 8002912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	4818      	ldr	r0, [pc, #96]	; (8002984 <MX_GPIO_Init+0x1a4>)
 8002924:	f001 fefc 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 8002928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800292c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	4812      	ldr	r0, [pc, #72]	; (800298c <MX_GPIO_Init+0x1ac>)
 8002942:	f001 feed 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 8002946:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <MX_GPIO_Init+0x1ac>)
 800295c:	f001 fee0 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 8002960:	2304      	movs	r3, #4
 8002962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	4807      	ldr	r0, [pc, #28]	; (8002990 <MX_GPIO_Init+0x1b0>)
 8002974:	f001 fed4 	bl	8004720 <HAL_GPIO_Init>

}
 8002978:	bf00      	nop
 800297a:	3728      	adds	r7, #40	; 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	40020800 	.word	0x40020800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020c00 	.word	0x40020c00

08002994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002998:	f000 faee 	bl	8002f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800299c:	f000 f836 	bl	8002a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029a0:	f7ff ff1e 	bl	80027e0 <MX_GPIO_Init>
  MX_SPI3_Init();
 80029a4:	f000 f87e 	bl	8002aa4 <MX_SPI3_Init>
  MX_TIM2_Init();
 80029a8:	f000 fa4a 	bl	8002e40 <MX_TIM2_Init>
  MX_CAN1_Init();
 80029ac:	f7ff fd4e 	bl	800244c <MX_CAN1_Init>
  MX_CAN2_Init();
 80029b0:	f7ff fda0 	bl	80024f4 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 80029b4:	f007 ff80 	bl	800a8b8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80029b8:	f7fe fe3a 	bl	8001630 <MX_ADC1_Init>
  MX_ADC2_Init();
 80029bc:	f7fe fe8a 	bl	80016d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 80029c0:	480f      	ldr	r0, [pc, #60]	; (8002a00 <main+0x6c>)
 80029c2:	f004 fc93 	bl	80072ec <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 80029c6:	480f      	ldr	r0, [pc, #60]	; (8002a04 <main+0x70>)
 80029c8:	f001 f920 	bl	8003c0c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80029cc:	480e      	ldr	r0, [pc, #56]	; (8002a08 <main+0x74>)
 80029ce:	f001 f91d 	bl	8003c0c <HAL_CAN_Start>
  BMS_init();
 80029d2:	f7ff f837 	bl	8001a44 <BMS_init>

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80029d6:	2102      	movs	r1, #2
 80029d8:	480a      	ldr	r0, [pc, #40]	; (8002a04 <main+0x70>)
 80029da:	f001 fb4b 	bl	8004074 <HAL_CAN_ActivateNotification>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <main+0x54>
    {
  	  Error_Handler();
 80029e4:	f000 f859 	bl	8002a9a <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80029e8:	2102      	movs	r1, #2
 80029ea:	4807      	ldr	r0, [pc, #28]	; (8002a08 <main+0x74>)
 80029ec:	f001 fb42 	bl	8004074 <HAL_CAN_ActivateNotification>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <main+0x66>
    {
  	  Error_Handler();
 80029f6:	f000 f850 	bl	8002a9a <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 80029fa:	f7ff f829 	bl	8001a50 <BMS>
 80029fe:	e7fc      	b.n	80029fa <main+0x66>
 8002a00:	20000a98 	.word	0x20000a98
 8002a04:	200009e4 	.word	0x200009e4
 8002a08:	20000a0c 	.word	0x20000a0c

08002a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b092      	sub	sp, #72	; 0x48
 8002a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a12:	f107 0318 	add.w	r3, r7, #24
 8002a16:	2230      	movs	r2, #48	; 0x30
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f009 fa69 	bl	800bef2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a32:	2301      	movs	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a36:	2310      	movs	r3, #16
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a42:	2308      	movs	r3, #8
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002a46:	23c0      	movs	r3, #192	; 0xc0
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002a4e:	2308      	movs	r3, #8
 8002a50:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a52:	f107 0318 	add.w	r3, r7, #24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fa7a 	bl	8005f50 <HAL_RCC_OscConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002a62:	f000 f81a 	bl	8002a9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a66:	230f      	movs	r3, #15
 8002a68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	2103      	movs	r1, #3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 fcb8 	bl	80063f8 <HAL_RCC_ClockConfig>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002a8e:	f000 f804 	bl	8002a9a <Error_Handler>
  }
}
 8002a92:	bf00      	nop
 8002a94:	3748      	adds	r7, #72	; 0x48
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9e:	b672      	cpsid	i
}
 8002aa0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <Error_Handler+0x8>

08002aa4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002aaa:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <MX_SPI3_Init+0x68>)
 8002aac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002ad8:	2220      	movs	r2, #32
 8002ada:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002af0:	220a      	movs	r2, #10
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <MX_SPI3_Init+0x64>)
 8002af6:	f003 fe3b 	bl	8006770 <HAL_SPI_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002b00:	f7ff ffcb 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000a3c 	.word	0x20000a3c
 8002b0c:	40003c00 	.word	0x40003c00

08002b10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_SPI_MspInit+0x84>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d12c      	bne.n	8002b8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_SPI_MspInit+0x88>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b7c:	2306      	movs	r3, #6
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <HAL_SPI_MspInit+0x8c>)
 8002b88:	f001 fdca 	bl	8004720 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40003c00 	.word	0x40003c00
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020800 	.word	0x40020800

08002ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_MspInit+0x48>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <HAL_MspInit+0x48>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_MspInit+0x48>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_MspInit+0x48>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <HAL_MspInit+0x48>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_MspInit+0x48>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40023800 	.word	0x40023800

08002bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <NMI_Handler+0x4>

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler+0x4>

08002bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler+0x4>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler+0x4>

08002c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c32:	f000 f9f3 	bl	800301c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <CAN1_TX_IRQHandler+0x10>)
 8002c42:	f001 fa3c 	bl	80040be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200009e4 	.word	0x200009e4

08002c50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <CAN1_RX0_IRQHandler+0x10>)
 8002c56:	f001 fa32 	bl	80040be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200009e4 	.word	0x200009e4

08002c64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM2_IRQHandler+0x10>)
 8002c6a:	f004 fbad 	bl	80073c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000a98 	.word	0x20000a98

08002c78 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <CAN2_TX_IRQHandler+0x10>)
 8002c7e:	f001 fa1e 	bl	80040be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000a0c 	.word	0x20000a0c

08002c8c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <CAN2_RX0_IRQHandler+0x10>)
 8002c92:	f001 fa14 	bl	80040be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000a0c 	.word	0x20000a0c

08002ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <OTG_FS_IRQHandler+0x10>)
 8002ca6:	f002 f860 	bl	8004d6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200017ac 	.word	0x200017ac

08002cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return 1;
 8002cb8:	2301      	movs	r3, #1
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <_kill>:

int _kill(int pid, int sig)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ccc:	f009 f974 	bl	800bfb8 <__errno>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2216      	movs	r2, #22
 8002cd4:	601a      	str	r2, [r3, #0]
  return -1;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_exit>:

void _exit (int status)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cea:	f04f 31ff 	mov.w	r1, #4294967295
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffe7 	bl	8002cc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cf4:	e7fe      	b.n	8002cf4 <_exit+0x12>

08002cf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e00a      	b.n	8002d1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d08:	f3af 8000 	nop.w
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	60ba      	str	r2, [r7, #8]
 8002d14:	b2ca      	uxtb	r2, r1
 8002d16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	dbf0      	blt.n	8002d08 <_read+0x12>
  }

  return len;
 8002d26:	687b      	ldr	r3, [r7, #4]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e009      	b.n	8002d56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	60ba      	str	r2, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3301      	adds	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	dbf1      	blt.n	8002d42 <_write+0x12>
    //ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
  }
  return len;
 8002d5e:	687b      	ldr	r3, [r7, #4]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_close>:

int _close(int file)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <_isatty>:

int _isatty(int file)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002da4:	2301      	movs	r3, #1
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <_sbrk+0x5c>)
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <_sbrk+0x60>)
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <_sbrk+0x64>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <_sbrk+0x68>)
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d207      	bcs.n	8002e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002df8:	f009 f8de 	bl	800bfb8 <__errno>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	220c      	movs	r2, #12
 8002e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	e009      	b.n	8002e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <_sbrk+0x64>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	4a05      	ldr	r2, [pc, #20]	; (8002e2c <_sbrk+0x64>)
 8002e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000c000 	.word	0x2000c000
 8002e28:	00000400 	.word	0x00000400
 8002e2c:	20000a94 	.word	0x20000a94
 8002e30:	20001e00 	.word	0x20001e00

08002e34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e54:	463b      	mov	r3, r7
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e66:	222f      	movs	r2, #47	; 0x2f
 8002e68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002e70:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e72:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e78:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e84:	4813      	ldr	r0, [pc, #76]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002e86:	f004 f9e2 	bl	800724e <HAL_TIM_Base_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e90:	f7ff fe03 	bl	8002a9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480c      	ldr	r0, [pc, #48]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002ea2:	f004 fb99 	bl	80075d8 <HAL_TIM_ConfigClockSource>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002eac:	f7ff fdf5 	bl	8002a9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eb8:	463b      	mov	r3, r7
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <MX_TIM2_Init+0x94>)
 8002ebe:	f004 fdab 	bl	8007a18 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ec8:	f7ff fde7 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000a98 	.word	0x20000a98

08002ed8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d115      	bne.n	8002f16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_TIM_Base_MspInit+0x48>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <HAL_TIM_Base_MspInit+0x48>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_TIM_Base_MspInit+0x48>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	201c      	movs	r0, #28
 8002f0c:	f001 fbd1 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f10:	201c      	movs	r0, #28
 8002f12:	f001 fbea 	bl	80046ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002f28:	f7ff ff84 	bl	8002e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f2c:	480c      	ldr	r0, [pc, #48]	; (8002f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f2e:	490d      	ldr	r1, [pc, #52]	; (8002f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f30:	4a0d      	ldr	r2, [pc, #52]	; (8002f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f44:	4c0a      	ldr	r4, [pc, #40]	; (8002f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f52:	f009 f837 	bl	800bfc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f56:	f7ff fd1d 	bl	8002994 <main>
  bx  lr    
 8002f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f5c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f64:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8002f68:	0800e7e4 	.word	0x0800e7e4
  ldr r2, =_sbss
 8002f6c:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8002f70:	20001dfc 	.word	0x20001dfc

08002f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC_IRQHandler>
	...

08002f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_Init+0x40>)
 8002f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <HAL_Init+0x40>)
 8002f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_Init+0x40>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	f001 fb7b 	bl	800469c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa6:	200f      	movs	r0, #15
 8002fa8:	f000 f808 	bl	8002fbc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fac:	f7ff fdf8 	bl	8002ba0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00

08002fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_InitTick+0x54>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_InitTick+0x58>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 fb93 	bl	8004706 <HAL_SYSTICK_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00e      	b.n	8003008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d80a      	bhi.n	8003006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f001 fb5b 	bl	80046b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ffc:	4a06      	ldr	r2, [pc, #24]	; (8003018 <HAL_InitTick+0x5c>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	2000004c 	.word	0x2000004c
 8003014:	20000054 	.word	0x20000054
 8003018:	20000050 	.word	0x20000050

0800301c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_IncTick+0x1c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_IncTick+0x20>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4413      	add	r3, r2
 800302c:	4a03      	ldr	r2, [pc, #12]	; (800303c <HAL_IncTick+0x20>)
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	20000054 	.word	0x20000054
 800303c:	20000ae0 	.word	0x20000ae0

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b02      	ldr	r3, [pc, #8]	; (8003050 <HAL_GetTick+0x10>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	20000ae0 	.word	0x20000ae0

08003054 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff fff0 	bl	8003040 <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d005      	beq.n	800307a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_Delay+0x44>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800307a:	bf00      	nop
 800307c:	f7ff ffe0 	bl	8003040 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d8f7      	bhi.n	800307c <HAL_Delay+0x28>
  {
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000054 	.word	0x20000054

0800309c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e033      	b.n	800311a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe fb5c 	bl	8001778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d118      	bne.n	800310c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030e2:	f023 0302 	bic.w	r3, r3, #2
 80030e6:	f043 0202 	orr.w	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 faaa 	bl	8003648 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
 800310a:	e001      	b.n	8003110 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADC_Start+0x1a>
 800313a:	2302      	movs	r3, #2
 800313c:	e095      	b.n	800326a <HAL_ADC_Start+0x146>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d018      	beq.n	8003186 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003164:	4b43      	ldr	r3, [pc, #268]	; (8003274 <HAL_ADC_Start+0x150>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a43      	ldr	r2, [pc, #268]	; (8003278 <HAL_ADC_Start+0x154>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9a      	lsrs	r2, r3, #18
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8003178:	e002      	b.n	8003180 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3b01      	subs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f9      	bne.n	800317a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d15d      	bne.n	8003250 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d2:	d106      	bne.n	80031e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f023 0206 	bic.w	r2, r3, #6
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
 80031e0:	e002      	b.n	80031e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_ADC_Start+0x158>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d129      	bne.n	8003268 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	e020      	b.n	8003268 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <HAL_ADC_Start+0x15c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d11b      	bne.n	8003268 <HAL_ADC_Start+0x144>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d114      	bne.n	8003268 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	e00b      	b.n	8003268 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f043 0210 	orr.w	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	2000004c 	.word	0x2000004c
 8003278:	431bde83 	.word	0x431bde83
 800327c:	40012300 	.word	0x40012300
 8003280:	40012000 	.word	0x40012000

08003284 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADC_Stop+0x16>
 8003296:	2302      	movs	r3, #2
 8003298:	e021      	b.n	80032de <HAL_ADC_Stop+0x5a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d109      	bne.n	80032d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003304:	d113      	bne.n	800332e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003314:	d10b      	bne.n	800332e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e05c      	b.n	80033e8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800332e:	f7ff fe87 	bl	8003040 <HAL_GetTick>
 8003332:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003334:	e01a      	b.n	800336c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d016      	beq.n	800336c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_ADC_PollForConversion+0x6c>
 8003344:	f7ff fe7c 	bl	8003040 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d20b      	bcs.n	800336c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e03d      	b.n	80033e8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	d1dd      	bne.n	8003336 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0212 	mvn.w	r2, #18
 8003382:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d123      	bne.n	80033e6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11f      	bne.n	80033e6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d111      	bne.n	80033e6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d105      	bne.n	80033e6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1c>
 8003420:	2302      	movs	r3, #2
 8003422:	e103      	b.n	800362c <HAL_ADC_ConfigChannel+0x224>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b09      	cmp	r3, #9
 8003432:	d925      	bls.n	8003480 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68d9      	ldr	r1, [r3, #12]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	4613      	mov	r3, r2
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	4413      	add	r3, r2
 8003448:	3b1e      	subs	r3, #30
 800344a:	2207      	movs	r2, #7
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43da      	mvns	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	400a      	ands	r2, r1
 8003458:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68d9      	ldr	r1, [r3, #12]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	4618      	mov	r0, r3
 800346c:	4603      	mov	r3, r0
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4403      	add	r3, r0
 8003472:	3b1e      	subs	r3, #30
 8003474:	409a      	lsls	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	e022      	b.n	80034c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6919      	ldr	r1, [r3, #16]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	2207      	movs	r2, #7
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	400a      	ands	r2, r1
 80034a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6919      	ldr	r1, [r3, #16]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4618      	mov	r0, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4403      	add	r3, r0
 80034bc:	409a      	lsls	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d824      	bhi.n	8003518 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b05      	subs	r3, #5
 80034e0:	221f      	movs	r2, #31
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43da      	mvns	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	400a      	ands	r2, r1
 80034ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	3b05      	subs	r3, #5
 800350a:	fa00 f203 	lsl.w	r2, r0, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	635a      	str	r2, [r3, #52]	; 0x34
 8003516:	e04c      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d824      	bhi.n	800356a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	3b23      	subs	r3, #35	; 0x23
 8003532:	221f      	movs	r2, #31
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43da      	mvns	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	400a      	ands	r2, r1
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	4618      	mov	r0, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	3b23      	subs	r3, #35	; 0x23
 800355c:	fa00 f203 	lsl.w	r2, r0, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
 8003568:	e023      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	3b41      	subs	r3, #65	; 0x41
 800357c:	221f      	movs	r2, #31
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	400a      	ands	r2, r1
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	4618      	mov	r0, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	3b41      	subs	r3, #65	; 0x41
 80035a6:	fa00 f203 	lsl.w	r2, r0, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a20      	ldr	r2, [pc, #128]	; (8003638 <HAL_ADC_ConfigChannel+0x230>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d109      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1c8>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b12      	cmp	r3, #18
 80035c2:	d105      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_ADC_ConfigChannel+0x234>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_ADC_ConfigChannel+0x234>)
 80035ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035ce:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_ADC_ConfigChannel+0x230>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d123      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21a>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d003      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x1e2>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b11      	cmp	r3, #17
 80035e8:	d11b      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_ADC_ConfigChannel+0x234>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a13      	ldr	r2, [pc, #76]	; (800363c <HAL_ADC_ConfigChannel+0x234>)
 80035f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035f4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d111      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_ADC_ConfigChannel+0x238>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a10      	ldr	r2, [pc, #64]	; (8003644 <HAL_ADC_ConfigChannel+0x23c>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	0c9a      	lsrs	r2, r3, #18
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003614:	e002      	b.n	800361c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3b01      	subs	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f9      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40012000 	.word	0x40012000
 800363c:	40012300 	.word	0x40012300
 8003640:	2000004c 	.word	0x2000004c
 8003644:	431bde83 	.word	0x431bde83

08003648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003650:	4b7e      	ldr	r3, [pc, #504]	; (800384c <ADC_Init+0x204>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a7d      	ldr	r2, [pc, #500]	; (800384c <ADC_Init+0x204>)
 8003656:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800365a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800365c:	4b7b      	ldr	r3, [pc, #492]	; (800384c <ADC_Init+0x204>)
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4979      	ldr	r1, [pc, #484]	; (800384c <ADC_Init+0x204>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	021a      	lsls	r2, r3, #8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800369c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	4a5e      	ldr	r2, [pc, #376]	; (8003850 <ADC_Init+0x208>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6899      	ldr	r1, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800370c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e00f      	b.n	8003742 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003740:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0202 	bic.w	r2, r2, #2
 8003750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6899      	ldr	r1, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7e1b      	ldrb	r3, [r3, #24]
 800375c:	005a      	lsls	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d027      	beq.n	80037c0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800378e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	3b01      	subs	r3, #1
 8003796:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800379a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	fa92 f2a2 	rbit	r2, r2
 80037a2:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	fab2 f282 	clz	r2, r2
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	fa03 f102 	lsl.w	r1, r3, r2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e007      	b.n	80037d0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	051a      	lsls	r2, r3, #20
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003812:	025a      	lsls	r2, r3, #9
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6899      	ldr	r1, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	029a      	lsls	r2, r3, #10
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40012300 	.word	0x40012300
 8003850:	0f000001 	.word	0x0f000001

08003854 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0ed      	b.n	8003a42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fe fe92 	bl	800259c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003888:	f7ff fbda 	bl	8003040 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800388e:	e012      	b.n	80038b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003890:	f7ff fbd6 	bl	8003040 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b0a      	cmp	r3, #10
 800389c:	d90b      	bls.n	80038b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2205      	movs	r2, #5
 80038ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0c5      	b.n	8003a42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0e5      	beq.n	8003890 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0202 	bic.w	r2, r2, #2
 80038d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d4:	f7ff fbb4 	bl	8003040 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80038da:	e012      	b.n	8003902 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038dc:	f7ff fbb0 	bl	8003040 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b0a      	cmp	r3, #10
 80038e8:	d90b      	bls.n	8003902 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2205      	movs	r2, #5
 80038fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e09f      	b.n	8003a42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e5      	bne.n	80038dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7e1b      	ldrb	r3, [r3, #24]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d108      	bne.n	800392a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e007      	b.n	800393a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003938:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7e5b      	ldrb	r3, [r3, #25]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d108      	bne.n	8003954 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e007      	b.n	8003964 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	7e9b      	ldrb	r3, [r3, #26]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d108      	bne.n	800397e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0220 	orr.w	r2, r2, #32
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e007      	b.n	800398e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0220 	bic.w	r2, r2, #32
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7edb      	ldrb	r3, [r3, #27]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d108      	bne.n	80039a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0210 	bic.w	r2, r2, #16
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e007      	b.n	80039b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0210 	orr.w	r2, r2, #16
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7f1b      	ldrb	r3, [r3, #28]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d108      	bne.n	80039d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0208 	orr.w	r2, r2, #8
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e007      	b.n	80039e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0208 	bic.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7f5b      	ldrb	r3, [r3, #29]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d108      	bne.n	80039fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0204 	orr.w	r2, r2, #4
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e007      	b.n	8003a0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	ea42 0103 	orr.w	r1, r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d003      	beq.n	8003a72 <HAL_CAN_ConfigFilter+0x26>
 8003a6a:	7cfb      	ldrb	r3, [r7, #19]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	f040 80be 	bne.w	8003bee <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003a72:	4b65      	ldr	r3, [pc, #404]	; (8003c08 <HAL_CAN_ConfigFilter+0x1bc>)
 8003a74:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d123      	bne.n	8003b1c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003af6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3248      	adds	r2, #72	; 0x48
 8003afc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b12:	6979      	ldr	r1, [r7, #20]
 8003b14:	3348      	adds	r3, #72	; 0x48
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d122      	bne.n	8003b6a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3248      	adds	r2, #72	; 0x48
 8003b4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b60:	6979      	ldr	r1, [r7, #20]
 8003b62:	3348      	adds	r3, #72	; 0x48
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	401a      	ands	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b84:	e007      	b.n	8003b96 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	401a      	ands	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003bb0:	e007      	b.n	8003bc2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d107      	bne.n	8003bda <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003be0:	f023 0201 	bic.w	r2, r3, #1
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e006      	b.n	8003bfc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40006400 	.word	0x40006400

08003c0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d12e      	bne.n	8003c7e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c38:	f7ff fa02 	bl	8003040 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c3e:	e012      	b.n	8003c66 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c40:	f7ff f9fe 	bl	8003040 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b0a      	cmp	r3, #10
 8003c4c:	d90b      	bls.n	8003c66 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e012      	b.n	8003c8c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e5      	bne.n	8003c40 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e006      	b.n	8003c8c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cb2:	7ffb      	ldrb	r3, [r7, #31]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d003      	beq.n	8003cc0 <HAL_CAN_AddTxMessage+0x2c>
 8003cb8:	7ffb      	ldrb	r3, [r7, #31]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	f040 80ad 	bne.w	8003e1a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8095 	beq.w	8003e0a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	0e1b      	lsrs	r3, r3, #24
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003cea:	2201      	movs	r2, #1
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10d      	bne.n	8003d18 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	6809      	ldr	r1, [r1, #0]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3318      	adds	r3, #24
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	440b      	add	r3, r1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e00f      	b.n	8003d38 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d22:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d28:	68f9      	ldr	r1, [r7, #12]
 8003d2a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003d2c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3318      	adds	r3, #24
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	440b      	add	r3, r1
 8003d36:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6819      	ldr	r1, [r3, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	3318      	adds	r3, #24
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	440b      	add	r3, r1
 8003d48:	3304      	adds	r3, #4
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	7d1b      	ldrb	r3, [r3, #20]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d111      	bne.n	8003d78 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	6811      	ldr	r1, [r2, #0]
 8003d68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3318      	adds	r3, #24
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	440b      	add	r3, r1
 8003d74:	3304      	adds	r3, #4
 8003d76:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3307      	adds	r3, #7
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	061a      	lsls	r2, r3, #24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3306      	adds	r3, #6
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3305      	adds	r3, #5
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	4313      	orrs	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	3204      	adds	r2, #4
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	6811      	ldr	r1, [r2, #0]
 8003da0:	ea43 0200 	orr.w	r2, r3, r0
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003dae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3303      	adds	r3, #3
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	061a      	lsls	r2, r3, #24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3302      	adds	r3, #2
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	6811      	ldr	r1, [r2, #0]
 8003dd6:	ea43 0200 	orr.w	r2, r3, r0
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	440b      	add	r3, r1
 8003de0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003de4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	3318      	adds	r3, #24
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	4413      	add	r3, r2
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	6811      	ldr	r1, [r2, #0]
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3318      	adds	r3, #24
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	440b      	add	r3, r1
 8003e04:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e00e      	b.n	8003e28 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e006      	b.n	8003e28 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3724      	adds	r7, #36	; 0x24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e32:	b480      	push	{r7}
 8003e34:	b087      	sub	sp, #28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e46:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d003      	beq.n	8003e56 <HAL_CAN_GetRxMessage+0x24>
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	f040 8103 	bne.w	800405c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10e      	bne.n	8003e7a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d116      	bne.n	8003e98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0f7      	b.n	800406a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0e8      	b.n	800406a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	331b      	adds	r3, #27
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	4413      	add	r3, r2
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0204 	and.w	r2, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	331b      	adds	r3, #27
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	4413      	add	r3, r2
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	0d5b      	lsrs	r3, r3, #21
 8003ec6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e00b      	b.n	8003ee8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	331b      	adds	r3, #27
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	4413      	add	r3, r2
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	08db      	lsrs	r3, r3, #3
 8003ee0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	331b      	adds	r3, #27
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	4413      	add	r3, r2
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0202 	and.w	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	331b      	adds	r3, #27
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	4413      	add	r3, r2
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	611a      	str	r2, [r3, #16]
 8003f1c:	e00b      	b.n	8003f36 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	331b      	adds	r3, #27
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	331b      	adds	r3, #27
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	4413      	add	r3, r2
 8003f42:	3304      	adds	r3, #4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	331b      	adds	r3, #27
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	4413      	add	r3, r2
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0a1a      	lsrs	r2, r3, #8
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	0c1a      	lsrs	r2, r3, #16
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	3302      	adds	r3, #2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0e1a      	lsrs	r2, r3, #24
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	3303      	adds	r3, #3
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	0a1a      	lsrs	r2, r3, #8
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	3305      	adds	r3, #5
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	4413      	add	r3, r2
 8004006:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0c1a      	lsrs	r2, r3, #16
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	3306      	adds	r3, #6
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	4413      	add	r3, r2
 8004020:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	0e1a      	lsrs	r2, r3, #24
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	3307      	adds	r3, #7
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0220 	orr.w	r2, r2, #32
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	e007      	b.n	8004058 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0220 	orr.w	r2, r2, #32
 8004056:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e006      	b.n	800406a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004084:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <HAL_CAN_ActivateNotification+0x1e>
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d109      	bne.n	80040a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6959      	ldr	r1, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e006      	b.n	80040b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b08a      	sub	sp, #40	; 0x28
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d07c      	beq.n	80041fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d023      	beq.n	8004156 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2201      	movs	r2, #1
 8004114:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f983 	bl	800442c <HAL_CAN_TxMailbox0CompleteCallback>
 8004126:	e016      	b.n	8004156 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	e00c      	b.n	8004156 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	e002      	b.n	8004156 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f986 	bl	8004462 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d024      	beq.n	80041aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004168:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f962 	bl	800443e <HAL_CAN_TxMailbox1CompleteCallback>
 800417a:	e016      	b.n	80041aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
 800418e:	e00c      	b.n	80041aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	e002      	b.n	80041aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f965 	bl	8004474 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d024      	beq.n	80041fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f941 	bl	8004450 <HAL_CAN_TxMailbox2CompleteCallback>
 80041ce:	e016      	b.n	80041fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
 80041e2:	e00c      	b.n	80041fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
 80041f6:	e002      	b.n	80041fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f944 	bl	8004486 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00c      	beq.n	8004222 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004218:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2210      	movs	r2, #16
 8004220:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d006      	beq.n	8004244 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2208      	movs	r2, #8
 800423c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f92a 	bl	8004498 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fd fbc9 	bl	80019f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800427c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2210      	movs	r2, #16
 8004284:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2208      	movs	r2, #8
 80042a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f90a 	bl	80044bc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8f2 	bl	80044aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2210      	movs	r2, #16
 80042e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8f3 	bl	80044ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d006      	beq.n	800430a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2208      	movs	r2, #8
 8004302:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f8eb 	bl	80044e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d07b      	beq.n	800440c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d072      	beq.n	8004404 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004378:	2b00      	cmp	r3, #0
 800437a:	d043      	beq.n	8004404 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004382:	2b00      	cmp	r3, #0
 8004384:	d03e      	beq.n	8004404 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800438c:	2b60      	cmp	r3, #96	; 0x60
 800438e:	d02b      	beq.n	80043e8 <HAL_CAN_IRQHandler+0x32a>
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d82e      	bhi.n	80043f2 <HAL_CAN_IRQHandler+0x334>
 8004394:	2b50      	cmp	r3, #80	; 0x50
 8004396:	d022      	beq.n	80043de <HAL_CAN_IRQHandler+0x320>
 8004398:	2b50      	cmp	r3, #80	; 0x50
 800439a:	d82a      	bhi.n	80043f2 <HAL_CAN_IRQHandler+0x334>
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d019      	beq.n	80043d4 <HAL_CAN_IRQHandler+0x316>
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d826      	bhi.n	80043f2 <HAL_CAN_IRQHandler+0x334>
 80043a4:	2b30      	cmp	r3, #48	; 0x30
 80043a6:	d010      	beq.n	80043ca <HAL_CAN_IRQHandler+0x30c>
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d822      	bhi.n	80043f2 <HAL_CAN_IRQHandler+0x334>
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d002      	beq.n	80043b6 <HAL_CAN_IRQHandler+0x2f8>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d005      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80043b4:	e01d      	b.n	80043f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	f043 0308 	orr.w	r3, r3, #8
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043be:	e019      	b.n	80043f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	f043 0310 	orr.w	r3, r3, #16
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043c8:	e014      	b.n	80043f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	f043 0320 	orr.w	r3, r3, #32
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043d2:	e00f      	b.n	80043f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043dc:	e00a      	b.n	80043f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043e6:	e005      	b.n	80043f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043f0:	e000      	b.n	80043f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80043f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004402:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2204      	movs	r2, #4
 800440a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f867 	bl	80044f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004424:	bf00      	nop
 8004426:	3728      	adds	r7, #40	; 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <__NVIC_SetPriorityGrouping+0x44>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004520:	4013      	ands	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800452c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004536:	4a04      	ldr	r2, [pc, #16]	; (8004548 <__NVIC_SetPriorityGrouping+0x44>)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	60d3      	str	r3, [r2, #12]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <__NVIC_GetPriorityGrouping+0x18>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	f003 0307 	and.w	r3, r3, #7
}
 800455a:	4618      	mov	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	2b00      	cmp	r3, #0
 8004578:	db0b      	blt.n	8004592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	f003 021f 	and.w	r2, r3, #31
 8004580:	4906      	ldr	r1, [pc, #24]	; (800459c <__NVIC_EnableIRQ+0x34>)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	2001      	movs	r0, #1
 800458a:	fa00 f202 	lsl.w	r2, r0, r2
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	e000e100 	.word	0xe000e100

080045a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db0a      	blt.n	80045ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	490c      	ldr	r1, [pc, #48]	; (80045ec <__NVIC_SetPriority+0x4c>)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	0112      	lsls	r2, r2, #4
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	440b      	add	r3, r1
 80045c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045c8:	e00a      	b.n	80045e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4908      	ldr	r1, [pc, #32]	; (80045f0 <__NVIC_SetPriority+0x50>)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	3b04      	subs	r3, #4
 80045d8:	0112      	lsls	r2, r2, #4
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	440b      	add	r3, r1
 80045de:	761a      	strb	r2, [r3, #24]
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000e100 	.word	0xe000e100
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b089      	sub	sp, #36	; 0x24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f1c3 0307 	rsb	r3, r3, #7
 800460e:	2b04      	cmp	r3, #4
 8004610:	bf28      	it	cs
 8004612:	2304      	movcs	r3, #4
 8004614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3304      	adds	r3, #4
 800461a:	2b06      	cmp	r3, #6
 800461c:	d902      	bls.n	8004624 <NVIC_EncodePriority+0x30>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3b03      	subs	r3, #3
 8004622:	e000      	b.n	8004626 <NVIC_EncodePriority+0x32>
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004628:	f04f 32ff 	mov.w	r2, #4294967295
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43da      	mvns	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	401a      	ands	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800463c:	f04f 31ff 	mov.w	r1, #4294967295
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	43d9      	mvns	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800464c:	4313      	orrs	r3, r2
         );
}
 800464e:	4618      	mov	r0, r3
 8004650:	3724      	adds	r7, #36	; 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3b01      	subs	r3, #1
 8004664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004668:	d301      	bcc.n	800466e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800466a:	2301      	movs	r3, #1
 800466c:	e00f      	b.n	800468e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <SysTick_Config+0x40>)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004676:	210f      	movs	r1, #15
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	f7ff ff90 	bl	80045a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <SysTick_Config+0x40>)
 8004682:	2200      	movs	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <SysTick_Config+0x40>)
 8004688:	2207      	movs	r2, #7
 800468a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000e010 	.word	0xe000e010

0800469c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff2d 	bl	8004504 <__NVIC_SetPriorityGrouping>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046c4:	f7ff ff42 	bl	800454c <__NVIC_GetPriorityGrouping>
 80046c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7ff ff90 	bl	80045f4 <NVIC_EncodePriority>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff5f 	bl	80045a0 <__NVIC_SetPriority>
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff35 	bl	8004568 <__NVIC_EnableIRQ>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ffa2 	bl	8004658 <SysTick_Config>
 8004714:	4603      	mov	r3, r0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800472e:	e16f      	b.n	8004a10 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	4013      	ands	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8161 	beq.w	8004a0a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d005      	beq.n	8004760 <HAL_GPIO_Init+0x40>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d130      	bne.n	80047c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	2203      	movs	r2, #3
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004796:	2201      	movs	r2, #1
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4013      	ands	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0201 	and.w	r2, r3, #1
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d017      	beq.n	80047fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	2203      	movs	r2, #3
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d123      	bne.n	8004852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	08da      	lsrs	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3208      	adds	r2, #8
 8004812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	220f      	movs	r2, #15
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	08da      	lsrs	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3208      	adds	r2, #8
 800484c:	6939      	ldr	r1, [r7, #16]
 800484e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2203      	movs	r2, #3
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0203 	and.w	r2, r3, #3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80bb 	beq.w	8004a0a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	4b64      	ldr	r3, [pc, #400]	; (8004a2c <HAL_GPIO_Init+0x30c>)
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	4a63      	ldr	r2, [pc, #396]	; (8004a2c <HAL_GPIO_Init+0x30c>)
 800489e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a2:	6453      	str	r3, [r2, #68]	; 0x44
 80048a4:	4b61      	ldr	r3, [pc, #388]	; (8004a2c <HAL_GPIO_Init+0x30c>)
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80048b0:	4a5f      	ldr	r2, [pc, #380]	; (8004a30 <HAL_GPIO_Init+0x310>)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	3302      	adds	r3, #2
 80048b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	220f      	movs	r2, #15
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4013      	ands	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a57      	ldr	r2, [pc, #348]	; (8004a34 <HAL_GPIO_Init+0x314>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d031      	beq.n	8004940 <HAL_GPIO_Init+0x220>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a56      	ldr	r2, [pc, #344]	; (8004a38 <HAL_GPIO_Init+0x318>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d02b      	beq.n	800493c <HAL_GPIO_Init+0x21c>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a55      	ldr	r2, [pc, #340]	; (8004a3c <HAL_GPIO_Init+0x31c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d025      	beq.n	8004938 <HAL_GPIO_Init+0x218>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a54      	ldr	r2, [pc, #336]	; (8004a40 <HAL_GPIO_Init+0x320>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01f      	beq.n	8004934 <HAL_GPIO_Init+0x214>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a53      	ldr	r2, [pc, #332]	; (8004a44 <HAL_GPIO_Init+0x324>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d019      	beq.n	8004930 <HAL_GPIO_Init+0x210>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <HAL_GPIO_Init+0x328>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_GPIO_Init+0x20c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a51      	ldr	r2, [pc, #324]	; (8004a4c <HAL_GPIO_Init+0x32c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00d      	beq.n	8004928 <HAL_GPIO_Init+0x208>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a50      	ldr	r2, [pc, #320]	; (8004a50 <HAL_GPIO_Init+0x330>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <HAL_GPIO_Init+0x204>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a4f      	ldr	r2, [pc, #316]	; (8004a54 <HAL_GPIO_Init+0x334>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d101      	bne.n	8004920 <HAL_GPIO_Init+0x200>
 800491c:	2308      	movs	r3, #8
 800491e:	e010      	b.n	8004942 <HAL_GPIO_Init+0x222>
 8004920:	2309      	movs	r3, #9
 8004922:	e00e      	b.n	8004942 <HAL_GPIO_Init+0x222>
 8004924:	2307      	movs	r3, #7
 8004926:	e00c      	b.n	8004942 <HAL_GPIO_Init+0x222>
 8004928:	2306      	movs	r3, #6
 800492a:	e00a      	b.n	8004942 <HAL_GPIO_Init+0x222>
 800492c:	2305      	movs	r3, #5
 800492e:	e008      	b.n	8004942 <HAL_GPIO_Init+0x222>
 8004930:	2304      	movs	r3, #4
 8004932:	e006      	b.n	8004942 <HAL_GPIO_Init+0x222>
 8004934:	2303      	movs	r3, #3
 8004936:	e004      	b.n	8004942 <HAL_GPIO_Init+0x222>
 8004938:	2302      	movs	r3, #2
 800493a:	e002      	b.n	8004942 <HAL_GPIO_Init+0x222>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_GPIO_Init+0x222>
 8004940:	2300      	movs	r3, #0
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	f002 0203 	and.w	r2, r2, #3
 8004948:	0092      	lsls	r2, r2, #2
 800494a:	4093      	lsls	r3, r2
 800494c:	461a      	mov	r2, r3
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004954:	4936      	ldr	r1, [pc, #216]	; (8004a30 <HAL_GPIO_Init+0x310>)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	3302      	adds	r3, #2
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004962:	4b3d      	ldr	r3, [pc, #244]	; (8004a58 <HAL_GPIO_Init+0x338>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	43db      	mvns	r3, r3
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004986:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <HAL_GPIO_Init+0x338>)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800498c:	4b32      	ldr	r3, [pc, #200]	; (8004a58 <HAL_GPIO_Init+0x338>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	43db      	mvns	r3, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80049b0:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <HAL_GPIO_Init+0x338>)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049b6:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <HAL_GPIO_Init+0x338>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	43db      	mvns	r3, r3
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4013      	ands	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80049da:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <HAL_GPIO_Init+0x338>)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HAL_GPIO_Init+0x338>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4013      	ands	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <HAL_GPIO_Init+0x338>)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f47f ae88 	bne.w	8004730 <HAL_GPIO_Init+0x10>
  }
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40013800 	.word	0x40013800
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40020400 	.word	0x40020400
 8004a3c:	40020800 	.word	0x40020800
 8004a40:	40020c00 	.word	0x40020c00
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40021400 	.word	0x40021400
 8004a4c:	40021800 	.word	0x40021800
 8004a50:	40021c00 	.word	0x40021c00
 8004a54:	40022000 	.word	0x40022000
 8004a58:	40013c00 	.word	0x40013c00

08004a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	887b      	ldrh	r3, [r7, #2]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
 8004a78:	e001      	b.n	8004a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	807b      	strh	r3, [r7, #2]
 8004a96:	4613      	mov	r3, r2
 8004a98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a9a:	787b      	ldrb	r3, [r7, #1]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aa0:	887a      	ldrh	r2, [r7, #2]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004aa6:	e003      	b.n	8004ab0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	041a      	lsls	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr

08004aba <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004acc:	887a      	ldrh	r2, [r7, #2]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	041a      	lsls	r2, r3, #16
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	43d9      	mvns	r1, r3
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	400b      	ands	r3, r1
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	619a      	str	r2, [r3, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aee:	b08f      	sub	sp, #60	; 0x3c
 8004af0:	af0a      	add	r7, sp, #40	; 0x28
 8004af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e10f      	b.n	8004d1e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f006 f8bf 	bl	800ac9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2203      	movs	r2, #3
 8004b22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f003 f901 	bl	8007d44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	687e      	ldr	r6, [r7, #4]
 8004b4a:	466d      	mov	r5, sp
 8004b4c:	f106 0410 	add.w	r4, r6, #16
 8004b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b60:	1d33      	adds	r3, r6, #4
 8004b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b64:	6838      	ldr	r0, [r7, #0]
 8004b66:	f002 ffe3 	bl	8007b30 <USB_CoreInit>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0d0      	b.n	8004d1e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f003 f8ee 	bl	8007d64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]
 8004b8c:	e04a      	b.n	8004c24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b8e:	7bfa      	ldrb	r2, [r7, #15]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	333d      	adds	r3, #61	; 0x3d
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	333c      	adds	r3, #60	; 0x3c
 8004bb2:	7bfa      	ldrb	r2, [r7, #15]
 8004bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bb6:	7bfa      	ldrb	r2, [r7, #15]
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	b298      	uxth	r0, r3
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3356      	adds	r3, #86	; 0x56
 8004bca:	4602      	mov	r2, r0
 8004bcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3340      	adds	r3, #64	; 0x40
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3344      	adds	r3, #68	; 0x44
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bf6:	7bfa      	ldrb	r2, [r7, #15]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3348      	adds	r3, #72	; 0x48
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c0a:	7bfa      	ldrb	r2, [r7, #15]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	334c      	adds	r3, #76	; 0x4c
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	3301      	adds	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d3af      	bcc.n	8004b8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]
 8004c32:	e044      	b.n	8004cbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c34:	7bfa      	ldrb	r2, [r7, #15]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c4a:	7bfa      	ldrb	r2, [r7, #15]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c5c:	7bfa      	ldrb	r2, [r7, #15]
 8004c5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c8c:	7bfa      	ldrb	r2, [r7, #15]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ca2:	7bfa      	ldrb	r2, [r7, #15]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d3b5      	bcc.n	8004c34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	687e      	ldr	r6, [r7, #4]
 8004cd0:	466d      	mov	r5, sp
 8004cd2:	f106 0410 	add.w	r4, r6, #16
 8004cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ce2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ce6:	1d33      	adds	r3, r6, #4
 8004ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cea:	6838      	ldr	r0, [r7, #0]
 8004cec:	f003 f886 	bl	8007dfc <USB_DevInit>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00d      	b.n	8004d1e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f004 f8b8 	bl	8008e8c <USB_DevDisconnect>

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_PCD_Start+0x16>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e012      	b.n	8004d62 <HAL_PCD_Start+0x3c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 ffeb 	bl	8007d24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f004 f87a 	bl	8008e4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d6a:	b590      	push	{r4, r7, lr}
 8004d6c:	b08d      	sub	sp, #52	; 0x34
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f004 f931 	bl	8008fe8 <USB_GetMode>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 847c 	bne.w	8005686 <HAL_PCD_IRQHandler+0x91c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f004 f89a 	bl	8008ecc <USB_ReadInterrupts>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8472 	beq.w	8005684 <HAL_PCD_IRQHandler+0x91a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f004 f887 	bl	8008ecc <USB_ReadInterrupts>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d107      	bne.n	8004dd8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f002 0202 	and.w	r2, r2, #2
 8004dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f004 f875 	bl	8008ecc <USB_ReadInterrupts>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d161      	bne.n	8004eb0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0210 	bic.w	r2, r2, #16
 8004dfa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4413      	add	r3, r2
 8004e18:	3304      	adds	r3, #4
 8004e1a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	0c5b      	lsrs	r3, r3, #17
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d124      	bne.n	8004e72 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d035      	beq.n	8004ea0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	6a38      	ldr	r0, [r7, #32]
 8004e48:	f003 feb2 	bl	8008bb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e58:	441a      	add	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e6a:	441a      	add	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	615a      	str	r2, [r3, #20]
 8004e70:	e016      	b.n	8004ea0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	0c5b      	lsrs	r3, r3, #17
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d110      	bne.n	8004ea0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e84:	2208      	movs	r2, #8
 8004e86:	4619      	mov	r1, r3
 8004e88:	6a38      	ldr	r0, [r7, #32]
 8004e8a:	f003 fe91 	bl	8008bb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e9a:	441a      	add	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0210 	orr.w	r2, r2, #16
 8004eae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f004 f809 	bl	8008ecc <USB_ReadInterrupts>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ec4:	f040 80a7 	bne.w	8005016 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f004 f80d 	bl	8008ef0 <USB_ReadDevAllOutEpInterrupt>
 8004ed6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004ed8:	e099      	b.n	800500e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 808e 	beq.w	8005002 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f004 f82f 	bl	8008f54 <USB_ReadDevOutEPInterrupt>
 8004ef6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2301      	movs	r3, #1
 8004f12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fe96 	bl	8005c48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	461a      	mov	r2, r3
 8004f34:	2308      	movs	r3, #8
 8004f36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 ff6c 	bl	8005e18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	2310      	movs	r3, #16
 8004f5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d030      	beq.n	8004fc8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b80      	cmp	r3, #128	; 0x80
 8004f70:	d109      	bne.n	8004f86 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f84:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4413      	add	r3, r2
 8004f98:	3304      	adds	r3, #4
 8004f9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	78db      	ldrb	r3, [r3, #3]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d108      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f005 ff87 	bl	800aec4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005000:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	3301      	adds	r3, #1
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	f47f af62 	bne.w	8004eda <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f003 ff56 	bl	8008ecc <USB_ReadInterrupts>
 8005020:	4603      	mov	r3, r0
 8005022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005026:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800502a:	f040 80db 	bne.w	80051e4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f003 ff75 	bl	8008f22 <USB_ReadDevAllInEpInterrupt>
 8005038:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800503e:	e0cd      	b.n	80051dc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80c2 	beq.w	80051d0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f003 ff99 	bl	8008f8e <USB_ReadDevInEPInterrupt>
 800505c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d057      	beq.n	8005118 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	2201      	movs	r2, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	43db      	mvns	r3, r3
 8005082:	69f9      	ldr	r1, [r7, #28]
 8005084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005088:	4013      	ands	r3, r2
 800508a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	461a      	mov	r2, r3
 800509a:	2301      	movs	r3, #1
 800509c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d132      	bne.n	800510c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	4613      	mov	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3348      	adds	r3, #72	; 0x48
 80050b6:	6819      	ldr	r1, [r3, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050bc:	4613      	mov	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4403      	add	r3, r0
 80050c6:	3344      	adds	r3, #68	; 0x44
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4419      	add	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4403      	add	r3, r0
 80050da:	3348      	adds	r3, #72	; 0x48
 80050dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d113      	bne.n	800510c <HAL_PCD_IRQHandler+0x3a2>
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	334c      	adds	r3, #76	; 0x4c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d108      	bne.n	800510c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005104:	461a      	mov	r2, r3
 8005106:	2101      	movs	r1, #1
 8005108:	f003 ff9e 	bl	8009048 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	b2db      	uxtb	r3, r3
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f005 fe51 	bl	800adba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	461a      	mov	r2, r3
 8005130:	2308      	movs	r3, #8
 8005132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	461a      	mov	r2, r3
 800514c:	2310      	movs	r3, #16
 800514e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	461a      	mov	r2, r3
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d023      	beq.n	80051be <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005178:	6a38      	ldr	r0, [r7, #32]
 800517a:	f002 ff99 	bl	80080b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	3338      	adds	r3, #56	; 0x38
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	3304      	adds	r3, #4
 8005190:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	78db      	ldrb	r3, [r3, #3]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d108      	bne.n	80051ac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2200      	movs	r2, #0
 800519e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f005 fe9e 	bl	800aee8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	461a      	mov	r2, r3
 80051ba:	2302      	movs	r3, #2
 80051bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fcae 	bl	8005b2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	3301      	adds	r3, #1
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f47f af2e 	bne.w	8005040 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f003 fe6f 	bl	8008ecc <USB_ReadInterrupts>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f8:	d114      	bne.n	8005224 <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f005 fe4a 	bl	800aea8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f003 fe4f 	bl	8008ecc <USB_ReadInterrupts>
 800522e:	4603      	mov	r3, r0
 8005230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005238:	d112      	bne.n	8005260 <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f005 fe06 	bl	800ae5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800525e:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f003 fe31 	bl	8008ecc <USB_ReadInterrupts>
 800526a:	4603      	mov	r3, r0
 800526c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005274:	f040 80b7 	bne.w	80053e6 <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2110      	movs	r1, #16
 8005292:	4618      	mov	r0, r3
 8005294:	f002 ff0c 	bl	80080b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005298:	2300      	movs	r3, #0
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800529c:	e046      	b.n	800532c <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	461a      	mov	r2, r3
 80052ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	461a      	mov	r2, r3
 80052e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005300:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005304:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005320:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005324:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	3301      	adds	r3, #1
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005332:	429a      	cmp	r2, r3
 8005334:	d3b3      	bcc.n	800529e <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005344:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005348:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	2b00      	cmp	r3, #0
 8005350:	d016      	beq.n	8005380 <HAL_PCD_IRQHandler+0x616>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005362:	f043 030b 	orr.w	r3, r3, #11
 8005366:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005378:	f043 030b 	orr.w	r3, r3, #11
 800537c:	6453      	str	r3, [r2, #68]	; 0x44
 800537e:	e015      	b.n	80053ac <HAL_PCD_IRQHandler+0x642>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005392:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005396:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a6:	f043 030b 	orr.w	r3, r3, #11
 80053aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053d0:	461a      	mov	r2, r3
 80053d2:	f003 fe39 	bl	8009048 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f003 fd6e 	bl	8008ecc <USB_ReadInterrupts>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fa:	d124      	bne.n	8005446 <HAL_PCD_IRQHandler+0x6dc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f003 fdfe 	bl	8009002 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f002 fecc 	bl	80081a8 <USB_GetDevSpeed>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681c      	ldr	r4, [r3, #0]
 800541c:	f001 f99e 	bl	800675c <HAL_RCC_GetHCLKFreq>
 8005420:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	4620      	mov	r0, r4
 800542c:	f002 fbd8 	bl	8007be0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f005 fcea 	bl	800ae0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005444:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f003 fd3e 	bl	8008ecc <USB_ReadInterrupts>
 8005450:	4603      	mov	r3, r0
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b08      	cmp	r3, #8
 8005458:	d10a      	bne.n	8005470 <HAL_PCD_IRQHandler+0x706>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f005 fcc7 	bl	800adee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f002 0208 	and.w	r2, r2, #8
 800546e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f003 fd29 	bl	8008ecc <USB_ReadInterrupts>
 800547a:	4603      	mov	r3, r0
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d122      	bne.n	80054ca <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005490:	2301      	movs	r3, #1
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
 8005494:	e014      	b.n	80054c0 <HAL_PCD_IRQHandler+0x756>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d105      	bne.n	80054ba <HAL_PCD_IRQHandler+0x750>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fb08 	bl	8005aca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	3301      	adds	r3, #1
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d3e5      	bcc.n	8005496 <HAL_PCD_IRQHandler+0x72c>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f003 fcfc 	bl	8008ecc <USB_ReadInterrupts>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054de:	d13b      	bne.n	8005558 <HAL_PCD_IRQHandler+0x7ee>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054e0:	2301      	movs	r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
 80054e4:	e02b      	b.n	800553e <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3340      	adds	r3, #64	; 0x40
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d115      	bne.n	8005538 <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800550c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800550e:	2b00      	cmp	r3, #0
 8005510:	da12      	bge.n	8005538 <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005516:	4613      	mov	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	333f      	adds	r3, #63	; 0x3f
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800552e:	b2db      	uxtb	r3, r3
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fac9 	bl	8005aca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	3301      	adds	r3, #1
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	429a      	cmp	r2, r3
 8005546:	d3ce      	bcc.n	80054e6 <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f003 fcb5 	bl	8008ecc <USB_ReadInterrupts>
 8005562:	4603      	mov	r3, r0
 8005564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800556c:	d155      	bne.n	800561a <HAL_PCD_IRQHandler+0x8b0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800556e:	2301      	movs	r3, #1
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
 8005572:	e045      	b.n	8005600 <HAL_PCD_IRQHandler+0x896>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d12e      	bne.n	80055fa <HAL_PCD_IRQHandler+0x890>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800559c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da2b      	bge.n	80055fa <HAL_PCD_IRQHandler+0x890>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80055ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d121      	bne.n	80055fa <HAL_PCD_IRQHandler+0x890>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <HAL_PCD_IRQHandler+0x890>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055f6:	6053      	str	r3, [r2, #4]
            break;
 80055f8:	e007      	b.n	800560a <HAL_PCD_IRQHandler+0x8a0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	3301      	adds	r3, #1
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005606:	429a      	cmp	r2, r3
 8005608:	d3b4      	bcc.n	8005574 <HAL_PCD_IRQHandler+0x80a>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f003 fc54 	bl	8008ecc <USB_ReadInterrupts>
 8005624:	4603      	mov	r3, r0
 8005626:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d10a      	bne.n	8005646 <HAL_PCD_IRQHandler+0x8dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f005 fc6b 	bl	800af0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f003 fc3e 	bl	8008ecc <USB_ReadInterrupts>
 8005650:	4603      	mov	r3, r0
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d115      	bne.n	8005686 <HAL_PCD_IRQHandler+0x91c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_PCD_IRQHandler+0x908>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f005 fc5b 	bl	800af28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
 8005682:	e000      	b.n	8005686 <HAL_PCD_IRQHandler+0x91c>
      return;
 8005684:	bf00      	nop
    }
  }
}
 8005686:	3734      	adds	r7, #52	; 0x34
 8005688:	46bd      	mov	sp, r7
 800568a:	bd90      	pop	{r4, r7, pc}

0800568c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_PCD_SetAddress+0x1a>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e013      	b.n	80056ce <HAL_PCD_SetAddress+0x42>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f003 fb9f 	bl	8008e02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	4608      	mov	r0, r1
 80056e0:	4611      	mov	r1, r2
 80056e2:	461a      	mov	r2, r3
 80056e4:	4603      	mov	r3, r0
 80056e6:	70fb      	strb	r3, [r7, #3]
 80056e8:	460b      	mov	r3, r1
 80056ea:	803b      	strh	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da0f      	bge.n	800571c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	3338      	adds	r3, #56	; 0x38
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	3304      	adds	r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	705a      	strb	r2, [r3, #1]
 800571a:	e00f      	b.n	800573c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	f003 020f 	and.w	r2, r3, #15
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	3304      	adds	r3, #4
 8005734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005748:	883a      	ldrh	r2, [r7, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	78ba      	ldrb	r2, [r7, #2]
 8005752:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005766:	78bb      	ldrb	r3, [r7, #2]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d102      	bne.n	8005772 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_PCD_EP_Open+0xaa>
 800577c:	2302      	movs	r3, #2
 800577e:	e00e      	b.n	800579e <HAL_PCD_EP_Open+0xc8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68f9      	ldr	r1, [r7, #12]
 800578e:	4618      	mov	r0, r3
 8005790:	f002 fd2e 	bl	80081f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800579c:	7afb      	ldrb	r3, [r7, #11]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	da0f      	bge.n	80057da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	3338      	adds	r3, #56	; 0x38
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	3304      	adds	r3, #4
 80057d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	705a      	strb	r2, [r3, #1]
 80057d8:	e00f      	b.n	80057fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	f003 020f 	and.w	r2, r3, #15
 80057e0:	4613      	mov	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	4413      	add	r3, r2
 80057f0:	3304      	adds	r3, #4
 80057f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_PCD_EP_Close+0x6e>
 8005810:	2302      	movs	r3, #2
 8005812:	e00e      	b.n	8005832 <HAL_PCD_EP_Close+0x8c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68f9      	ldr	r1, [r7, #12]
 8005822:	4618      	mov	r0, r3
 8005824:	f002 fd6a 	bl	80082fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	460b      	mov	r3, r1
 8005848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800584a:	7afb      	ldrb	r3, [r7, #11]
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	4613      	mov	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	3304      	adds	r3, #4
 8005862:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2200      	movs	r2, #0
 8005874:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2200      	movs	r2, #0
 800587a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587c:	7afb      	ldrb	r3, [r7, #11]
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	b2da      	uxtb	r2, r3
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d102      	bne.n	8005896 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	f002 fe06 	bl	80084b4 <USB_EPStartXfer>

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	f003 020f 	and.w	r2, r3, #15
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80058d4:	681b      	ldr	r3, [r3, #0]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	460b      	mov	r3, r1
 80058ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	f003 020f 	and.w	r2, r3, #15
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	3338      	adds	r3, #56	; 0x38
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	3304      	adds	r3, #4
 8005906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2201      	movs	r2, #1
 800591e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005920:	7afb      	ldrb	r3, [r7, #11]
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	b2da      	uxtb	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d102      	bne.n	800593a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	f002 fdb4 	bl	80084b4 <USB_EPStartXfer>

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	460b      	mov	r3, r1
 8005960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	f003 020f 	and.w	r2, r3, #15
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	d901      	bls.n	8005974 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e050      	b.n	8005a16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005978:	2b00      	cmp	r3, #0
 800597a:	da0f      	bge.n	800599c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	f003 020f 	and.w	r2, r3, #15
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	3338      	adds	r3, #56	; 0x38
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4413      	add	r3, r2
 8005990:	3304      	adds	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	705a      	strb	r2, [r3, #1]
 800599a:	e00d      	b.n	80059b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	3304      	adds	r3, #4
 80059b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_PCD_EP_SetStall+0x82>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e01e      	b.n	8005a16 <HAL_PCD_EP_SetStall+0xc0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f003 f939 	bl	8008c5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	b2d9      	uxtb	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a06:	461a      	mov	r2, r3
 8005a08:	f003 fb1e 	bl	8009048 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	460b      	mov	r3, r1
 8005a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d901      	bls.n	8005a3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e042      	b.n	8005ac2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	da0f      	bge.n	8005a64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	3338      	adds	r3, #56	; 0x38
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	4413      	add	r3, r2
 8005a58:	3304      	adds	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	705a      	strb	r2, [r3, #1]
 8005a62:	e00f      	b.n	8005a84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 020f 	and.w	r2, r3, #15
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_PCD_EP_ClrStall+0x86>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e00e      	b.n	8005ac2 <HAL_PCD_EP_ClrStall+0xa4>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68f9      	ldr	r1, [r7, #12]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f003 f940 	bl	8008d38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	da0c      	bge.n	8005af8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	f003 020f 	and.w	r2, r3, #15
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	3338      	adds	r3, #56	; 0x38
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	3304      	adds	r3, #4
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e00c      	b.n	8005b12 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	f003 020f 	and.w	r2, r3, #15
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3304      	adds	r3, #4
 8005b10:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f002 ff63 	bl	80089e4 <USB_EPStopXfer>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b22:	7afb      	ldrb	r3, [r7, #11]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	3338      	adds	r3, #56	; 0x38
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	3304      	adds	r3, #4
 8005b52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d901      	bls.n	8005b64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e06c      	b.n	8005c3e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d902      	bls.n	8005b80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	3303      	adds	r3, #3
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b88:	e02b      	b.n	8005be2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d902      	bls.n	8005ba6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3303      	adds	r3, #3
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68d9      	ldr	r1, [r3, #12]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	6978      	ldr	r0, [r7, #20]
 8005bc6:	f002 ffb6 	bl	8008b36 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	441a      	add	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d809      	bhi.n	8005c0c <PCD_WriteEmptyTxFifo+0xe0>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	695a      	ldr	r2, [r3, #20]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d203      	bcs.n	8005c0c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1be      	bne.n	8005b8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d811      	bhi.n	8005c3c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	2201      	movs	r2, #1
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	6939      	ldr	r1, [r7, #16]
 8005c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c38:	4013      	ands	r3, r2
 8005c3a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	333c      	adds	r3, #60	; 0x3c
 8005c60:	3304      	adds	r3, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d17b      	bne.n	8005d76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d015      	beq.n	8005cb4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4a61      	ldr	r2, [pc, #388]	; (8005e10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	f240 80b9 	bls.w	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80b3 	beq.w	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	461a      	mov	r2, r3
 8005cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cb0:	6093      	str	r3, [r2, #8]
 8005cb2:	e0a7      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2320      	movs	r3, #32
 8005cce:	6093      	str	r3, [r2, #8]
 8005cd0:	e098      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f040 8093 	bne.w	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4a4b      	ldr	r2, [pc, #300]	; (8005e10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d90f      	bls.n	8005d06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d02:	6093      	str	r3, [r2, #8]
 8005d04:	e07e      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	3304      	adds	r3, #4
 8005d1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1a      	ldr	r2, [r3, #32]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	0159      	lsls	r1, r3, #5
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	440b      	add	r3, r1
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d32:	1ad2      	subs	r2, r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d114      	bne.n	8005d68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d50:	461a      	mov	r2, r3
 8005d52:	2101      	movs	r1, #1
 8005d54:	f003 f978 	bl	8009048 <USB_EP0_OutStart>
 8005d58:	e006      	b.n	8005d68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	441a      	add	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f005 f808 	bl	800ad84 <HAL_PCD_DataOutStageCallback>
 8005d74:	e046      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4a26      	ldr	r2, [pc, #152]	; (8005e14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d124      	bne.n	8005dc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d94:	461a      	mov	r2, r3
 8005d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9a:	6093      	str	r3, [r2, #8]
 8005d9c:	e032      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	461a      	mov	r2, r3
 8005db6:	2320      	movs	r3, #32
 8005db8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f004 ffdf 	bl	800ad84 <HAL_PCD_DataOutStageCallback>
 8005dc6:	e01d      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d114      	bne.n	8005df8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d108      	bne.n	8005df8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005df0:	461a      	mov	r2, r3
 8005df2:	2100      	movs	r1, #0
 8005df4:	f003 f928 	bl	8009048 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f004 ffc0 	bl	800ad84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	4f54300a 	.word	0x4f54300a
 8005e14:	4f54310a 	.word	0x4f54310a

08005e18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	333c      	adds	r3, #60	; 0x3c
 8005e30:	3304      	adds	r3, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a15      	ldr	r2, [pc, #84]	; (8005ea0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d90e      	bls.n	8005e6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	461a      	mov	r2, r3
 8005e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f004 ff77 	bl	800ad60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d90c      	bls.n	8005e94 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d108      	bne.n	8005e94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2101      	movs	r1, #1
 8005e90:	f003 f8da 	bl	8009048 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	4f54300a 	.word	0x4f54300a

08005ea4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d107      	bne.n	8005ed2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ec2:	883b      	ldrh	r3, [r7, #0]
 8005ec4:	0419      	lsls	r1, r3, #16
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
 8005ed0:	e028      	b.n	8005f24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	0c1b      	lsrs	r3, r3, #16
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e00d      	b.n	8005f02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	3340      	adds	r3, #64	; 0x40
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4413      	add	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	3301      	adds	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	7bfa      	ldrb	r2, [r7, #15]
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d3ec      	bcc.n	8005ee6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f0c:	883b      	ldrh	r3, [r7, #0]
 8005f0e:	0418      	lsls	r0, r3, #16
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	4302      	orrs	r2, r0
 8005f1c:	3340      	adds	r3, #64	; 0x40
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr

08005f30 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	887a      	ldrh	r2, [r7, #2]
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	; 0x28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e23b      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d050      	beq.n	8006010 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f6e:	4b9e      	ldr	r3, [pc, #632]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d00c      	beq.n	8005f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f7a:	4b9b      	ldr	r3, [pc, #620]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d112      	bne.n	8005fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f86:	4b98      	ldr	r3, [pc, #608]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f92:	d10b      	bne.n	8005fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f94:	4b94      	ldr	r3, [pc, #592]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d036      	beq.n	800600e <HAL_RCC_OscConfig+0xbe>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d132      	bne.n	800600e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e216      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4b8e      	ldr	r3, [pc, #568]	; (80061ec <HAL_RCC_OscConfig+0x29c>)
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d013      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbe:	f7fd f83f 	bl	8003040 <HAL_GetTick>
 8005fc2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc6:	f7fd f83b 	bl	8003040 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b64      	cmp	r3, #100	; 0x64
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e200      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd8:	4b83      	ldr	r3, [pc, #524]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x76>
 8005fe4:	e014      	b.n	8006010 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe6:	f7fd f82b 	bl	8003040 <HAL_GetTick>
 8005fea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fee:	f7fd f827 	bl	8003040 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b64      	cmp	r3, #100	; 0x64
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e1ec      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006000:	4b79      	ldr	r3, [pc, #484]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f0      	bne.n	8005fee <HAL_RCC_OscConfig+0x9e>
 800600c:	e000      	b.n	8006010 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d077      	beq.n	800610c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800601c:	4b72      	ldr	r3, [pc, #456]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006028:	4b6f      	ldr	r3, [pc, #444]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006030:	2b08      	cmp	r3, #8
 8006032:	d126      	bne.n	8006082 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006034:	4b6c      	ldr	r3, [pc, #432]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d120      	bne.n	8006082 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006040:	4b69      	ldr	r3, [pc, #420]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <HAL_RCC_OscConfig+0x108>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d001      	beq.n	8006058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e1c0      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006058:	4b63      	ldr	r3, [pc, #396]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	21f8      	movs	r1, #248	; 0xf8
 8006066:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	fa91 f1a1 	rbit	r1, r1
 800606e:	6179      	str	r1, [r7, #20]
  return result;
 8006070:	6979      	ldr	r1, [r7, #20]
 8006072:	fab1 f181 	clz	r1, r1
 8006076:	b2c9      	uxtb	r1, r1
 8006078:	408b      	lsls	r3, r1
 800607a:	495b      	ldr	r1, [pc, #364]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 800607c:	4313      	orrs	r3, r2
 800607e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006080:	e044      	b.n	800610c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d02a      	beq.n	80060e0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800608a:	4b59      	ldr	r3, [pc, #356]	; (80061f0 <HAL_RCC_OscConfig+0x2a0>)
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006090:	f7fc ffd6 	bl	8003040 <HAL_GetTick>
 8006094:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006098:	f7fc ffd2 	bl	8003040 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e197      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060aa:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f0      	beq.n	8006098 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b6:	4b4c      	ldr	r3, [pc, #304]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	21f8      	movs	r1, #248	; 0xf8
 80060c4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	6939      	ldr	r1, [r7, #16]
 80060c8:	fa91 f1a1 	rbit	r1, r1
 80060cc:	60f9      	str	r1, [r7, #12]
  return result;
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	fab1 f181 	clz	r1, r1
 80060d4:	b2c9      	uxtb	r1, r1
 80060d6:	408b      	lsls	r3, r1
 80060d8:	4943      	ldr	r1, [pc, #268]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]
 80060de:	e015      	b.n	800610c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060e0:	4b43      	ldr	r3, [pc, #268]	; (80061f0 <HAL_RCC_OscConfig+0x2a0>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e6:	f7fc ffab 	bl	8003040 <HAL_GetTick>
 80060ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ee:	f7fc ffa7 	bl	8003040 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e16c      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006100:	4b39      	ldr	r3, [pc, #228]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f0      	bne.n	80060ee <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d030      	beq.n	800617a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d016      	beq.n	800614e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006120:	4b34      	ldr	r3, [pc, #208]	; (80061f4 <HAL_RCC_OscConfig+0x2a4>)
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006126:	f7fc ff8b 	bl	8003040 <HAL_GetTick>
 800612a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800612e:	f7fc ff87 	bl	8003040 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e14c      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006140:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8006142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <HAL_RCC_OscConfig+0x1de>
 800614c:	e015      	b.n	800617a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <HAL_RCC_OscConfig+0x2a4>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006154:	f7fc ff74 	bl	8003040 <HAL_GetTick>
 8006158:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800615c:	f7fc ff70 	bl	8003040 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e135      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800616e:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8006170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8087 	beq.w	8006296 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006188:	2300      	movs	r3, #0
 800618a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800618e:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d110      	bne.n	80061bc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619a:	2300      	movs	r3, #0
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 80061a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a8:	6413      	str	r3, [r2, #64]	; 0x40
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <HAL_RCC_OscConfig+0x298>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b2:	60bb      	str	r3, [r7, #8]
 80061b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80061bc:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <HAL_RCC_OscConfig+0x2a8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a0d      	ldr	r2, [pc, #52]	; (80061f8 <HAL_RCC_OscConfig+0x2a8>)
 80061c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <HAL_RCC_OscConfig+0x2a8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d122      	bne.n	800621a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061d4:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <HAL_RCC_OscConfig+0x2a8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a07      	ldr	r2, [pc, #28]	; (80061f8 <HAL_RCC_OscConfig+0x2a8>)
 80061da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061e0:	f7fc ff2e 	bl	8003040 <HAL_GetTick>
 80061e4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e6:	e012      	b.n	800620e <HAL_RCC_OscConfig+0x2be>
 80061e8:	40023800 	.word	0x40023800
 80061ec:	40023802 	.word	0x40023802
 80061f0:	42470000 	.word	0x42470000
 80061f4:	42470e80 	.word	0x42470e80
 80061f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fc:	f7fc ff20 	bl	8003040 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e0e5      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620e:	4b75      	ldr	r3, [pc, #468]	; (80063e4 <HAL_RCC_OscConfig+0x494>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	4b72      	ldr	r3, [pc, #456]	; (80063e8 <HAL_RCC_OscConfig+0x498>)
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d015      	beq.n	8006258 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800622c:	f7fc ff08 	bl	8003040 <HAL_GetTick>
 8006230:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006232:	e00a      	b.n	800624a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006234:	f7fc ff04 	bl	8003040 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e0c7      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624a:	4b68      	ldr	r3, [pc, #416]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0ee      	beq.n	8006234 <HAL_RCC_OscConfig+0x2e4>
 8006256:	e014      	b.n	8006282 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006258:	f7fc fef2 	bl	8003040 <HAL_GetTick>
 800625c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800625e:	e00a      	b.n	8006276 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006260:	f7fc feee 	bl	8003040 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	; 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e0b1      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006276:	4b5d      	ldr	r3, [pc, #372]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1ee      	bne.n	8006260 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628a:	4b58      	ldr	r3, [pc, #352]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	4a57      	ldr	r2, [pc, #348]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 8006290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 809c 	beq.w	80063d8 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a0:	4b52      	ldr	r3, [pc, #328]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 030c 	and.w	r3, r3, #12
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d061      	beq.n	8006370 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d146      	bne.n	8006342 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b4:	4b4e      	ldr	r3, [pc, #312]	; (80063f0 <HAL_RCC_OscConfig+0x4a0>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ba:	f7fc fec1 	bl	8003040 <HAL_GetTick>
 80062be:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c2:	f7fc febd 	bl	8003040 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b64      	cmp	r3, #100	; 0x64
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e082      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d4:	4b45      	ldr	r3, [pc, #276]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1f0      	bne.n	80062c2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062e0:	4b42      	ldr	r3, [pc, #264]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <HAL_RCC_OscConfig+0x4a4>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	69d1      	ldr	r1, [r2, #28]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6a12      	ldr	r2, [r2, #32]
 80062f0:	4311      	orrs	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062f6:	0192      	lsls	r2, r2, #6
 80062f8:	4311      	orrs	r1, r2
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062fe:	0612      	lsls	r2, r2, #24
 8006300:	4311      	orrs	r1, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006306:	0852      	lsrs	r2, r2, #1
 8006308:	3a01      	subs	r2, #1
 800630a:	0412      	lsls	r2, r2, #16
 800630c:	430a      	orrs	r2, r1
 800630e:	4937      	ldr	r1, [pc, #220]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 8006310:	4313      	orrs	r3, r2
 8006312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006314:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <HAL_RCC_OscConfig+0x4a0>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631a:	f7fc fe91 	bl	8003040 <HAL_GetTick>
 800631e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006322:	f7fc fe8d 	bl	8003040 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b64      	cmp	r3, #100	; 0x64
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e052      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006334:	4b2d      	ldr	r3, [pc, #180]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0f0      	beq.n	8006322 <HAL_RCC_OscConfig+0x3d2>
 8006340:	e04a      	b.n	80063d8 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <HAL_RCC_OscConfig+0x4a0>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fc fe7a 	bl	8003040 <HAL_GetTick>
 800634c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006350:	f7fc fe76 	bl	8003040 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	; 0x64
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e03b      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006362:	4b22      	ldr	r3, [pc, #136]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x400>
 800636e:	e033      	b.n	80063d8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e02e      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x49c>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	429a      	cmp	r2, r3
 800638e:	d121      	bne.n	80063d4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800639a:	429a      	cmp	r2, r3
 800639c:	d11a      	bne.n	80063d4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063a4:	4013      	ands	r3, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063aa:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d111      	bne.n	80063d4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	3b01      	subs	r3, #1
 80063be:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d107      	bne.n	80063d4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d001      	beq.n	80063d8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40007000 	.word	0x40007000
 80063e8:	40023870 	.word	0x40023870
 80063ec:	40023800 	.word	0x40023800
 80063f0:	42470060 	.word	0x42470060
 80063f4:	f0bc8000 	.word	0xf0bc8000

080063f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0d2      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800640c:	4b6b      	ldr	r3, [pc, #428]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d90c      	bls.n	8006434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641a:	4b68      	ldr	r3, [pc, #416]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b66      	ldr	r3, [pc, #408]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0be      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d020      	beq.n	8006482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800644c:	4b5c      	ldr	r3, [pc, #368]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4a5b      	ldr	r2, [pc, #364]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8006464:	4b56      	ldr	r3, [pc, #344]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4a55      	ldr	r2, [pc, #340]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800646a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800646e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006470:	4b53      	ldr	r3, [pc, #332]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4950      	ldr	r1, [pc, #320]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800647e:	4313      	orrs	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d040      	beq.n	8006510 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d107      	bne.n	80064a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006496:	4b4a      	ldr	r3, [pc, #296]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d115      	bne.n	80064ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e085      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d107      	bne.n	80064be <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ae:	4b44      	ldr	r3, [pc, #272]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e079      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064be:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e071      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ce:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f023 0203 	bic.w	r2, r3, #3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4939      	ldr	r1, [pc, #228]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e0:	f7fc fdae 	bl	8003040 <HAL_GetTick>
 80064e4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e6:	e00a      	b.n	80064fe <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e8:	f7fc fdaa 	bl	8003040 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e059      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fe:	4b30      	ldr	r3, [pc, #192]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 020c 	and.w	r2, r3, #12
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	429a      	cmp	r2, r3
 800650e:	d1eb      	bne.n	80064e8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006510:	4b2a      	ldr	r3, [pc, #168]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d20c      	bcs.n	8006538 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b27      	ldr	r3, [pc, #156]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006526:	4b25      	ldr	r3, [pc, #148]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d001      	beq.n	8006538 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e03c      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006544:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	491b      	ldr	r1, [pc, #108]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	4913      	ldr	r1, [pc, #76]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006572:	4313      	orrs	r3, r2
 8006574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006576:	f000 f82b 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 800657a:	4601      	mov	r1, r0
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006584:	22f0      	movs	r2, #240	; 0xf0
 8006586:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	fa92 f2a2 	rbit	r2, r2
 800658e:	60fa      	str	r2, [r7, #12]
  return result;
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	fab2 f282 	clz	r2, r2
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	40d3      	lsrs	r3, r2
 800659a:	4a0a      	ldr	r2, [pc, #40]	; (80065c4 <HAL_RCC_ClockConfig+0x1cc>)
 800659c:	5cd3      	ldrb	r3, [r2, r3]
 800659e:	fa21 f303 	lsr.w	r3, r1, r3
 80065a2:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <HAL_RCC_ClockConfig+0x1d0>)
 80065a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <HAL_RCC_ClockConfig+0x1d4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fc fd06 	bl	8002fbc <HAL_InitTick>

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40023c00 	.word	0x40023c00
 80065c0:	40023800 	.word	0x40023800
 80065c4:	0800e454 	.word	0x0800e454
 80065c8:	2000004c 	.word	0x2000004c
 80065cc:	20000050 	.word	0x20000050

080065d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d4:	b090      	sub	sp, #64	; 0x40
 80065d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
 80065dc:	2300      	movs	r3, #0
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065e0:	2300      	movs	r3, #0
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065e8:	4b59      	ldr	r3, [pc, #356]	; (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 030c 	and.w	r3, r3, #12
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d00d      	beq.n	8006610 <HAL_RCC_GetSysClockFreq+0x40>
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	f200 80a2 	bhi.w	800673e <HAL_RCC_GetSysClockFreq+0x16e>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_RCC_GetSysClockFreq+0x34>
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d003      	beq.n	800660a <HAL_RCC_GetSysClockFreq+0x3a>
 8006602:	e09c      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006604:	4b53      	ldr	r3, [pc, #332]	; (8006754 <HAL_RCC_GetSysClockFreq+0x184>)
 8006606:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006608:	e09c      	b.n	8006744 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800660a:	4b53      	ldr	r3, [pc, #332]	; (8006758 <HAL_RCC_GetSysClockFreq+0x188>)
 800660c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800660e:	e099      	b.n	8006744 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006610:	4b4f      	ldr	r3, [pc, #316]	; (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800661a:	4b4d      	ldr	r3, [pc, #308]	; (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d027      	beq.n	8006676 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006626:	4b4a      	ldr	r3, [pc, #296]	; (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	2200      	movs	r2, #0
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	627a      	str	r2, [r7, #36]	; 0x24
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006638:	2100      	movs	r1, #0
 800663a:	4b47      	ldr	r3, [pc, #284]	; (8006758 <HAL_RCC_GetSysClockFreq+0x188>)
 800663c:	fb03 f201 	mul.w	r2, r3, r1
 8006640:	2300      	movs	r3, #0
 8006642:	fb00 f303 	mul.w	r3, r0, r3
 8006646:	4413      	add	r3, r2
 8006648:	4a43      	ldr	r2, [pc, #268]	; (8006758 <HAL_RCC_GetSysClockFreq+0x188>)
 800664a:	fba0 2102 	umull	r2, r1, r0, r2
 800664e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006650:	62ba      	str	r2, [r7, #40]	; 0x28
 8006652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006654:	4413      	add	r3, r2
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	2200      	movs	r2, #0
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	61fa      	str	r2, [r7, #28]
 8006660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006664:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006668:	f7fa fa6a 	bl	8000b40 <__aeabi_uldivmod>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4613      	mov	r3, r2
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006674:	e055      	b.n	8006722 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006676:	4b36      	ldr	r3, [pc, #216]	; (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	099b      	lsrs	r3, r3, #6
 800667c:	2200      	movs	r2, #0
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	617a      	str	r2, [r7, #20]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006688:	f04f 0b00 	mov.w	fp, #0
 800668c:	4652      	mov	r2, sl
 800668e:	465b      	mov	r3, fp
 8006690:	f04f 0000 	mov.w	r0, #0
 8006694:	f04f 0100 	mov.w	r1, #0
 8006698:	0159      	lsls	r1, r3, #5
 800669a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800669e:	0150      	lsls	r0, r2, #5
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	ebb2 080a 	subs.w	r8, r2, sl
 80066a8:	eb63 090b 	sbc.w	r9, r3, fp
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066b8:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066bc:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066c0:	ebb2 0408 	subs.w	r4, r2, r8
 80066c4:	eb63 0509 	sbc.w	r5, r3, r9
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	00eb      	lsls	r3, r5, #3
 80066d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066d6:	00e2      	lsls	r2, r4, #3
 80066d8:	4614      	mov	r4, r2
 80066da:	461d      	mov	r5, r3
 80066dc:	eb14 030a 	adds.w	r3, r4, sl
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	eb45 030b 	adc.w	r3, r5, fp
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066f4:	4629      	mov	r1, r5
 80066f6:	028b      	lsls	r3, r1, #10
 80066f8:	4620      	mov	r0, r4
 80066fa:	4629      	mov	r1, r5
 80066fc:	4604      	mov	r4, r0
 80066fe:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8006702:	4601      	mov	r1, r0
 8006704:	028a      	lsls	r2, r1, #10
 8006706:	4610      	mov	r0, r2
 8006708:	4619      	mov	r1, r3
 800670a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670c:	2200      	movs	r2, #0
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	60fa      	str	r2, [r7, #12]
 8006712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006716:	f7fa fa13 	bl	8000b40 <__aeabi_uldivmod>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4613      	mov	r3, r2
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	0c1b      	lsrs	r3, r3, #16
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	3301      	adds	r3, #1
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800673c:	e002      	b.n	8006744 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCC_GetSysClockFreq+0x184>)
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006742:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006746:	4618      	mov	r0, r3
 8006748:	3740      	adds	r7, #64	; 0x40
 800674a:	46bd      	mov	sp, r7
 800674c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006750:	40023800 	.word	0x40023800
 8006754:	00f42400 	.word	0x00f42400
 8006758:	017d7840 	.word	0x017d7840

0800675c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006760:	4b02      	ldr	r3, [pc, #8]	; (800676c <HAL_RCC_GetHCLKFreq+0x10>)
 8006762:	681b      	ldr	r3, [r3, #0]
}
 8006764:	4618      	mov	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr
 800676c:	2000004c 	.word	0x2000004c

08006770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e07b      	b.n	800687a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d108      	bne.n	800679c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006792:	d009      	beq.n	80067a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	61da      	str	r2, [r3, #28]
 800679a:	e005      	b.n	80067a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc f9a4 	bl	8002b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	ea42 0103 	orr.w	r1, r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	f003 0104 	and.w	r1, r3, #4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	f003 0210 	and.w	r2, r3, #16
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006868:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_SPI_Transmit+0x22>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e12d      	b.n	8006b00 <HAL_SPI_Transmit+0x27e>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068ac:	f7fc fbc8 	bl	8003040 <HAL_GetTick>
 80068b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d002      	beq.n	80068c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
 80068c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068c6:	e116      	b.n	8006af6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_SPI_Transmit+0x52>
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068d8:	e10d      	b.n	8006af6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2203      	movs	r2, #3
 80068de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006920:	d10f      	bne.n	8006942 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d007      	beq.n	8006960 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006968:	d14f      	bne.n	8006a0a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_SPI_Transmit+0xf6>
 8006972:	8afb      	ldrh	r3, [r7, #22]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d142      	bne.n	80069fe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800699c:	e02f      	b.n	80069fe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d112      	bne.n	80069d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	881a      	ldrh	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80069d0:	e015      	b.n	80069fe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d2:	f7fc fb35 	bl	8003040 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d803      	bhi.n	80069ea <HAL_SPI_Transmit+0x168>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d102      	bne.n	80069f0 <HAL_SPI_Transmit+0x16e>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d106      	bne.n	80069fe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80069fc:	e07b      	b.n	8006af6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1ca      	bne.n	800699e <HAL_SPI_Transmit+0x11c>
 8006a08:	e050      	b.n	8006aac <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_SPI_Transmit+0x196>
 8006a12:	8afb      	ldrh	r3, [r7, #22]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d144      	bne.n	8006aa2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	7812      	ldrb	r2, [r2, #0]
 8006a24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a3e:	e030      	b.n	8006aa2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d113      	bne.n	8006a76 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	7812      	ldrb	r2, [r2, #0]
 8006a5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a74:	e015      	b.n	8006aa2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a76:	f7fc fae3 	bl	8003040 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d803      	bhi.n	8006a8e <HAL_SPI_Transmit+0x20c>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d102      	bne.n	8006a94 <HAL_SPI_Transmit+0x212>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d106      	bne.n	8006aa2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006aa0:	e029      	b.n	8006af6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1c9      	bne.n	8006a40 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fbae 	bl	8007212 <SPI_EndRxTxTransaction>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aca:	2300      	movs	r3, #0
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	77fb      	strb	r3, [r7, #31]
 8006aec:	e003      	b.n	8006af6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3720      	adds	r7, #32
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	4613      	mov	r3, r2
 8006b16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d002      	beq.n	8006b2e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b2c:	e0fb      	b.n	8006d26 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b36:	d112      	bne.n	8006b5e <HAL_SPI_Receive+0x56>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10e      	bne.n	8006b5e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2204      	movs	r2, #4
 8006b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f8ef 	bl	8006d38 <HAL_SPI_TransmitReceive>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	e0e8      	b.n	8006d30 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_SPI_Receive+0x64>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e0e1      	b.n	8006d30 <HAL_SPI_Receive+0x228>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b74:	f7fc fa64 	bl	8003040 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_SPI_Receive+0x7e>
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b8a:	e0cc      	b.n	8006d26 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d007      	beq.n	8006c12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d16a      	bne.n	8006cf0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c1a:	e032      	b.n	8006c82 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d115      	bne.n	8006c56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f103 020c 	add.w	r2, r3, #12
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c54:	e015      	b.n	8006c82 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c56:	f7fc f9f3 	bl	8003040 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d803      	bhi.n	8006c6e <HAL_SPI_Receive+0x166>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d102      	bne.n	8006c74 <HAL_SPI_Receive+0x16c>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006c80:	e051      	b.n	8006d26 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1c7      	bne.n	8006c1c <HAL_SPI_Receive+0x114>
 8006c8c:	e035      	b.n	8006cfa <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d113      	bne.n	8006cc4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	b292      	uxth	r2, r2
 8006ca8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	1c9a      	adds	r2, r3, #2
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc2:	e015      	b.n	8006cf0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc4:	f7fc f9bc 	bl	8003040 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d803      	bhi.n	8006cdc <HAL_SPI_Receive+0x1d4>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	d102      	bne.n	8006ce2 <HAL_SPI_Receive+0x1da>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006cee:	e01a      	b.n	8006d26 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1c9      	bne.n	8006c8e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fa52 	bl	80071a8 <SPI_EndRxTransaction>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75fb      	strb	r3, [r7, #23]
 8006d1c:	e003      	b.n	8006d26 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08c      	sub	sp, #48	; 0x30
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d46:	2301      	movs	r3, #1
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_SPI_TransmitReceive+0x26>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e198      	b.n	8007090 <HAL_SPI_TransmitReceive+0x358>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d66:	f7fc f96b 	bl	8003040 <HAL_GetTick>
 8006d6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d7c:	887b      	ldrh	r3, [r7, #2]
 8006d7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d00f      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x70>
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8e:	d107      	bne.n	8006da0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d103      	bne.n	8006da0 <HAL_SPI_TransmitReceive+0x68>
 8006d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d003      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006da0:	2302      	movs	r3, #2
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006da6:	e16d      	b.n	8007084 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <HAL_SPI_TransmitReceive+0x82>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <HAL_SPI_TransmitReceive+0x82>
 8006db4:	887b      	ldrh	r3, [r7, #2]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d103      	bne.n	8006dc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006dc0:	e160      	b.n	8007084 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d003      	beq.n	8006dd6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2205      	movs	r2, #5
 8006dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	887a      	ldrh	r2, [r7, #2]
 8006de6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	887a      	ldrh	r2, [r7, #2]
 8006df8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	887a      	ldrh	r2, [r7, #2]
 8006dfe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d007      	beq.n	8006e2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e32:	d17c      	bne.n	8006f2e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <HAL_SPI_TransmitReceive+0x10a>
 8006e3c:	8b7b      	ldrh	r3, [r7, #26]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d16a      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	881a      	ldrh	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	1c9a      	adds	r2, r3, #2
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e66:	e057      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d11b      	bne.n	8006eae <HAL_SPI_TransmitReceive+0x176>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <HAL_SPI_TransmitReceive+0x176>
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d113      	bne.n	8006eae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	881a      	ldrh	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	1c9a      	adds	r2, r3, #2
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d119      	bne.n	8006ef0 <HAL_SPI_TransmitReceive+0x1b8>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d014      	beq.n	8006ef0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	b292      	uxth	r2, r2
 8006ed2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	1c9a      	adds	r2, r3, #2
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eec:	2301      	movs	r3, #1
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ef0:	f7fc f8a6 	bl	8003040 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d80b      	bhi.n	8006f18 <HAL_SPI_TransmitReceive+0x1e0>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f06:	d007      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006f16:	e0b5      	b.n	8007084 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1a2      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x130>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d19d      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x130>
 8006f2c:	e080      	b.n	8007030 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_SPI_TransmitReceive+0x204>
 8006f36:	8b7b      	ldrh	r3, [r7, #26]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d16f      	bne.n	800701c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f62:	e05b      	b.n	800701c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d11c      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x274>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d017      	beq.n	8006fac <HAL_SPI_TransmitReceive+0x274>
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d114      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	7812      	ldrb	r2, [r2, #0]
 8006f8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d119      	bne.n	8006fee <HAL_SPI_TransmitReceive+0x2b6>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d014      	beq.n	8006fee <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fea:	2301      	movs	r3, #1
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fee:	f7fc f827 	bl	8003040 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d803      	bhi.n	8007006 <HAL_SPI_TransmitReceive+0x2ce>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d102      	bne.n	800700c <HAL_SPI_TransmitReceive+0x2d4>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d107      	bne.n	800701c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800701a:	e033      	b.n	8007084 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d19e      	bne.n	8006f64 <HAL_SPI_TransmitReceive+0x22c>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d199      	bne.n	8006f64 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f8ec 	bl	8007212 <SPI_EndRxTxTransaction>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d006      	beq.n	800704e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800704c:	e01a      	b.n	8007084 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10a      	bne.n	800706c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707a:	e003      	b.n	8007084 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800708c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007090:	4618      	mov	r0, r3
 8007092:	3730      	adds	r7, #48	; 0x30
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070a8:	f7fb ffca 	bl	8003040 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	4413      	add	r3, r2
 80070b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070b8:	f7fb ffc2 	bl	8003040 <HAL_GetTick>
 80070bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070be:	4b39      	ldr	r3, [pc, #228]	; (80071a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	015b      	lsls	r3, r3, #5
 80070c4:	0d1b      	lsrs	r3, r3, #20
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	fb02 f303 	mul.w	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ce:	e054      	b.n	800717a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d050      	beq.n	800717a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070d8:	f7fb ffb2 	bl	8003040 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d902      	bls.n	80070ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d13d      	bne.n	800716a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007106:	d111      	bne.n	800712c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007110:	d004      	beq.n	800711c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800711a:	d107      	bne.n	800712c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800712a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007134:	d10f      	bne.n	8007156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e017      	b.n	800719a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	3b01      	subs	r3, #1
 8007178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	bf0c      	ite	eq
 800718a:	2301      	moveq	r3, #1
 800718c:	2300      	movne	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	429a      	cmp	r2, r3
 8007196:	d19b      	bne.n	80070d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3720      	adds	r7, #32
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	2000004c 	.word	0x2000004c

080071a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071bc:	d111      	bne.n	80071e2 <SPI_EndRxTransaction+0x3a>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c6:	d004      	beq.n	80071d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d0:	d107      	bne.n	80071e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2200      	movs	r2, #0
 80071ea:	2180      	movs	r1, #128	; 0x80
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff ff53 	bl	8007098 <SPI_WaitFlagStateUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	f043 0220 	orr.w	r2, r3, #32
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e000      	b.n	800720a <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af02      	add	r7, sp, #8
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	2180      	movs	r1, #128	; 0x80
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f7ff ff35 	bl	8007098 <SPI_WaitFlagStateUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007238:	f043 0220 	orr.w	r2, r3, #32
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e000      	b.n	8007246 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e041      	b.n	80072e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d106      	bne.n	800727a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7fb fe2f 	bl	8002ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3304      	adds	r3, #4
 800728a:	4619      	mov	r1, r3
 800728c:	4610      	mov	r0, r2
 800728e:	f000 fa8f 	bl	80077b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d001      	beq.n	8007304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e04e      	b.n	80073a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a22      	ldr	r2, [pc, #136]	; (80073ac <HAL_TIM_Base_Start_IT+0xc0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d022      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x80>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732e:	d01d      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x80>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d018      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x80>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d013      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x80>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1b      	ldr	r2, [pc, #108]	; (80073b8 <HAL_TIM_Base_Start_IT+0xcc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00e      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x80>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <HAL_TIM_Base_Start_IT+0xd0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x80>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a18      	ldr	r2, [pc, #96]	; (80073c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x80>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d111      	bne.n	8007390 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b06      	cmp	r3, #6
 800737c:	d010      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0201 	orr.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738e:	e007      	b.n	80073a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40010400 	.word	0x40010400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40001800 	.word	0x40001800

080073c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d122      	bne.n	8007424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0202 	mvn.w	r2, #2
 80073f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f9b4 	bl	8007778 <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9a7 	bl	8007766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f9b6 	bl	800778a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b04      	cmp	r3, #4
 8007430:	d122      	bne.n	8007478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b04      	cmp	r3, #4
 800743e:	d11b      	bne.n	8007478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0204 	mvn.w	r2, #4
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2202      	movs	r2, #2
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f98a 	bl	8007778 <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f97d 	bl	8007766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f98c 	bl	800778a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b08      	cmp	r3, #8
 8007484:	d122      	bne.n	80074cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b08      	cmp	r3, #8
 8007492:	d11b      	bne.n	80074cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0208 	mvn.w	r2, #8
 800749c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2204      	movs	r2, #4
 80074a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f960 	bl	8007778 <HAL_TIM_IC_CaptureCallback>
 80074b8:	e005      	b.n	80074c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f953 	bl	8007766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f962 	bl	800778a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d122      	bne.n	8007520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d11b      	bne.n	8007520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f06f 0210 	mvn.w	r2, #16
 80074f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2208      	movs	r2, #8
 80074f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f936 	bl	8007778 <HAL_TIM_IC_CaptureCallback>
 800750c:	e005      	b.n	800751a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f929 	bl	8007766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f938 	bl	800778a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b01      	cmp	r3, #1
 800752c:	d10e      	bne.n	800754c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b01      	cmp	r3, #1
 800753a:	d107      	bne.n	800754c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0201 	mvn.w	r2, #1
 8007544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fa fa4a 	bl	80019e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007556:	2b80      	cmp	r3, #128	; 0x80
 8007558:	d10e      	bne.n	8007578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007564:	2b80      	cmp	r3, #128	; 0x80
 8007566:	d107      	bne.n	8007578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fad3 	bl	8007b1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007582:	2b40      	cmp	r3, #64	; 0x40
 8007584:	d10e      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	d107      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f8fc 	bl	800779c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d10e      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d107      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0220 	mvn.w	r2, #32
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa9e 	bl	8007b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e0b4      	b.n	800775e <HAL_TIM_ConfigClockSource+0x186>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800761a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762c:	d03e      	beq.n	80076ac <HAL_TIM_ConfigClockSource+0xd4>
 800762e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007632:	f200 8087 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x16c>
 8007636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763a:	f000 8086 	beq.w	800774a <HAL_TIM_ConfigClockSource+0x172>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	d87f      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x16c>
 8007644:	2b70      	cmp	r3, #112	; 0x70
 8007646:	d01a      	beq.n	800767e <HAL_TIM_ConfigClockSource+0xa6>
 8007648:	2b70      	cmp	r3, #112	; 0x70
 800764a:	d87b      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x16c>
 800764c:	2b60      	cmp	r3, #96	; 0x60
 800764e:	d050      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x11a>
 8007650:	2b60      	cmp	r3, #96	; 0x60
 8007652:	d877      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x16c>
 8007654:	2b50      	cmp	r3, #80	; 0x50
 8007656:	d03c      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0xfa>
 8007658:	2b50      	cmp	r3, #80	; 0x50
 800765a:	d873      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x16c>
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d058      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0x13a>
 8007660:	2b40      	cmp	r3, #64	; 0x40
 8007662:	d86f      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x16c>
 8007664:	2b30      	cmp	r3, #48	; 0x30
 8007666:	d064      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x15a>
 8007668:	2b30      	cmp	r3, #48	; 0x30
 800766a:	d86b      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x16c>
 800766c:	2b20      	cmp	r3, #32
 800766e:	d060      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x15a>
 8007670:	2b20      	cmp	r3, #32
 8007672:	d867      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x16c>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d05c      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x15a>
 8007678:	2b10      	cmp	r3, #16
 800767a:	d05a      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x15a>
 800767c:	e062      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800768e:	f000 f9a4 	bl	80079da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	609a      	str	r2, [r3, #8]
      break;
 80076aa:	e04f      	b.n	800774c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076bc:	f000 f98d 	bl	80079da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ce:	609a      	str	r2, [r3, #8]
      break;
 80076d0:	e03c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076de:	461a      	mov	r2, r3
 80076e0:	f000 f904 	bl	80078ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2150      	movs	r1, #80	; 0x50
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f95b 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 80076f0:	e02c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076fe:	461a      	mov	r2, r3
 8007700:	f000 f922 	bl	8007948 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2160      	movs	r1, #96	; 0x60
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f94b 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 8007710:	e01c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800771e:	461a      	mov	r2, r3
 8007720:	f000 f8e4 	bl	80078ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2140      	movs	r1, #64	; 0x40
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f93b 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 8007730:	e00c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f000 f932 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 8007742:	e003      	b.n	800774c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e000      	b.n	800774c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800774a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr

0800778a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr

0800779c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr
	...

080077b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a3f      	ldr	r2, [pc, #252]	; (80078c0 <TIM_Base_SetConfig+0x110>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d013      	beq.n	80077f0 <TIM_Base_SetConfig+0x40>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ce:	d00f      	beq.n	80077f0 <TIM_Base_SetConfig+0x40>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a3c      	ldr	r2, [pc, #240]	; (80078c4 <TIM_Base_SetConfig+0x114>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00b      	beq.n	80077f0 <TIM_Base_SetConfig+0x40>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a3b      	ldr	r2, [pc, #236]	; (80078c8 <TIM_Base_SetConfig+0x118>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d007      	beq.n	80077f0 <TIM_Base_SetConfig+0x40>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a3a      	ldr	r2, [pc, #232]	; (80078cc <TIM_Base_SetConfig+0x11c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_Base_SetConfig+0x40>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a39      	ldr	r2, [pc, #228]	; (80078d0 <TIM_Base_SetConfig+0x120>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d108      	bne.n	8007802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a2e      	ldr	r2, [pc, #184]	; (80078c0 <TIM_Base_SetConfig+0x110>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d02b      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007810:	d027      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a2b      	ldr	r2, [pc, #172]	; (80078c4 <TIM_Base_SetConfig+0x114>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d023      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a2a      	ldr	r2, [pc, #168]	; (80078c8 <TIM_Base_SetConfig+0x118>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d01f      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a29      	ldr	r2, [pc, #164]	; (80078cc <TIM_Base_SetConfig+0x11c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d01b      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a28      	ldr	r2, [pc, #160]	; (80078d0 <TIM_Base_SetConfig+0x120>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d017      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a27      	ldr	r2, [pc, #156]	; (80078d4 <TIM_Base_SetConfig+0x124>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d013      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a26      	ldr	r2, [pc, #152]	; (80078d8 <TIM_Base_SetConfig+0x128>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00f      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a25      	ldr	r2, [pc, #148]	; (80078dc <TIM_Base_SetConfig+0x12c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00b      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a24      	ldr	r2, [pc, #144]	; (80078e0 <TIM_Base_SetConfig+0x130>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d007      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a23      	ldr	r2, [pc, #140]	; (80078e4 <TIM_Base_SetConfig+0x134>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d003      	beq.n	8007862 <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a22      	ldr	r2, [pc, #136]	; (80078e8 <TIM_Base_SetConfig+0x138>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d108      	bne.n	8007874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <TIM_Base_SetConfig+0x110>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d003      	beq.n	80078a8 <TIM_Base_SetConfig+0xf8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <TIM_Base_SetConfig+0x120>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d103      	bne.n	80078b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	615a      	str	r2, [r3, #20]
}
 80078b6:	bf00      	nop
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40000400 	.word	0x40000400
 80078c8:	40000800 	.word	0x40000800
 80078cc:	40000c00 	.word	0x40000c00
 80078d0:	40010400 	.word	0x40010400
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800
 80078e0:	40001800 	.word	0x40001800
 80078e4:	40001c00 	.word	0x40001c00
 80078e8:	40002000 	.word	0x40002000

080078ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f023 0201 	bic.w	r2, r3, #1
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f023 030a 	bic.w	r3, r3, #10
 8007928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4313      	orrs	r3, r2
 8007930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f023 0210 	bic.w	r2, r3, #16
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	031b      	lsls	r3, r3, #12
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007984:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	621a      	str	r2, [r3, #32]
}
 800799c:	bf00      	nop
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr

080079a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f043 0307 	orr.w	r3, r3, #7
 80079c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	609a      	str	r2, [r3, #8]
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bc80      	pop	{r7}
 80079d8:	4770      	bx	lr

080079da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079da:	b480      	push	{r7}
 80079dc:	b087      	sub	sp, #28
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
 80079e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	021a      	lsls	r2, r3, #8
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	609a      	str	r2, [r3, #8]
}
 8007a0e:	bf00      	nop
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e05a      	b.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a20      	ldr	r2, [pc, #128]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d022      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7c:	d01d      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1c      	ldr	r2, [pc, #112]	; (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d018      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1a      	ldr	r2, [pc, #104]	; (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d013      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a19      	ldr	r2, [pc, #100]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00e      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a17      	ldr	r2, [pc, #92]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d009      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a16      	ldr	r2, [pc, #88]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d004      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d10c      	bne.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr
 8007af0:	40010000 	.word	0x40010000
 8007af4:	40000400 	.word	0x40000400
 8007af8:	40000800 	.word	0x40000800
 8007afc:	40000c00 	.word	0x40000c00
 8007b00:	40010400 	.word	0x40010400
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40001800 	.word	0x40001800

08007b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr

08007b1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr

08007b30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b30:	b084      	sub	sp, #16
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	f107 001c 	add.w	r0, r7, #28
 8007b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d122      	bne.n	8007b8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d105      	bne.n	8007b82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fabc 	bl	8009100 <USB_CoreReset>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e010      	b.n	8007bb0 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fab0 	bl	8009100 <USB_CoreReset>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d10b      	bne.n	8007bce <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f043 0206 	orr.w	r2, r3, #6
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bda:	b004      	add	sp, #16
 8007bdc:	4770      	bx	lr
	...

08007be0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	4613      	mov	r3, r2
 8007bec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d165      	bne.n	8007cc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4a41      	ldr	r2, [pc, #260]	; (8007cfc <USB_SetTurnaroundTime+0x11c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d906      	bls.n	8007c0a <USB_SetTurnaroundTime+0x2a>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4a40      	ldr	r2, [pc, #256]	; (8007d00 <USB_SetTurnaroundTime+0x120>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d202      	bcs.n	8007c0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c04:	230f      	movs	r3, #15
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	e062      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	4a3c      	ldr	r2, [pc, #240]	; (8007d00 <USB_SetTurnaroundTime+0x120>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d306      	bcc.n	8007c20 <USB_SetTurnaroundTime+0x40>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	4a3b      	ldr	r2, [pc, #236]	; (8007d04 <USB_SetTurnaroundTime+0x124>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d202      	bcs.n	8007c20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c1a:	230e      	movs	r3, #14
 8007c1c:	617b      	str	r3, [r7, #20]
 8007c1e:	e057      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4a38      	ldr	r2, [pc, #224]	; (8007d04 <USB_SetTurnaroundTime+0x124>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d306      	bcc.n	8007c36 <USB_SetTurnaroundTime+0x56>
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	4a37      	ldr	r2, [pc, #220]	; (8007d08 <USB_SetTurnaroundTime+0x128>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d202      	bcs.n	8007c36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c30:	230d      	movs	r3, #13
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	e04c      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4a33      	ldr	r2, [pc, #204]	; (8007d08 <USB_SetTurnaroundTime+0x128>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d306      	bcc.n	8007c4c <USB_SetTurnaroundTime+0x6c>
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	4a32      	ldr	r2, [pc, #200]	; (8007d0c <USB_SetTurnaroundTime+0x12c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d802      	bhi.n	8007c4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c46:	230c      	movs	r3, #12
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	e041      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4a2f      	ldr	r2, [pc, #188]	; (8007d0c <USB_SetTurnaroundTime+0x12c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d906      	bls.n	8007c62 <USB_SetTurnaroundTime+0x82>
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4a2e      	ldr	r2, [pc, #184]	; (8007d10 <USB_SetTurnaroundTime+0x130>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d802      	bhi.n	8007c62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c5c:	230b      	movs	r3, #11
 8007c5e:	617b      	str	r3, [r7, #20]
 8007c60:	e036      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	4a2a      	ldr	r2, [pc, #168]	; (8007d10 <USB_SetTurnaroundTime+0x130>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d906      	bls.n	8007c78 <USB_SetTurnaroundTime+0x98>
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	4a29      	ldr	r2, [pc, #164]	; (8007d14 <USB_SetTurnaroundTime+0x134>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d802      	bhi.n	8007c78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c72:	230a      	movs	r3, #10
 8007c74:	617b      	str	r3, [r7, #20]
 8007c76:	e02b      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4a26      	ldr	r2, [pc, #152]	; (8007d14 <USB_SetTurnaroundTime+0x134>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d906      	bls.n	8007c8e <USB_SetTurnaroundTime+0xae>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4a25      	ldr	r2, [pc, #148]	; (8007d18 <USB_SetTurnaroundTime+0x138>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d202      	bcs.n	8007c8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c88:	2309      	movs	r3, #9
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	e020      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	4a21      	ldr	r2, [pc, #132]	; (8007d18 <USB_SetTurnaroundTime+0x138>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d306      	bcc.n	8007ca4 <USB_SetTurnaroundTime+0xc4>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <USB_SetTurnaroundTime+0x13c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d802      	bhi.n	8007ca4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c9e:	2308      	movs	r3, #8
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	e015      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <USB_SetTurnaroundTime+0x13c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d906      	bls.n	8007cba <USB_SetTurnaroundTime+0xda>
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4a1c      	ldr	r2, [pc, #112]	; (8007d20 <USB_SetTurnaroundTime+0x140>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d202      	bcs.n	8007cba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cb4:	2307      	movs	r3, #7
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	e00a      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cba:	2306      	movs	r3, #6
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	e007      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cc6:	2309      	movs	r3, #9
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e001      	b.n	8007cd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ccc:	2309      	movs	r3, #9
 8007cce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	029b      	lsls	r3, r3, #10
 8007ce4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	00d8acbf 	.word	0x00d8acbf
 8007d00:	00e4e1c0 	.word	0x00e4e1c0
 8007d04:	00f42400 	.word	0x00f42400
 8007d08:	01067380 	.word	0x01067380
 8007d0c:	011a499f 	.word	0x011a499f
 8007d10:	01312cff 	.word	0x01312cff
 8007d14:	014ca43f 	.word	0x014ca43f
 8007d18:	016e3600 	.word	0x016e3600
 8007d1c:	01a6ab1f 	.word	0x01a6ab1f
 8007d20:	01e84800 	.word	0x01e84800

08007d24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f043 0201 	orr.w	r2, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr

08007d44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f023 0201 	bic.w	r2, r3, #1
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d115      	bne.n	8007db2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d92:	2001      	movs	r0, #1
 8007d94:	f7fb f95e 	bl	8003054 <HAL_Delay>
      ms++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 f922 	bl	8008fe8 <USB_GetMode>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d01e      	beq.n	8007de8 <USB_SetCurrentMode+0x84>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b31      	cmp	r3, #49	; 0x31
 8007dae:	d9f0      	bls.n	8007d92 <USB_SetCurrentMode+0x2e>
 8007db0:	e01a      	b.n	8007de8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d115      	bne.n	8007de4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	f7fb f945 	bl	8003054 <HAL_Delay>
      ms++;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 f909 	bl	8008fe8 <USB_GetMode>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <USB_SetCurrentMode+0x84>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b31      	cmp	r3, #49	; 0x31
 8007de0:	d9f0      	bls.n	8007dc4 <USB_SetCurrentMode+0x60>
 8007de2:	e001      	b.n	8007de8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e005      	b.n	8007df4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b32      	cmp	r3, #50	; 0x32
 8007dec:	d101      	bne.n	8007df2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b086      	sub	sp, #24
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e16:	2300      	movs	r3, #0
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	e009      	b.n	8007e30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	3340      	adds	r3, #64	; 0x40
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	613b      	str	r3, [r7, #16]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b0e      	cmp	r3, #14
 8007e34:	d9f2      	bls.n	8007e1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d11c      	bne.n	8007e76 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e4a:	f043 0302 	orr.w	r3, r3, #2
 8007e4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38
 8007e74:	e00b      	b.n	8007e8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e94:	461a      	mov	r2, r3
 8007e96:	2300      	movs	r3, #0
 8007e98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10c      	bne.n	8007eba <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f965 	bl	8008178 <USB_SetDevSpeed>
 8007eae:	e008      	b.n	8007ec2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f960 	bl	8008178 <USB_SetDevSpeed>
 8007eb8:	e003      	b.n	8007ec2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007eba:	2103      	movs	r1, #3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f95b 	bl	8008178 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ec2:	2110      	movs	r1, #16
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f8f3 	bl	80080b0 <USB_FlushTxFifo>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f91f 	bl	8008118 <USB_FlushRxFifo>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	461a      	mov	r2, r3
 8007eec:	2300      	movs	r3, #0
 8007eee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	2300      	movs	r3, #0
 8007efa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f02:	461a      	mov	r2, r3
 8007f04:	2300      	movs	r3, #0
 8007f06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	e043      	b.n	8007f96 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f24:	d118      	bne.n	8007f58 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	e013      	b.n	8007f6a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e008      	b.n	8007f6a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f64:	461a      	mov	r2, r3
 8007f66:	2300      	movs	r3, #0
 8007f68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	461a      	mov	r2, r3
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3301      	adds	r3, #1
 8007f94:	613b      	str	r3, [r7, #16]
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d3b7      	bcc.n	8007f0e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	e043      	b.n	800802c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fba:	d118      	bne.n	8007fee <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	e013      	b.n	8008000 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	e008      	b.n	8008000 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	461a      	mov	r2, r3
 800800e:	2300      	movs	r3, #0
 8008010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	461a      	mov	r2, r3
 8008020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3301      	adds	r3, #1
 800802a:	613b      	str	r3, [r7, #16]
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	d3b7      	bcc.n	8007fa4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008046:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008054:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d105      	bne.n	8008068 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f043 0210 	orr.w	r2, r3, #16
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699a      	ldr	r2, [r3, #24]
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <USB_DevInit+0x2b0>)
 800806e:	4313      	orrs	r3, r2
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f043 0208 	orr.w	r2, r3, #8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008088:	2b01      	cmp	r3, #1
 800808a:	d107      	bne.n	800809c <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008094:	f043 0304 	orr.w	r3, r3, #4
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080a8:	b004      	add	sp, #16
 80080aa:	4770      	bx	lr
 80080ac:	803c3800 	.word	0x803c3800

080080b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a13      	ldr	r2, [pc, #76]	; (8008114 <USB_FlushTxFifo+0x64>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d901      	bls.n	80080d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e01b      	b.n	8008108 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	daf2      	bge.n	80080be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	019b      	lsls	r3, r3, #6
 80080e0:	f043 0220 	orr.w	r2, r3, #32
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4a08      	ldr	r2, [pc, #32]	; (8008114 <USB_FlushTxFifo+0x64>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d901      	bls.n	80080fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e006      	b.n	8008108 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b20      	cmp	r3, #32
 8008104:	d0f0      	beq.n	80080e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	00030d40 	.word	0x00030d40

08008118 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4a11      	ldr	r2, [pc, #68]	; (8008174 <USB_FlushRxFifo+0x5c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e018      	b.n	8008168 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	daf2      	bge.n	8008124 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2210      	movs	r2, #16
 8008146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4a08      	ldr	r2, [pc, #32]	; (8008174 <USB_FlushRxFifo+0x5c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d901      	bls.n	800815a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e006      	b.n	8008168 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0310 	and.w	r3, r3, #16
 8008162:	2b10      	cmp	r3, #16
 8008164:	d0f0      	beq.n	8008148 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	bc80      	pop	{r7}
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	00030d40 	.word	0x00030d40

08008178 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	68f9      	ldr	r1, [r7, #12]
 8008194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008198:	4313      	orrs	r3, r2
 800819a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr

080081a8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 0306 	and.w	r3, r3, #6
 80081c0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081c8:	2300      	movs	r3, #0
 80081ca:	75fb      	strb	r3, [r7, #23]
 80081cc:	e00a      	b.n	80081e4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d002      	beq.n	80081da <USB_GetDevSpeed+0x32>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b06      	cmp	r3, #6
 80081d8:	d102      	bne.n	80081e0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081da:	2302      	movs	r3, #2
 80081dc:	75fb      	strb	r3, [r7, #23]
 80081de:	e001      	b.n	80081e4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081e0:	230f      	movs	r3, #15
 80081e2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d13a      	bne.n	8008282 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	2101      	movs	r1, #1
 800821e:	fa01 f303 	lsl.w	r3, r1, r3
 8008222:	b29b      	uxth	r3, r3
 8008224:	68f9      	ldr	r1, [r7, #12]
 8008226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800822a:	4313      	orrs	r3, r2
 800822c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d155      	bne.n	80082f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	791b      	ldrb	r3, [r3, #4]
 800825e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008260:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	059b      	lsls	r3, r3, #22
 8008266:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008268:	4313      	orrs	r3, r2
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	0151      	lsls	r1, r2, #5
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	440a      	add	r2, r1
 8008272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800827a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	e036      	b.n	80082f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008288:	69da      	ldr	r2, [r3, #28]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	f003 030f 	and.w	r3, r3, #15
 8008292:	2101      	movs	r1, #1
 8008294:	fa01 f303 	lsl.w	r3, r1, r3
 8008298:	041b      	lsls	r3, r3, #16
 800829a:	68f9      	ldr	r1, [r7, #12]
 800829c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082a0:	4313      	orrs	r3, r2
 80082a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d11a      	bne.n	80082f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	791b      	ldrb	r3, [r3, #4]
 80082d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082d6:	430b      	orrs	r3, r1
 80082d8:	4313      	orrs	r3, r2
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	0151      	lsls	r1, r2, #5
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	440a      	add	r2, r1
 80082e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr

080082fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d161      	bne.n	80083dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800832a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800832e:	d11f      	bne.n	8008370 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	0151      	lsls	r1, r2, #5
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	440a      	add	r2, r1
 8008346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800834e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	440a      	add	r2, r1
 8008366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800836e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	f003 030f 	and.w	r3, r3, #15
 8008380:	2101      	movs	r1, #1
 8008382:	fa01 f303 	lsl.w	r3, r1, r3
 8008386:	b29b      	uxth	r3, r3
 8008388:	43db      	mvns	r3, r3
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008390:	4013      	ands	r3, r2
 8008392:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	2101      	movs	r1, #1
 80083a6:	fa01 f303 	lsl.w	r3, r1, r3
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	43db      	mvns	r3, r3
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b4:	4013      	ands	r3, r2
 80083b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	0159      	lsls	r1, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	440b      	add	r3, r1
 80083ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d2:	4619      	mov	r1, r3
 80083d4:	4b35      	ldr	r3, [pc, #212]	; (80084ac <USB_DeactivateEndpoint+0x1b0>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	600b      	str	r3, [r1, #0]
 80083da:	e060      	b.n	800849e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f2:	d11f      	bne.n	8008434 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	0151      	lsls	r1, r2, #5
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	440a      	add	r2, r1
 800840a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008412:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800842e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008432:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	2101      	movs	r1, #1
 8008446:	fa01 f303 	lsl.w	r3, r1, r3
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	43db      	mvns	r3, r3
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008454:	4013      	ands	r3, r2
 8008456:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	69da      	ldr	r2, [r3, #28]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	2101      	movs	r1, #1
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	43db      	mvns	r3, r3
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008478:	4013      	ands	r3, r2
 800847a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	0159      	lsls	r1, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	440b      	add	r3, r1
 8008492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008496:	4619      	mov	r1, r3
 8008498:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <USB_DeactivateEndpoint+0x1b4>)
 800849a:	4013      	ands	r3, r2
 800849c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	ec337800 	.word	0xec337800
 80084b0:	eff37800 	.word	0xeff37800

080084b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	; 0x28
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	785b      	ldrb	r3, [r3, #1]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f040 817a 	bne.w	80087ca <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d132      	bne.n	8008544 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	69fa      	ldr	r2, [r7, #28]
 8008536:	440a      	add	r2, r1
 8008538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853c:	0cdb      	lsrs	r3, r3, #19
 800853e:	04db      	lsls	r3, r3, #19
 8008540:	6113      	str	r3, [r2, #16]
 8008542:	e092      	b.n	800866a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800855e:	0cdb      	lsrs	r3, r3, #19
 8008560:	04db      	lsls	r3, r3, #19
 8008562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	440a      	add	r2, r1
 800857a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008582:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008586:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d11a      	bne.n	80085c4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	429a      	cmp	r2, r3
 8008598:	d903      	bls.n	80085a2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	0151      	lsls	r1, r2, #5
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	440a      	add	r2, r1
 80085b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085c0:	6113      	str	r3, [r2, #16]
 80085c2:	e01b      	b.n	80085fc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6919      	ldr	r1, [r3, #16]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	440b      	add	r3, r1
 80085dc:	1e59      	subs	r1, r3, #1
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80085e6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085e8:	4ba2      	ldr	r3, [pc, #648]	; (8008874 <USB_EPStartXfer+0x3c0>)
 80085ea:	400b      	ands	r3, r1
 80085ec:	69b9      	ldr	r1, [r7, #24]
 80085ee:	0148      	lsls	r0, r1, #5
 80085f0:	69f9      	ldr	r1, [r7, #28]
 80085f2:	4401      	add	r1, r0
 80085f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085f8:	4313      	orrs	r3, r2
 80085fa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008608:	691a      	ldr	r2, [r3, #16]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008612:	69b9      	ldr	r1, [r7, #24]
 8008614:	0148      	lsls	r0, r1, #5
 8008616:	69f9      	ldr	r1, [r7, #28]
 8008618:	4401      	add	r1, r0
 800861a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800861e:	4313      	orrs	r3, r2
 8008620:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	791b      	ldrb	r3, [r3, #4]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d11f      	bne.n	800866a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	0151      	lsls	r1, r2, #5
 800863c:	69fa      	ldr	r2, [r7, #28]
 800863e:	440a      	add	r2, r1
 8008640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008644:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008648:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	69fa      	ldr	r2, [r7, #28]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008668:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d14b      	bne.n	8008708 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008684:	461a      	mov	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d128      	bne.n	80086e6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d110      	bne.n	80086c6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	0151      	lsls	r1, r2, #5
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	440a      	add	r2, r1
 80086ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	e00f      	b.n	80086e6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	0151      	lsls	r1, r2, #5
 80086d8:	69fa      	ldr	r2, [r7, #28]
 80086da:	440a      	add	r2, r1
 80086dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	0151      	lsls	r1, r2, #5
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	440a      	add	r2, r1
 80086fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008700:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	e165      	b.n	80089d4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	0151      	lsls	r1, r2, #5
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	440a      	add	r2, r1
 800871e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008726:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	791b      	ldrb	r3, [r3, #4]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d015      	beq.n	800875c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 814d 	beq.w	80089d4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f003 030f 	and.w	r3, r3, #15
 800874a:	2101      	movs	r1, #1
 800874c:	fa01 f303 	lsl.w	r3, r1, r3
 8008750:	69f9      	ldr	r1, [r7, #28]
 8008752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008756:	4313      	orrs	r3, r2
 8008758:	634b      	str	r3, [r1, #52]	; 0x34
 800875a:	e13b      	b.n	80089d4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d110      	bne.n	800878e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	0151      	lsls	r1, r2, #5
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	440a      	add	r2, r1
 8008782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	e00f      	b.n	80087ae <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	68d9      	ldr	r1, [r3, #12]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	781a      	ldrb	r2, [r3, #0]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	b298      	uxth	r0, r3
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	4603      	mov	r3, r0
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f9b7 	bl	8008b36 <USB_WritePacket>
 80087c8:	e104      	b.n	80089d4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	69fa      	ldr	r2, [r7, #28]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e4:	0cdb      	lsrs	r3, r3, #19
 80087e6:	04db      	lsls	r3, r3, #19
 80087e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	0151      	lsls	r1, r2, #5
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	440a      	add	r2, r1
 8008800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800880c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d131      	bne.n	8008878 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008838:	691a      	ldr	r2, [r3, #16]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008842:	69b9      	ldr	r1, [r7, #24]
 8008844:	0148      	lsls	r0, r1, #5
 8008846:	69f9      	ldr	r1, [r7, #28]
 8008848:	4401      	add	r1, r0
 800884a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800884e:	4313      	orrs	r3, r2
 8008850:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	0151      	lsls	r1, r2, #5
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	440a      	add	r2, r1
 8008868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800886c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008870:	6113      	str	r3, [r2, #16]
 8008872:	e061      	b.n	8008938 <USB_EPStartXfer+0x484>
 8008874:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d123      	bne.n	80088c8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008896:	69b9      	ldr	r1, [r7, #24]
 8008898:	0148      	lsls	r0, r1, #5
 800889a:	69f9      	ldr	r1, [r7, #28]
 800889c:	4401      	add	r1, r0
 800889e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088a2:	4313      	orrs	r3, r2
 80088a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088c4:	6113      	str	r3, [r2, #16]
 80088c6:	e037      	b.n	8008938 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	691a      	ldr	r2, [r3, #16]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	1e5a      	subs	r2, r3, #1
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	8afa      	ldrh	r2, [r7, #22]
 80088e4:	fb03 f202 	mul.w	r2, r3, r2
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f8:	691a      	ldr	r2, [r3, #16]
 80088fa:	8afb      	ldrh	r3, [r7, #22]
 80088fc:	04d9      	lsls	r1, r3, #19
 80088fe:	4b38      	ldr	r3, [pc, #224]	; (80089e0 <USB_EPStartXfer+0x52c>)
 8008900:	400b      	ands	r3, r1
 8008902:	69b9      	ldr	r1, [r7, #24]
 8008904:	0148      	lsls	r0, r1, #5
 8008906:	69f9      	ldr	r1, [r7, #28]
 8008908:	4401      	add	r1, r0
 800890a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800890e:	4313      	orrs	r3, r2
 8008910:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008928:	69b9      	ldr	r1, [r7, #24]
 800892a:	0148      	lsls	r0, r1, #5
 800892c:	69f9      	ldr	r1, [r7, #28]
 800892e:	4401      	add	r1, r0
 8008930:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008934:	4313      	orrs	r3, r2
 8008936:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d10d      	bne.n	800895a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d009      	beq.n	800895a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	68d9      	ldr	r1, [r3, #12]
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008956:	460a      	mov	r2, r1
 8008958:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	791b      	ldrb	r3, [r3, #4]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d128      	bne.n	80089b4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896e:	2b00      	cmp	r3, #0
 8008970:	d110      	bne.n	8008994 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	e00f      	b.n	80089b4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3720      	adds	r7, #32
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	1ff80000 	.word	0x1ff80000

080089e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d14a      	bne.n	8008a98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a1a:	f040 8086 	bne.w	8008b2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	7812      	ldrb	r2, [r2, #0]
 8008a32:	0151      	lsls	r1, r2, #5
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	440a      	add	r2, r1
 8008a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	7812      	ldrb	r2, [r2, #0]
 8008a56:	0151      	lsls	r1, r2, #5
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	440a      	add	r2, r1
 8008a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d902      	bls.n	8008a7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	75fb      	strb	r3, [r7, #23]
          break;
 8008a7a:	e056      	b.n	8008b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a94:	d0e7      	beq.n	8008a66 <USB_EPStopXfer+0x82>
 8008a96:	e048      	b.n	8008b2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ab0:	d13b      	bne.n	8008b2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	7812      	ldrb	r2, [r2, #0]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ad0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ad4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	7812      	ldrb	r2, [r2, #0]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008af8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d902      	bls.n	8008b10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b0e:	e00c      	b.n	8008b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b28:	d0e7      	beq.n	8008afa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr

08008b36 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b089      	sub	sp, #36	; 0x24
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	4611      	mov	r1, r2
 8008b42:	461a      	mov	r2, r3
 8008b44:	460b      	mov	r3, r1
 8008b46:	71fb      	strb	r3, [r7, #7]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d123      	bne.n	8008ba4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b5c:	88bb      	ldrh	r3, [r7, #4]
 8008b5e:	3303      	adds	r3, #3
 8008b60:	089b      	lsrs	r3, r3, #2
 8008b62:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b64:	2300      	movs	r3, #0
 8008b66:	61bb      	str	r3, [r7, #24]
 8008b68:	e018      	b.n	8008b9c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	031a      	lsls	r2, r3, #12
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b76:	461a      	mov	r2, r3
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	3301      	adds	r3, #1
 8008b82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	3301      	adds	r3, #1
 8008b88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	3301      	adds	r3, #1
 8008b94:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	61bb      	str	r3, [r7, #24]
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d3e2      	bcc.n	8008b6a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3724      	adds	r7, #36	; 0x24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr

08008bb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b08b      	sub	sp, #44	; 0x2c
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	089b      	lsrs	r3, r3, #2
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008bce:	88fb      	ldrh	r3, [r7, #6]
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	623b      	str	r3, [r7, #32]
 8008bda:	e014      	b.n	8008c06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	601a      	str	r2, [r3, #0]
    pDest++;
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	3301      	adds	r3, #1
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	3301      	adds	r3, #1
 8008c04:	623b      	str	r3, [r7, #32]
 8008c06:	6a3a      	ldr	r2, [r7, #32]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d3e6      	bcc.n	8008bdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c0e:	8bfb      	ldrh	r3, [r7, #30]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01e      	beq.n	8008c52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f107 0310 	add.w	r3, r7, #16
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	fa22 f303 	lsr.w	r3, r2, r3
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	701a      	strb	r2, [r3, #0]
      i++;
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	3301      	adds	r3, #1
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c46:	8bfb      	ldrh	r3, [r7, #30]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c4c:	8bfb      	ldrh	r3, [r7, #30]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1ea      	bne.n	8008c28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	372c      	adds	r7, #44	; 0x2c
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr

08008c5e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d12c      	bne.n	8008cd4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	db12      	blt.n	8008cb2 <USB_EPSetStall+0x54>
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00f      	beq.n	8008cb2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	015a      	lsls	r2, r3, #5
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	0151      	lsls	r1, r2, #5
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	440a      	add	r2, r1
 8008ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cb0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	e02b      	b.n	8008d2c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	db12      	blt.n	8008d0c <USB_EPSetStall+0xae>
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00f      	beq.n	8008d0c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d0a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	0151      	lsls	r1, r2, #5
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	440a      	add	r2, r1
 8008d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bc80      	pop	{r7}
 8008d36:	4770      	bx	lr

08008d38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d128      	bne.n	8008da6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	0151      	lsls	r1, r2, #5
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	440a      	add	r2, r1
 8008d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	791b      	ldrb	r3, [r3, #4]
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d003      	beq.n	8008d84 <USB_EPClearStall+0x4c>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	791b      	ldrb	r3, [r3, #4]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d138      	bne.n	8008df6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	0151      	lsls	r1, r2, #5
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	440a      	add	r2, r1
 8008d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	e027      	b.n	8008df6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	0151      	lsls	r1, r2, #5
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	440a      	add	r2, r1
 8008dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	791b      	ldrb	r3, [r3, #4]
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d003      	beq.n	8008dd6 <USB_EPClearStall+0x9e>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	791b      	ldrb	r3, [r3, #4]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d10f      	bne.n	8008df6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008df4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr

08008e02 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e24:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008e36:	68f9      	ldr	r1, [r7, #12]
 8008e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e66:	f023 0303 	bic.w	r3, r3, #3
 8008e6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e7a:	f023 0302 	bic.w	r3, r3, #2
 8008e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bc80      	pop	{r7}
 8008e8a:	4770      	bx	lr

08008e8c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ea6:	f023 0303 	bic.w	r3, r3, #3
 8008eaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eba:	f043 0302 	orr.w	r3, r3, #2
 8008ebe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr

08008ecc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr

08008ef0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	4013      	ands	r3, r2
 8008f12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	0c1b      	lsrs	r3, r3, #16
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr

08008f22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	4013      	ands	r3, r2
 8008f44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	b29b      	uxth	r3, r3
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f82:	68bb      	ldr	r3, [r7, #8]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bc80      	pop	{r7}
 8008f8c:	4770      	bx	lr

08008f8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b087      	sub	sp, #28
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	460b      	mov	r3, r1
 8008f98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbe:	01db      	lsls	r3, r3, #7
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009002:	b480      	push	{r7}
 8009004:	b085      	sub	sp, #20
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009020:	f023 0307 	bic.w	r3, r3, #7
 8009024:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009038:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	bc80      	pop	{r7}
 8009044:	4770      	bx	lr
	...

08009048 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	460b      	mov	r3, r1
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	333c      	adds	r3, #60	; 0x3c
 800905e:	3304      	adds	r3, #4
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	4a25      	ldr	r2, [pc, #148]	; (80090fc <USB_EP0_OutStart+0xb4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d90a      	bls.n	8009082 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800907c:	d101      	bne.n	8009082 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	e037      	b.n	80090f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009088:	461a      	mov	r2, r3
 800908a:	2300      	movs	r3, #0
 800908c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800909c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b0:	f043 0318 	orr.w	r3, r3, #24
 80090b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80090c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d10f      	bne.n	80090f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d6:	461a      	mov	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80090ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	371c      	adds	r7, #28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bc80      	pop	{r7}
 80090fa:	4770      	bx	lr
 80090fc:	4f54300a 	.word	0x4f54300a

08009100 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4a12      	ldr	r2, [pc, #72]	; (8009160 <USB_CoreReset+0x60>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d901      	bls.n	800911e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e01b      	b.n	8009156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	daf2      	bge.n	800910c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f043 0201 	orr.w	r2, r3, #1
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3301      	adds	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4a08      	ldr	r2, [pc, #32]	; (8009160 <USB_CoreReset+0x60>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d901      	bls.n	8009148 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e006      	b.n	8009156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b01      	cmp	r3, #1
 8009152:	d0f0      	beq.n	8009136 <USB_CoreReset+0x36>

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	bc80      	pop	{r7}
 800915e:	4770      	bx	lr
 8009160:	00030d40 	.word	0x00030d40

08009164 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	7c1b      	ldrb	r3, [r3, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d115      	bne.n	80091a8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800917c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009180:	2202      	movs	r2, #2
 8009182:	2181      	movs	r1, #129	; 0x81
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 ff42 	bl	800b00e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009194:	2202      	movs	r2, #2
 8009196:	2101      	movs	r1, #1
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 ff38 	bl	800b00e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80091a6:	e012      	b.n	80091ce <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80091a8:	2340      	movs	r3, #64	; 0x40
 80091aa:	2202      	movs	r2, #2
 80091ac:	2181      	movs	r1, #129	; 0x81
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 ff2d 	bl	800b00e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80091ba:	2340      	movs	r3, #64	; 0x40
 80091bc:	2202      	movs	r2, #2
 80091be:	2101      	movs	r1, #1
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 ff24 	bl	800b00e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091ce:	2308      	movs	r3, #8
 80091d0:	2203      	movs	r2, #3
 80091d2:	2182      	movs	r1, #130	; 0x82
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 ff1a 	bl	800b00e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80091e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80091e4:	f002 f866 	bl	800b2b4 <malloc>
 80091e8:	4603      	mov	r3, r0
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
 8009200:	e026      	b.n	8009250 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009208:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2200      	movs	r2, #0
 8009220:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	7c1b      	ldrb	r3, [r3, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d109      	bne.n	8009240 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009236:	2101      	movs	r1, #1
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 ffd8 	bl	800b1ee <USBD_LL_PrepareReceive>
 800923e:	e007      	b.n	8009250 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009246:	2340      	movs	r3, #64	; 0x40
 8009248:	2101      	movs	r1, #1
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 ffcf 	bl	800b1ee <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009250:	7bfb      	ldrb	r3, [r7, #15]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800926a:	2181      	movs	r1, #129	; 0x81
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 fef4 	bl	800b05a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009278:	2101      	movs	r1, #1
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 feed 	bl	800b05a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009288:	2182      	movs	r1, #130	; 0x82
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 fee5 	bl	800b05a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00e      	beq.n	80092be <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	4618      	mov	r0, r3
 80092b2:	f002 f807 	bl	800b2c4 <free>
    pdev->pClassData = NULL;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d039      	beq.n	8009366 <USBD_CDC_Setup+0x9e>
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	d17f      	bne.n	80093f6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	88db      	ldrh	r3, [r3, #6]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d029      	beq.n	8009352 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	b25b      	sxtb	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	da11      	bge.n	800932c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009314:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	88d2      	ldrh	r2, [r2, #6]
 800931a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800931c:	6939      	ldr	r1, [r7, #16]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	88db      	ldrh	r3, [r3, #6]
 8009322:	461a      	mov	r2, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fa42 	bl	800a7ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800932a:	e06b      	b.n	8009404 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	785a      	ldrb	r2, [r3, #1]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	88db      	ldrh	r3, [r3, #6]
 800933a:	b2da      	uxtb	r2, r3
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009342:	6939      	ldr	r1, [r7, #16]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	88db      	ldrh	r3, [r3, #6]
 8009348:	461a      	mov	r2, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 fa5d 	bl	800a80a <USBD_CtlPrepareRx>
      break;
 8009350:	e058      	b.n	8009404 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	7850      	ldrb	r0, [r2, #1]
 800935e:	2200      	movs	r2, #0
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	4798      	blx	r3
      break;
 8009364:	e04e      	b.n	8009404 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	2b0b      	cmp	r3, #11
 800936c:	d02e      	beq.n	80093cc <USBD_CDC_Setup+0x104>
 800936e:	2b0b      	cmp	r3, #11
 8009370:	dc38      	bgt.n	80093e4 <USBD_CDC_Setup+0x11c>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <USBD_CDC_Setup+0xb4>
 8009376:	2b0a      	cmp	r3, #10
 8009378:	d014      	beq.n	80093a4 <USBD_CDC_Setup+0xdc>
 800937a:	e033      	b.n	80093e4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009382:	2b03      	cmp	r3, #3
 8009384:	d107      	bne.n	8009396 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009386:	f107 030c 	add.w	r3, r7, #12
 800938a:	2202      	movs	r2, #2
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 fa0d 	bl	800a7ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009394:	e02e      	b.n	80093f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 f99e 	bl	800a6da <USBD_CtlError>
            ret = USBD_FAIL;
 800939e:	2302      	movs	r3, #2
 80093a0:	75fb      	strb	r3, [r7, #23]
          break;
 80093a2:	e027      	b.n	80093f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d107      	bne.n	80093be <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80093ae:	f107 030f 	add.w	r3, r7, #15
 80093b2:	2201      	movs	r2, #1
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 f9f9 	bl	800a7ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093bc:	e01a      	b.n	80093f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f98a 	bl	800a6da <USBD_CtlError>
            ret = USBD_FAIL;
 80093c6:	2302      	movs	r3, #2
 80093c8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ca:	e013      	b.n	80093f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d00d      	beq.n	80093f2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f97e 	bl	800a6da <USBD_CtlError>
            ret = USBD_FAIL;
 80093de:	2302      	movs	r3, #2
 80093e0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093e2:	e006      	b.n	80093f2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 f977 	bl	800a6da <USBD_CtlError>
          ret = USBD_FAIL;
 80093ec:	2302      	movs	r3, #2
 80093ee:	75fb      	strb	r3, [r7, #23]
          break;
 80093f0:	e000      	b.n	80093f4 <USBD_CDC_Setup+0x12c>
          break;
 80093f2:	bf00      	nop
      }
      break;
 80093f4:	e006      	b.n	8009404 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 f96e 	bl	800a6da <USBD_CtlError>
      ret = USBD_FAIL;
 80093fe:	2302      	movs	r3, #2
 8009400:	75fb      	strb	r3, [r7, #23]
      break;
 8009402:	bf00      	nop
  }

  return ret;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009420:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009428:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009430:	2b00      	cmp	r3, #0
 8009432:	d03a      	beq.n	80094aa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	331c      	adds	r3, #28
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d029      	beq.n	800949e <USBD_CDC_DataIn+0x90>
 800944a:	78fa      	ldrb	r2, [r7, #3]
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	440b      	add	r3, r1
 8009458:	331c      	adds	r3, #28
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	78f9      	ldrb	r1, [r7, #3]
 800945e:	68b8      	ldr	r0, [r7, #8]
 8009460:	460b      	mov	r3, r1
 8009462:	00db      	lsls	r3, r3, #3
 8009464:	440b      	add	r3, r1
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4403      	add	r3, r0
 800946a:	3344      	adds	r3, #68	; 0x44
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009472:	fb01 f303 	mul.w	r3, r1, r3
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d110      	bne.n	800949e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800947c:	78fa      	ldrb	r2, [r7, #3]
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	331c      	adds	r3, #28
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009490:	78f9      	ldrb	r1, [r7, #3]
 8009492:	2300      	movs	r3, #0
 8009494:	2200      	movs	r2, #0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fe86 	bl	800b1a8 <USBD_LL_Transmit>
 800949c:	e003      	b.n	80094a6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	e000      	b.n	80094ac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80094aa:	2302      	movs	r3, #2
  }
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 feb1 	bl	800b234 <USBD_LL_GetRxDataSize>
 80094d2:	4602      	mov	r2, r0
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00d      	beq.n	8009500 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094f8:	4611      	mov	r1, r2
 80094fa:	4798      	blx	r3

    return USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	e000      	b.n	8009502 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009500:	2302      	movs	r3, #2
  }
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009518:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009520:	2b00      	cmp	r3, #0
 8009522:	d015      	beq.n	8009550 <USBD_CDC_EP0_RxReady+0x46>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800952a:	2bff      	cmp	r3, #255	; 0xff
 800952c:	d010      	beq.n	8009550 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800953c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009544:	b292      	uxth	r2, r2
 8009546:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	22ff      	movs	r2, #255	; 0xff
 800954c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2243      	movs	r2, #67	; 0x43
 8009568:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800956a:	4b03      	ldr	r3, [pc, #12]	; (8009578 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800956c:	4618      	mov	r0, r3
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	bc80      	pop	{r7}
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	200000e0 	.word	0x200000e0

0800957c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2243      	movs	r2, #67	; 0x43
 8009588:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800958a:	4b03      	ldr	r3, [pc, #12]	; (8009598 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	2000009c 	.word	0x2000009c

0800959c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2243      	movs	r2, #67	; 0x43
 80095a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80095aa:	4b03      	ldr	r3, [pc, #12]	; (80095b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20000124 	.word	0x20000124

080095bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	220a      	movs	r2, #10
 80095c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80095ca:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bc80      	pop	{r7}
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	20000058 	.word	0x20000058

080095dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80095e6:	2302      	movs	r3, #2
 80095e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009626:	88fa      	ldrh	r2, [r7, #6]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr

0800963a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	bc80      	pop	{r7}
 800965e:	4770      	bx	lr

08009660 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01c      	beq.n	80096b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009680:	2b00      	cmp	r3, #0
 8009682:	d115      	bne.n	80096b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2201      	movs	r2, #1
 8009688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	2181      	movs	r1, #129	; 0x81
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f001 fd7e 	bl	800b1a8 <USBD_LL_Transmit>

      return USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	e002      	b.n	80096b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e000      	b.n	80096b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80096b4:	2302      	movs	r3, #2
  }
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d017      	beq.n	8009708 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	7c1b      	ldrb	r3, [r3, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d109      	bne.n	80096f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ea:	2101      	movs	r1, #1
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 fd7e 	bl	800b1ee <USBD_LL_PrepareReceive>
 80096f2:	e007      	b.n	8009704 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096fa:	2340      	movs	r3, #64	; 0x40
 80096fc:	2101      	movs	r1, #1
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 fd75 	bl	800b1ee <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	e000      	b.n	800970a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009708:	2302      	movs	r3, #2
  }
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	4613      	mov	r3, r2
 800971e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009726:	2302      	movs	r3, #2
 8009728:	e01a      	b.n	8009760 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	79fa      	ldrb	r2, [r7, #7]
 8009756:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f001 fbf3 	bl	800af44 <USBD_LL_Init>

  return USBD_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
 8009788:	e001      	b.n	800978e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800978e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr

0800979a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f001 fc18 	bl	800afd8 <USBD_LL_Start>

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr

080097c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80097d2:	2302      	movs	r3, #2
 80097d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00c      	beq.n	80097fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	78fa      	ldrb	r2, [r7, #3]
 80097ea:	4611      	mov	r1, r2
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	4798      	blx	r3
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	78fa      	ldrb	r2, [r7, #3]
 800981a:	4611      	mov	r1, r2
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3

  return USBD_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 ff10 	bl	800a662 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009850:	461a      	mov	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800985e:	f003 031f 	and.w	r3, r3, #31
 8009862:	2b02      	cmp	r3, #2
 8009864:	d016      	beq.n	8009894 <USBD_LL_SetupStage+0x6a>
 8009866:	2b02      	cmp	r3, #2
 8009868:	d81c      	bhi.n	80098a4 <USBD_LL_SetupStage+0x7a>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <USBD_LL_SetupStage+0x4a>
 800986e:	2b01      	cmp	r3, #1
 8009870:	d008      	beq.n	8009884 <USBD_LL_SetupStage+0x5a>
 8009872:	e017      	b.n	80098a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fa03 	bl	8009c88 <USBD_StdDevReq>
      break;
 8009882:	e01a      	b.n	80098ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fa65 	bl	8009d5c <USBD_StdItfReq>
      break;
 8009892:	e012      	b.n	80098ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 faa5 	bl	8009dec <USBD_StdEPReq>
      break;
 80098a2:	e00a      	b.n	80098ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80098aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f001 fbf0 	bl	800b098 <USBD_LL_StallEP>
      break;
 80098b8:	bf00      	nop
  }

  return USBD_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	460b      	mov	r3, r1
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098d2:	7afb      	ldrb	r3, [r7, #11]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d14b      	bne.n	8009970 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80098de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	d134      	bne.n	8009954 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	68da      	ldr	r2, [r3, #12]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d919      	bls.n	800992a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	68da      	ldr	r2, [r3, #12]
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	1ad2      	subs	r2, r2, r3
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800990c:	429a      	cmp	r2, r3
 800990e:	d203      	bcs.n	8009918 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009914:	b29b      	uxth	r3, r3
 8009916:	e002      	b.n	800991e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800991c:	b29b      	uxth	r3, r3
 800991e:	461a      	mov	r2, r3
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 ff8f 	bl	800a846 <USBD_CtlContinueRx>
 8009928:	e038      	b.n	800999c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00a      	beq.n	800994c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800993c:	2b03      	cmp	r3, #3
 800993e:	d105      	bne.n	800994c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 ff8c 	bl	800a86a <USBD_CtlSendStatus>
 8009952:	e023      	b.n	800999c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800995a:	2b05      	cmp	r3, #5
 800995c:	d11e      	bne.n	800999c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009966:	2100      	movs	r1, #0
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f001 fb95 	bl	800b098 <USBD_LL_StallEP>
 800996e:	e015      	b.n	800999c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00d      	beq.n	8009998 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009982:	2b03      	cmp	r3, #3
 8009984:	d108      	bne.n	8009998 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	7afa      	ldrb	r2, [r7, #11]
 8009990:	4611      	mov	r1, r2
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	4798      	blx	r3
 8009996:	e001      	b.n	800999c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009998:	2302      	movs	r3, #2
 800999a:	e000      	b.n	800999e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b086      	sub	sp, #24
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	460b      	mov	r3, r1
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d17f      	bne.n	8009aba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3314      	adds	r3, #20
 80099be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d15c      	bne.n	8009a84 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d915      	bls.n	8009a02 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	461a      	mov	r2, r3
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 fef9 	bl	800a7e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099f4:	2300      	movs	r3, #0
 80099f6:	2200      	movs	r2, #0
 80099f8:	2100      	movs	r1, #0
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f001 fbf7 	bl	800b1ee <USBD_LL_PrepareReceive>
 8009a00:	e04e      	b.n	8009aa0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	6912      	ldr	r2, [r2, #16]
 8009a0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a0e:	fb01 f202 	mul.w	r2, r1, r2
 8009a12:	1a9b      	subs	r3, r3, r2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d11c      	bne.n	8009a52 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d316      	bcc.n	8009a52 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d20f      	bcs.n	8009a52 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 fed5 	bl	800a7e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a44:	2300      	movs	r3, #0
 8009a46:	2200      	movs	r2, #0
 8009a48:	2100      	movs	r1, #0
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f001 fbcf 	bl	800b1ee <USBD_LL_PrepareReceive>
 8009a50:	e026      	b.n	8009aa0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d105      	bne.n	8009a74 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009a74:	2180      	movs	r1, #128	; 0x80
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f001 fb0e 	bl	800b098 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 ff07 	bl	800a890 <USBD_CtlReceiveStatus>
 8009a82:	e00d      	b.n	8009aa0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d004      	beq.n	8009a98 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d103      	bne.n	8009aa0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009a98:	2180      	movs	r1, #128	; 0x80
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f001 fafc 	bl	800b098 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d11d      	bne.n	8009ae6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7ff fe81 	bl	80097b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ab8:	e015      	b.n	8009ae6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00d      	beq.n	8009ae2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d108      	bne.n	8009ae2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	7afa      	ldrb	r2, [r7, #11]
 8009ada:	4611      	mov	r1, r2
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	4798      	blx	r3
 8009ae0:	e001      	b.n	8009ae6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e000      	b.n	8009ae8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	2200      	movs	r2, #0
 8009afc:	2100      	movs	r1, #0
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 fa85 	bl	800b00e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2240      	movs	r2, #64	; 0x40
 8009b10:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	2200      	movs	r2, #0
 8009b18:	2180      	movs	r1, #128	; 0x80
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 fa77 	bl	800b00e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2240      	movs	r2, #64	; 0x40
 8009b2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d009      	beq.n	8009b68 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6852      	ldr	r2, [r2, #4]
 8009b60:	b2d2      	uxtb	r2, r2
 8009b62:	4611      	mov	r1, r2
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
  }

  return USBD_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	78fa      	ldrb	r2, [r7, #3]
 8009b82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr

08009b90 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2204      	movs	r2, #4
 8009ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bc80      	pop	{r7}
 8009bb6:	4770      	bx	lr

08009bb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc6:	2b04      	cmp	r3, #4
 8009bc8:	d105      	bne.n	8009bd6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bc80      	pop	{r7}
 8009be0:	4770      	bx	lr

08009be2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d10b      	bne.n	8009c0c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d005      	beq.n	8009c0c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bc80      	pop	{r7}
 8009c2c:	4770      	bx	lr

08009c2e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	460b      	mov	r3, r1
 8009c38:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc80      	pop	{r7}
 8009c44:	4770      	bx	lr

08009c46 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bc80      	pop	{r7}
 8009c58:	4770      	bx	lr

08009c5a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	6852      	ldr	r2, [r2, #4]
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	4611      	mov	r1, r2
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	4798      	blx	r3

  return USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d005      	beq.n	8009cae <USBD_StdDevReq+0x26>
 8009ca2:	2b40      	cmp	r3, #64	; 0x40
 8009ca4:	d84f      	bhi.n	8009d46 <USBD_StdDevReq+0xbe>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <USBD_StdDevReq+0x36>
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d14b      	bne.n	8009d46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	4798      	blx	r3
      break;
 8009cbc:	e048      	b.n	8009d50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	785b      	ldrb	r3, [r3, #1]
 8009cc2:	2b09      	cmp	r3, #9
 8009cc4:	d839      	bhi.n	8009d3a <USBD_StdDevReq+0xb2>
 8009cc6:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <USBD_StdDevReq+0x44>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009d1d 	.word	0x08009d1d
 8009cd0:	08009d31 	.word	0x08009d31
 8009cd4:	08009d3b 	.word	0x08009d3b
 8009cd8:	08009d27 	.word	0x08009d27
 8009cdc:	08009d3b 	.word	0x08009d3b
 8009ce0:	08009cff 	.word	0x08009cff
 8009ce4:	08009cf5 	.word	0x08009cf5
 8009ce8:	08009d3b 	.word	0x08009d3b
 8009cec:	08009d13 	.word	0x08009d13
 8009cf0:	08009d09 	.word	0x08009d09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f9dc 	bl	800a0b4 <USBD_GetDescriptor>
          break;
 8009cfc:	e022      	b.n	8009d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fb3f 	bl	800a384 <USBD_SetAddress>
          break;
 8009d06:	e01d      	b.n	8009d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fb7e 	bl	800a40c <USBD_SetConfig>
          break;
 8009d10:	e018      	b.n	8009d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fc07 	bl	800a528 <USBD_GetConfig>
          break;
 8009d1a:	e013      	b.n	8009d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fc37 	bl	800a592 <USBD_GetStatus>
          break;
 8009d24:	e00e      	b.n	8009d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fc65 	bl	800a5f8 <USBD_SetFeature>
          break;
 8009d2e:	e009      	b.n	8009d44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fc74 	bl	800a620 <USBD_ClrFeature>
          break;
 8009d38:	e004      	b.n	8009d44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fccc 	bl	800a6da <USBD_CtlError>
          break;
 8009d42:	bf00      	nop
      }
      break;
 8009d44:	e004      	b.n	8009d50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fcc6 	bl	800a6da <USBD_CtlError>
      break;
 8009d4e:	bf00      	nop
  }

  return ret;
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop

08009d5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d72:	2b40      	cmp	r3, #64	; 0x40
 8009d74:	d005      	beq.n	8009d82 <USBD_StdItfReq+0x26>
 8009d76:	2b40      	cmp	r3, #64	; 0x40
 8009d78:	d82e      	bhi.n	8009dd8 <USBD_StdItfReq+0x7c>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <USBD_StdItfReq+0x26>
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	d12a      	bne.n	8009dd8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d81d      	bhi.n	8009dca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	889b      	ldrh	r3, [r3, #4]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d813      	bhi.n	8009dc0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4798      	blx	r3
 8009da6:	4603      	mov	r3, r0
 8009da8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	88db      	ldrh	r3, [r3, #6]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d110      	bne.n	8009dd4 <USBD_StdItfReq+0x78>
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10d      	bne.n	8009dd4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fd56 	bl	800a86a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009dbe:	e009      	b.n	8009dd4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fc89 	bl	800a6da <USBD_CtlError>
          break;
 8009dc8:	e004      	b.n	8009dd4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fc84 	bl	800a6da <USBD_CtlError>
          break;
 8009dd2:	e000      	b.n	8009dd6 <USBD_StdItfReq+0x7a>
          break;
 8009dd4:	bf00      	nop
      }
      break;
 8009dd6:	e004      	b.n	8009de2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fc7d 	bl	800a6da <USBD_CtlError>
      break;
 8009de0:	bf00      	nop
  }

  return USBD_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	889b      	ldrh	r3, [r3, #4]
 8009dfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	d007      	beq.n	8009e1c <USBD_StdEPReq+0x30>
 8009e0c:	2b40      	cmp	r3, #64	; 0x40
 8009e0e:	f200 8146 	bhi.w	800a09e <USBD_StdEPReq+0x2b2>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <USBD_StdEPReq+0x40>
 8009e16:	2b20      	cmp	r3, #32
 8009e18:	f040 8141 	bne.w	800a09e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
      break;
 8009e2a:	e13d      	b.n	800a0a8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d10a      	bne.n	8009e4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	e12d      	b.n	800a0aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d007      	beq.n	8009e66 <USBD_StdEPReq+0x7a>
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	f300 811b 	bgt.w	800a092 <USBD_StdEPReq+0x2a6>
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d072      	beq.n	8009f46 <USBD_StdEPReq+0x15a>
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d03a      	beq.n	8009eda <USBD_StdEPReq+0xee>
 8009e64:	e115      	b.n	800a092 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d002      	beq.n	8009e76 <USBD_StdEPReq+0x8a>
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d015      	beq.n	8009ea0 <USBD_StdEPReq+0xb4>
 8009e74:	e02b      	b.n	8009ece <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00c      	beq.n	8009e96 <USBD_StdEPReq+0xaa>
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	2b80      	cmp	r3, #128	; 0x80
 8009e80:	d009      	beq.n	8009e96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 f906 	bl	800b098 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e8c:	2180      	movs	r1, #128	; 0x80
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 f902 	bl	800b098 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e94:	e020      	b.n	8009ed8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fc1e 	bl	800a6da <USBD_CtlError>
              break;
 8009e9e:	e01b      	b.n	8009ed8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	885b      	ldrh	r3, [r3, #2]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10e      	bne.n	8009ec6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <USBD_StdEPReq+0xda>
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b80      	cmp	r3, #128	; 0x80
 8009eb2:	d008      	beq.n	8009ec6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	88db      	ldrh	r3, [r3, #6]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d104      	bne.n	8009ec6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 f8e9 	bl	800b098 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fccf 	bl	800a86a <USBD_CtlSendStatus>

              break;
 8009ecc:	e004      	b.n	8009ed8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fc02 	bl	800a6da <USBD_CtlError>
              break;
 8009ed6:	bf00      	nop
          }
          break;
 8009ed8:	e0e0      	b.n	800a09c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d002      	beq.n	8009eea <USBD_StdEPReq+0xfe>
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d015      	beq.n	8009f14 <USBD_StdEPReq+0x128>
 8009ee8:	e026      	b.n	8009f38 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00c      	beq.n	8009f0a <USBD_StdEPReq+0x11e>
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	2b80      	cmp	r3, #128	; 0x80
 8009ef4:	d009      	beq.n	8009f0a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 f8cc 	bl	800b098 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f00:	2180      	movs	r1, #128	; 0x80
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 f8c8 	bl	800b098 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f08:	e01c      	b.n	8009f44 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fbe4 	bl	800a6da <USBD_CtlError>
              break;
 8009f12:	e017      	b.n	8009f44 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	885b      	ldrh	r3, [r3, #2]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d112      	bne.n	8009f42 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d004      	beq.n	8009f30 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 f8d3 	bl	800b0d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fc9a 	bl	800a86a <USBD_CtlSendStatus>
              }
              break;
 8009f36:	e004      	b.n	8009f42 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fbcd 	bl	800a6da <USBD_CtlError>
              break;
 8009f40:	e000      	b.n	8009f44 <USBD_StdEPReq+0x158>
              break;
 8009f42:	bf00      	nop
          }
          break;
 8009f44:	e0aa      	b.n	800a09c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d002      	beq.n	8009f56 <USBD_StdEPReq+0x16a>
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d032      	beq.n	8009fba <USBD_StdEPReq+0x1ce>
 8009f54:	e097      	b.n	800a086 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d007      	beq.n	8009f6c <USBD_StdEPReq+0x180>
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	2b80      	cmp	r3, #128	; 0x80
 8009f60:	d004      	beq.n	8009f6c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fbb8 	bl	800a6da <USBD_CtlError>
                break;
 8009f6a:	e091      	b.n	800a090 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	da0b      	bge.n	8009f8c <USBD_StdEPReq+0x1a0>
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	3310      	adds	r3, #16
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	4413      	add	r3, r2
 8009f88:	3304      	adds	r3, #4
 8009f8a:	e00b      	b.n	8009fa4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
 8009f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fbfb 	bl	800a7ae <USBD_CtlSendData>
              break;
 8009fb8:	e06a      	b.n	800a090 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	da11      	bge.n	8009fe6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	f003 020f 	and.w	r2, r3, #15
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	440b      	add	r3, r1
 8009fd4:	3318      	adds	r3, #24
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d117      	bne.n	800a00c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fb7b 	bl	800a6da <USBD_CtlError>
                  break;
 8009fe4:	e054      	b.n	800a090 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	f003 020f 	and.w	r2, r3, #15
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	440b      	add	r3, r1
 8009ff8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d104      	bne.n	800a00c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fb68 	bl	800a6da <USBD_CtlError>
                  break;
 800a00a:	e041      	b.n	800a090 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a00c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a010:	2b00      	cmp	r3, #0
 800a012:	da0b      	bge.n	800a02c <USBD_StdEPReq+0x240>
 800a014:	7bbb      	ldrb	r3, [r7, #14]
 800a016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	3310      	adds	r3, #16
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	4413      	add	r3, r2
 800a028:	3304      	adds	r3, #4
 800a02a:	e00b      	b.n	800a044 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	4413      	add	r3, r2
 800a042:	3304      	adds	r3, #4
 800a044:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <USBD_StdEPReq+0x266>
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	2b80      	cmp	r3, #128	; 0x80
 800a050:	d103      	bne.n	800a05a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	e00e      	b.n	800a078 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 f858 	bl	800b114 <USBD_LL_IsStallEP>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2201      	movs	r2, #1
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	e002      	b.n	800a078 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2202      	movs	r2, #2
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fb95 	bl	800a7ae <USBD_CtlSendData>
              break;
 800a084:	e004      	b.n	800a090 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fb26 	bl	800a6da <USBD_CtlError>
              break;
 800a08e:	bf00      	nop
          }
          break;
 800a090:	e004      	b.n	800a09c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fb20 	bl	800a6da <USBD_CtlError>
          break;
 800a09a:	bf00      	nop
      }
      break;
 800a09c:	e004      	b.n	800a0a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fb1a 	bl	800a6da <USBD_CtlError>
      break;
 800a0a6:	bf00      	nop
  }

  return ret;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	885b      	ldrh	r3, [r3, #2]
 800a0ce:	0a1b      	lsrs	r3, r3, #8
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	2b06      	cmp	r3, #6
 800a0d6:	f200 8128 	bhi.w	800a32a <USBD_GetDescriptor+0x276>
 800a0da:	a201      	add	r2, pc, #4	; (adr r2, 800a0e0 <USBD_GetDescriptor+0x2c>)
 800a0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e0:	0800a0fd 	.word	0x0800a0fd
 800a0e4:	0800a115 	.word	0x0800a115
 800a0e8:	0800a155 	.word	0x0800a155
 800a0ec:	0800a32b 	.word	0x0800a32b
 800a0f0:	0800a32b 	.word	0x0800a32b
 800a0f4:	0800a2cb 	.word	0x0800a2cb
 800a0f8:	0800a2f7 	.word	0x0800a2f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	7c12      	ldrb	r2, [r2, #16]
 800a108:	f107 0108 	add.w	r1, r7, #8
 800a10c:	4610      	mov	r0, r2
 800a10e:	4798      	blx	r3
 800a110:	60f8      	str	r0, [r7, #12]
      break;
 800a112:	e112      	b.n	800a33a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	7c1b      	ldrb	r3, [r3, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10d      	bne.n	800a138 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a124:	f107 0208 	add.w	r2, r7, #8
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3301      	adds	r3, #1
 800a132:	2202      	movs	r2, #2
 800a134:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a136:	e100      	b.n	800a33a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a140:	f107 0208 	add.w	r2, r7, #8
 800a144:	4610      	mov	r0, r2
 800a146:	4798      	blx	r3
 800a148:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3301      	adds	r3, #1
 800a14e:	2202      	movs	r2, #2
 800a150:	701a      	strb	r2, [r3, #0]
      break;
 800a152:	e0f2      	b.n	800a33a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	885b      	ldrh	r3, [r3, #2]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	f200 80ac 	bhi.w	800a2b8 <USBD_GetDescriptor+0x204>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <USBD_GetDescriptor+0xb4>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a181 	.word	0x0800a181
 800a16c:	0800a1b5 	.word	0x0800a1b5
 800a170:	0800a1e9 	.word	0x0800a1e9
 800a174:	0800a21d 	.word	0x0800a21d
 800a178:	0800a251 	.word	0x0800a251
 800a17c:	0800a285 	.word	0x0800a285
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	7c12      	ldrb	r2, [r2, #16]
 800a198:	f107 0108 	add.w	r1, r7, #8
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
 800a1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a2:	e091      	b.n	800a2c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fa97 	bl	800a6da <USBD_CtlError>
            err++;
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b2:	e089      	b.n	800a2c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00b      	beq.n	800a1d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	7c12      	ldrb	r2, [r2, #16]
 800a1cc:	f107 0108 	add.w	r1, r7, #8
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	4798      	blx	r3
 800a1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1d6:	e077      	b.n	800a2c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 fa7d 	bl	800a6da <USBD_CtlError>
            err++;
 800a1e0:	7afb      	ldrb	r3, [r7, #11]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1e6:	e06f      	b.n	800a2c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00b      	beq.n	800a20c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	7c12      	ldrb	r2, [r2, #16]
 800a200:	f107 0108 	add.w	r1, r7, #8
 800a204:	4610      	mov	r0, r2
 800a206:	4798      	blx	r3
 800a208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20a:	e05d      	b.n	800a2c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa63 	bl	800a6da <USBD_CtlError>
            err++;
 800a214:	7afb      	ldrb	r3, [r7, #11]
 800a216:	3301      	adds	r3, #1
 800a218:	72fb      	strb	r3, [r7, #11]
          break;
 800a21a:	e055      	b.n	800a2c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	7c12      	ldrb	r2, [r2, #16]
 800a234:	f107 0108 	add.w	r1, r7, #8
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
 800a23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a23e:	e043      	b.n	800a2c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa49 	bl	800a6da <USBD_CtlError>
            err++;
 800a248:	7afb      	ldrb	r3, [r7, #11]
 800a24a:	3301      	adds	r3, #1
 800a24c:	72fb      	strb	r3, [r7, #11]
          break;
 800a24e:	e03b      	b.n	800a2c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7c12      	ldrb	r2, [r2, #16]
 800a268:	f107 0108 	add.w	r1, r7, #8
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
 800a270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a272:	e029      	b.n	800a2c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa2f 	bl	800a6da <USBD_CtlError>
            err++;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	3301      	adds	r3, #1
 800a280:	72fb      	strb	r3, [r7, #11]
          break;
 800a282:	e021      	b.n	800a2c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7c12      	ldrb	r2, [r2, #16]
 800a29c:	f107 0108 	add.w	r1, r7, #8
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
 800a2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2a6:	e00f      	b.n	800a2c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa15 	bl	800a6da <USBD_CtlError>
            err++;
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2b6:	e007      	b.n	800a2c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fa0d 	bl	800a6da <USBD_CtlError>
          err++;
 800a2c0:	7afb      	ldrb	r3, [r7, #11]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a2c6:	e038      	b.n	800a33a <USBD_GetDescriptor+0x286>
 800a2c8:	e037      	b.n	800a33a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	7c1b      	ldrb	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d109      	bne.n	800a2e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2da:	f107 0208 	add.w	r2, r7, #8
 800a2de:	4610      	mov	r0, r2
 800a2e0:	4798      	blx	r3
 800a2e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2e4:	e029      	b.n	800a33a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f9f6 	bl	800a6da <USBD_CtlError>
        err++;
 800a2ee:	7afb      	ldrb	r3, [r7, #11]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2f4:	e021      	b.n	800a33a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7c1b      	ldrb	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10d      	bne.n	800a31a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	f107 0208 	add.w	r2, r7, #8
 800a30a:	4610      	mov	r0, r2
 800a30c:	4798      	blx	r3
 800a30e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	3301      	adds	r3, #1
 800a314:	2207      	movs	r2, #7
 800a316:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a318:	e00f      	b.n	800a33a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f9dc 	bl	800a6da <USBD_CtlError>
        err++;
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	3301      	adds	r3, #1
 800a326:	72fb      	strb	r3, [r7, #11]
      break;
 800a328:	e007      	b.n	800a33a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f9d4 	bl	800a6da <USBD_CtlError>
      err++;
 800a332:	7afb      	ldrb	r3, [r7, #11]
 800a334:	3301      	adds	r3, #1
 800a336:	72fb      	strb	r3, [r7, #11]
      break;
 800a338:	bf00      	nop
  }

  if (err != 0U)
 800a33a:	7afb      	ldrb	r3, [r7, #11]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d11c      	bne.n	800a37a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a340:	893b      	ldrh	r3, [r7, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d011      	beq.n	800a36a <USBD_GetDescriptor+0x2b6>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	88db      	ldrh	r3, [r3, #6]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00d      	beq.n	800a36a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	88da      	ldrh	r2, [r3, #6]
 800a352:	893b      	ldrh	r3, [r7, #8]
 800a354:	4293      	cmp	r3, r2
 800a356:	bf28      	it	cs
 800a358:	4613      	movcs	r3, r2
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a35e:	893b      	ldrh	r3, [r7, #8]
 800a360:	461a      	mov	r2, r3
 800a362:	68f9      	ldr	r1, [r7, #12]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fa22 	bl	800a7ae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	88db      	ldrh	r3, [r3, #6]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d104      	bne.n	800a37c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa79 	bl	800a86a <USBD_CtlSendStatus>
 800a378:	e000      	b.n	800a37c <USBD_GetDescriptor+0x2c8>
    return;
 800a37a:	bf00      	nop
    }
  }
}
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop

0800a384 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	889b      	ldrh	r3, [r3, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d130      	bne.n	800a3f8 <USBD_SetAddress+0x74>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d12c      	bne.n	800a3f8 <USBD_SetAddress+0x74>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	885b      	ldrh	r3, [r3, #2]
 800a3a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a3a4:	d828      	bhi.n	800a3f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	885b      	ldrh	r3, [r3, #2]
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d104      	bne.n	800a3c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f98b 	bl	800a6da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c4:	e01d      	b.n	800a402 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	7bfa      	ldrb	r2, [r7, #15]
 800a3ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fec9 	bl	800b16a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fa46 	bl	800a86a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d004      	beq.n	800a3ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ec:	e009      	b.n	800a402 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f6:	e004      	b.n	800a402 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f96d 	bl	800a6da <USBD_CtlError>
  }
}
 800a400:	bf00      	nop
 800a402:	bf00      	nop
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	4b41      	ldr	r3, [pc, #260]	; (800a524 <USBD_SetConfig+0x118>)
 800a41e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a420:	4b40      	ldr	r3, [pc, #256]	; (800a524 <USBD_SetConfig+0x118>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d904      	bls.n	800a432 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f955 	bl	800a6da <USBD_CtlError>
 800a430:	e075      	b.n	800a51e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d002      	beq.n	800a442 <USBD_SetConfig+0x36>
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d023      	beq.n	800a488 <USBD_SetConfig+0x7c>
 800a440:	e062      	b.n	800a508 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a442:	4b38      	ldr	r3, [pc, #224]	; (800a524 <USBD_SetConfig+0x118>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d01a      	beq.n	800a480 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a44a:	4b36      	ldr	r3, [pc, #216]	; (800a524 <USBD_SetConfig+0x118>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	461a      	mov	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2203      	movs	r2, #3
 800a458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a45c:	4b31      	ldr	r3, [pc, #196]	; (800a524 <USBD_SetConfig+0x118>)
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff f9af 	bl	80097c6 <USBD_SetClassConfig>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d104      	bne.n	800a478 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f932 	bl	800a6da <USBD_CtlError>
            return;
 800a476:	e052      	b.n	800a51e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f9f6 	bl	800a86a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a47e:	e04e      	b.n	800a51e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f9f2 	bl	800a86a <USBD_CtlSendStatus>
        break;
 800a486:	e04a      	b.n	800a51e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a488:	4b26      	ldr	r3, [pc, #152]	; (800a524 <USBD_SetConfig+0x118>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d112      	bne.n	800a4b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2202      	movs	r2, #2
 800a494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a498:	4b22      	ldr	r3, [pc, #136]	; (800a524 <USBD_SetConfig+0x118>)
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	461a      	mov	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a4a2:	4b20      	ldr	r3, [pc, #128]	; (800a524 <USBD_SetConfig+0x118>)
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7ff f9ab 	bl	8009804 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f9db 	bl	800a86a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a4b4:	e033      	b.n	800a51e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a4b6:	4b1b      	ldr	r3, [pc, #108]	; (800a524 <USBD_SetConfig+0x118>)
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d01d      	beq.n	800a500 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff f999 	bl	8009804 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a4d2:	4b14      	ldr	r3, [pc, #80]	; (800a524 <USBD_SetConfig+0x118>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a4dc:	4b11      	ldr	r3, [pc, #68]	; (800a524 <USBD_SetConfig+0x118>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff f96f 	bl	80097c6 <USBD_SetClassConfig>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d104      	bne.n	800a4f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f8f2 	bl	800a6da <USBD_CtlError>
            return;
 800a4f6:	e012      	b.n	800a51e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f9b6 	bl	800a86a <USBD_CtlSendStatus>
        break;
 800a4fe:	e00e      	b.n	800a51e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f9b2 	bl	800a86a <USBD_CtlSendStatus>
        break;
 800a506:	e00a      	b.n	800a51e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f8e5 	bl	800a6da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a510:	4b04      	ldr	r3, [pc, #16]	; (800a524 <USBD_SetConfig+0x118>)
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff f974 	bl	8009804 <USBD_ClrClassConfig>
        break;
 800a51c:	bf00      	nop
    }
  }
}
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	20000ae4 	.word	0x20000ae4

0800a528 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	88db      	ldrh	r3, [r3, #6]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d004      	beq.n	800a544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f8cc 	bl	800a6da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a542:	e022      	b.n	800a58a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	dc02      	bgt.n	800a554 <USBD_GetConfig+0x2c>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dc03      	bgt.n	800a55a <USBD_GetConfig+0x32>
 800a552:	e015      	b.n	800a580 <USBD_GetConfig+0x58>
 800a554:	2b03      	cmp	r3, #3
 800a556:	d00b      	beq.n	800a570 <USBD_GetConfig+0x48>
 800a558:	e012      	b.n	800a580 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3308      	adds	r3, #8
 800a564:	2201      	movs	r2, #1
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f920 	bl	800a7ae <USBD_CtlSendData>
        break;
 800a56e:	e00c      	b.n	800a58a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	3304      	adds	r3, #4
 800a574:	2201      	movs	r2, #1
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f918 	bl	800a7ae <USBD_CtlSendData>
        break;
 800a57e:	e004      	b.n	800a58a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f8a9 	bl	800a6da <USBD_CtlError>
        break;
 800a588:	bf00      	nop
}
 800a58a:	bf00      	nop
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d81e      	bhi.n	800a5e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	88db      	ldrh	r3, [r3, #6]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d004      	beq.n	800a5ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f891 	bl	800a6da <USBD_CtlError>
        break;
 800a5b8:	e01a      	b.n	800a5f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f043 0202 	orr.w	r2, r3, #2
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	330c      	adds	r3, #12
 800a5da:	2202      	movs	r2, #2
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f8e5 	bl	800a7ae <USBD_CtlSendData>
      break;
 800a5e4:	e004      	b.n	800a5f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a5e6:	6839      	ldr	r1, [r7, #0]
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f876 	bl	800a6da <USBD_CtlError>
      break;
 800a5ee:	bf00      	nop
  }
}
 800a5f0:	bf00      	nop
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	885b      	ldrh	r3, [r3, #2]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d106      	bne.n	800a618 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f929 	bl	800a86a <USBD_CtlSendStatus>
  }
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a630:	3b01      	subs	r3, #1
 800a632:	2b02      	cmp	r3, #2
 800a634:	d80b      	bhi.n	800a64e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	885b      	ldrh	r3, [r3, #2]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d10c      	bne.n	800a658 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f90f 	bl	800a86a <USBD_CtlSendStatus>
      }
      break;
 800a64c:	e004      	b.n	800a658 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f842 	bl	800a6da <USBD_CtlError>
      break;
 800a656:	e000      	b.n	800a65a <USBD_ClrFeature+0x3a>
      break;
 800a658:	bf00      	nop
  }
}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	785a      	ldrb	r2, [r3, #1]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	3302      	adds	r3, #2
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	b29a      	uxth	r2, r3
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	3303      	adds	r3, #3
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	021b      	lsls	r3, r3, #8
 800a68e:	b29b      	uxth	r3, r3
 800a690:	4413      	add	r3, r2
 800a692:	b29a      	uxth	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	3304      	adds	r3, #4
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	3305      	adds	r3, #5
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	021b      	lsls	r3, r3, #8
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	4413      	add	r3, r2
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	3306      	adds	r3, #6
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	3307      	adds	r3, #7
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	021b      	lsls	r3, r3, #8
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	4413      	add	r3, r2
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	80da      	strh	r2, [r3, #6]

}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bc80      	pop	{r7}
 800a6d8:	4770      	bx	lr

0800a6da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a6e4:	2180      	movs	r1, #128	; 0x80
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fcd6 	bl	800b098 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fcd2 	bl	800b098 <USBD_LL_StallEP>
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d032      	beq.n	800a778 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 f834 	bl	800a780 <USBD_GetLen>
 800a718:	4603      	mov	r3, r0
 800a71a:	3301      	adds	r3, #1
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	b29a      	uxth	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a726:	7dfb      	ldrb	r3, [r7, #23]
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	75fa      	strb	r2, [r7, #23]
 800a72c:	461a      	mov	r2, r3
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	4413      	add	r3, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	7812      	ldrb	r2, [r2, #0]
 800a736:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a738:	7dfb      	ldrb	r3, [r7, #23]
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	75fa      	strb	r2, [r7, #23]
 800a73e:	461a      	mov	r2, r3
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4413      	add	r3, r2
 800a744:	2203      	movs	r2, #3
 800a746:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a748:	e012      	b.n	800a770 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	60fa      	str	r2, [r7, #12]
 800a750:	7dfa      	ldrb	r2, [r7, #23]
 800a752:	1c51      	adds	r1, r2, #1
 800a754:	75f9      	strb	r1, [r7, #23]
 800a756:	4611      	mov	r1, r2
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	440a      	add	r2, r1
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	75fa      	strb	r2, [r7, #23]
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4413      	add	r3, r2
 800a76c:	2200      	movs	r2, #0
 800a76e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1e8      	bne.n	800a74a <USBD_GetString+0x4e>
    }
  }
}
 800a778:	bf00      	nop
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a78c:	e005      	b.n	800a79a <USBD_GetLen+0x1a>
  {
    len++;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
 800a790:	3301      	adds	r3, #1
 800a792:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	3301      	adds	r3, #1
 800a798:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1f5      	bne.n	800a78e <USBD_GetLen+0xe>
  }

  return len;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bc80      	pop	{r7}
 800a7ac:	4770      	bx	lr

0800a7ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a7c4:	88fa      	ldrh	r2, [r7, #6]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a7ca:	88fa      	ldrh	r2, [r7, #6]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7d0:	88fb      	ldrh	r3, [r7, #6]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fce6 	bl	800b1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	60b9      	str	r1, [r7, #8]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7f4:	88fb      	ldrh	r3, [r7, #6]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 fcd4 	bl	800b1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	60f8      	str	r0, [r7, #12]
 800a812:	60b9      	str	r1, [r7, #8]
 800a814:	4613      	mov	r3, r2
 800a816:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2203      	movs	r2, #3
 800a81c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a820:	88fa      	ldrh	r2, [r7, #6]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a828:	88fa      	ldrh	r2, [r7, #6]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a830:	88fb      	ldrh	r3, [r7, #6]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	2100      	movs	r1, #0
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f000 fcd9 	bl	800b1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b084      	sub	sp, #16
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	60f8      	str	r0, [r7, #12]
 800a84e:	60b9      	str	r1, [r7, #8]
 800a850:	4613      	mov	r3, r2
 800a852:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a854:	88fb      	ldrh	r3, [r7, #6]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	2100      	movs	r1, #0
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 fcc7 	bl	800b1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2204      	movs	r2, #4
 800a876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a87a:	2300      	movs	r3, #0
 800a87c:	2200      	movs	r2, #0
 800a87e:	2100      	movs	r1, #0
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fc91 	bl	800b1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2205      	movs	r2, #5
 800a89c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fca1 	bl	800b1ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4912      	ldr	r1, [pc, #72]	; (800a908 <MX_USB_DEVICE_Init+0x50>)
 800a8c0:	4812      	ldr	r0, [pc, #72]	; (800a90c <MX_USB_DEVICE_Init+0x54>)
 800a8c2:	f7fe ff26 	bl	8009712 <USBD_Init>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a8cc:	f7f8 f8e5 	bl	8002a9a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a8d0:	490f      	ldr	r1, [pc, #60]	; (800a910 <MX_USB_DEVICE_Init+0x58>)
 800a8d2:	480e      	ldr	r0, [pc, #56]	; (800a90c <MX_USB_DEVICE_Init+0x54>)
 800a8d4:	f7fe ff48 	bl	8009768 <USBD_RegisterClass>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a8de:	f7f8 f8dc 	bl	8002a9a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a8e2:	490c      	ldr	r1, [pc, #48]	; (800a914 <MX_USB_DEVICE_Init+0x5c>)
 800a8e4:	4809      	ldr	r0, [pc, #36]	; (800a90c <MX_USB_DEVICE_Init+0x54>)
 800a8e6:	f7fe fe79 	bl	80095dc <USBD_CDC_RegisterInterface>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a8f0:	f7f8 f8d3 	bl	8002a9a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a8f4:	4805      	ldr	r0, [pc, #20]	; (800a90c <MX_USB_DEVICE_Init+0x54>)
 800a8f6:	f7fe ff50 	bl	800979a <USBD_Start>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a900:	f7f8 f8cb 	bl	8002a9a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a904:	bf00      	nop
 800a906:	bd80      	pop	{r7, pc}
 800a908:	20000178 	.word	0x20000178
 800a90c:	20000ae8 	.word	0x20000ae8
 800a910:	20000064 	.word	0x20000064
 800a914:	20000168 	.word	0x20000168

0800a918 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a91c:	2200      	movs	r2, #0
 800a91e:	4905      	ldr	r1, [pc, #20]	; (800a934 <CDC_Init_FS+0x1c>)
 800a920:	4805      	ldr	r0, [pc, #20]	; (800a938 <CDC_Init_FS+0x20>)
 800a922:	f7fe fe71 	bl	8009608 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a926:	4905      	ldr	r1, [pc, #20]	; (800a93c <CDC_Init_FS+0x24>)
 800a928:	4803      	ldr	r0, [pc, #12]	; (800a938 <CDC_Init_FS+0x20>)
 800a92a:	f7fe fe86 	bl	800963a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a92e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a930:	4618      	mov	r0, r3
 800a932:	bd80      	pop	{r7, pc}
 800a934:	200011ac 	.word	0x200011ac
 800a938:	20000ae8 	.word	0x20000ae8
 800a93c:	20000dac 	.word	0x20000dac

0800a940 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a944:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a946:	4618      	mov	r0, r3
 800a948:	46bd      	mov	sp, r7
 800a94a:	bc80      	pop	{r7}
 800a94c:	4770      	bx	lr
	...

0800a950 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	6039      	str	r1, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
 800a95c:	4613      	mov	r3, r2
 800a95e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	2b23      	cmp	r3, #35	; 0x23
 800a964:	d84a      	bhi.n	800a9fc <CDC_Control_FS+0xac>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <CDC_Control_FS+0x1c>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a9fd 	.word	0x0800a9fd
 800a970:	0800a9fd 	.word	0x0800a9fd
 800a974:	0800a9fd 	.word	0x0800a9fd
 800a978:	0800a9fd 	.word	0x0800a9fd
 800a97c:	0800a9fd 	.word	0x0800a9fd
 800a980:	0800a9fd 	.word	0x0800a9fd
 800a984:	0800a9fd 	.word	0x0800a9fd
 800a988:	0800a9fd 	.word	0x0800a9fd
 800a98c:	0800a9fd 	.word	0x0800a9fd
 800a990:	0800a9fd 	.word	0x0800a9fd
 800a994:	0800a9fd 	.word	0x0800a9fd
 800a998:	0800a9fd 	.word	0x0800a9fd
 800a99c:	0800a9fd 	.word	0x0800a9fd
 800a9a0:	0800a9fd 	.word	0x0800a9fd
 800a9a4:	0800a9fd 	.word	0x0800a9fd
 800a9a8:	0800a9fd 	.word	0x0800a9fd
 800a9ac:	0800a9fd 	.word	0x0800a9fd
 800a9b0:	0800a9fd 	.word	0x0800a9fd
 800a9b4:	0800a9fd 	.word	0x0800a9fd
 800a9b8:	0800a9fd 	.word	0x0800a9fd
 800a9bc:	0800a9fd 	.word	0x0800a9fd
 800a9c0:	0800a9fd 	.word	0x0800a9fd
 800a9c4:	0800a9fd 	.word	0x0800a9fd
 800a9c8:	0800a9fd 	.word	0x0800a9fd
 800a9cc:	0800a9fd 	.word	0x0800a9fd
 800a9d0:	0800a9fd 	.word	0x0800a9fd
 800a9d4:	0800a9fd 	.word	0x0800a9fd
 800a9d8:	0800a9fd 	.word	0x0800a9fd
 800a9dc:	0800a9fd 	.word	0x0800a9fd
 800a9e0:	0800a9fd 	.word	0x0800a9fd
 800a9e4:	0800a9fd 	.word	0x0800a9fd
 800a9e8:	0800a9fd 	.word	0x0800a9fd
 800a9ec:	0800a9fd 	.word	0x0800a9fd
 800a9f0:	0800a9fd 	.word	0x0800a9fd
 800a9f4:	0800a9fd 	.word	0x0800a9fd
 800a9f8:	0800a9fd 	.word	0x0800a9fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9fc:	bf00      	nop
  }

  return (USBD_OK);
 800a9fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop

0800aa0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	4805      	ldr	r0, [pc, #20]	; (800aa30 <CDC_Receive_FS+0x24>)
 800aa1a:	f7fe fe0e 	bl	800963a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa1e:	4804      	ldr	r0, [pc, #16]	; (800aa30 <CDC_Receive_FS+0x24>)
 800aa20:	f7fe fe4d 	bl	80096be <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aa24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	20000ae8 	.word	0x20000ae8

0800aa34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa44:	4b0d      	ldr	r3, [pc, #52]	; (800aa7c <CDC_Transmit_FS+0x48>)
 800aa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e00b      	b.n	800aa72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa5a:	887b      	ldrh	r3, [r7, #2]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	4806      	ldr	r0, [pc, #24]	; (800aa7c <CDC_Transmit_FS+0x48>)
 800aa62:	f7fe fdd1 	bl	8009608 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa66:	4805      	ldr	r0, [pc, #20]	; (800aa7c <CDC_Transmit_FS+0x48>)
 800aa68:	f7fe fdfa 	bl	8009660 <USBD_CDC_TransmitPacket>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20000ae8 	.word	0x20000ae8

0800aa80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2212      	movs	r2, #18
 800aa90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa92:	4b03      	ldr	r3, [pc, #12]	; (800aaa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bc80      	pop	{r7}
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	20000194 	.word	0x20000194

0800aaa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2204      	movs	r2, #4
 800aab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aab6:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bc80      	pop	{r7}
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	200001a8 	.word	0x200001a8

0800aac8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aad4:	79fb      	ldrb	r3, [r7, #7]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d105      	bne.n	800aae6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	4907      	ldr	r1, [pc, #28]	; (800aafc <USBD_FS_ProductStrDescriptor+0x34>)
 800aade:	4808      	ldr	r0, [pc, #32]	; (800ab00 <USBD_FS_ProductStrDescriptor+0x38>)
 800aae0:	f7ff fe0c 	bl	800a6fc <USBD_GetString>
 800aae4:	e004      	b.n	800aaf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	4904      	ldr	r1, [pc, #16]	; (800aafc <USBD_FS_ProductStrDescriptor+0x34>)
 800aaea:	4805      	ldr	r0, [pc, #20]	; (800ab00 <USBD_FS_ProductStrDescriptor+0x38>)
 800aaec:	f7ff fe06 	bl	800a6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaf0:	4b02      	ldr	r3, [pc, #8]	; (800aafc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	200015ac 	.word	0x200015ac
 800ab00:	0800e00c 	.word	0x0800e00c

0800ab04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4904      	ldr	r1, [pc, #16]	; (800ab24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab14:	4804      	ldr	r0, [pc, #16]	; (800ab28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab16:	f7ff fdf1 	bl	800a6fc <USBD_GetString>
  return USBD_StrDesc;
 800ab1a:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	200015ac 	.word	0x200015ac
 800ab28:	0800e024 	.word	0x0800e024

0800ab2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	221a      	movs	r2, #26
 800ab3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab3e:	f000 f843 	bl	800abc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab42:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	200001ac 	.word	0x200001ac

0800ab50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4907      	ldr	r1, [pc, #28]	; (800ab84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab66:	4808      	ldr	r0, [pc, #32]	; (800ab88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab68:	f7ff fdc8 	bl	800a6fc <USBD_GetString>
 800ab6c:	e004      	b.n	800ab78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	4904      	ldr	r1, [pc, #16]	; (800ab84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab72:	4805      	ldr	r0, [pc, #20]	; (800ab88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab74:	f7ff fdc2 	bl	800a6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab78:	4b02      	ldr	r3, [pc, #8]	; (800ab84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	200015ac 	.word	0x200015ac
 800ab88:	0800e038 	.word	0x0800e038

0800ab8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d105      	bne.n	800abaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	4907      	ldr	r1, [pc, #28]	; (800abc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aba2:	4808      	ldr	r0, [pc, #32]	; (800abc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aba4:	f7ff fdaa 	bl	800a6fc <USBD_GetString>
 800aba8:	e004      	b.n	800abb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	4904      	ldr	r1, [pc, #16]	; (800abc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abae:	4805      	ldr	r0, [pc, #20]	; (800abc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abb0:	f7ff fda4 	bl	800a6fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb4:	4b02      	ldr	r3, [pc, #8]	; (800abc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	200015ac 	.word	0x200015ac
 800abc4:	0800e044 	.word	0x0800e044

0800abc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abce:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <Get_SerialNum+0x44>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abd4:	4b0e      	ldr	r3, [pc, #56]	; (800ac10 <Get_SerialNum+0x48>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abda:	4b0e      	ldr	r3, [pc, #56]	; (800ac14 <Get_SerialNum+0x4c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d009      	beq.n	800ac02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abee:	2208      	movs	r2, #8
 800abf0:	4909      	ldr	r1, [pc, #36]	; (800ac18 <Get_SerialNum+0x50>)
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 f814 	bl	800ac20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abf8:	2204      	movs	r2, #4
 800abfa:	4908      	ldr	r1, [pc, #32]	; (800ac1c <Get_SerialNum+0x54>)
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f000 f80f 	bl	800ac20 <IntToUnicode>
  }
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	1fff7a10 	.word	0x1fff7a10
 800ac10:	1fff7a14 	.word	0x1fff7a14
 800ac14:	1fff7a18 	.word	0x1fff7a18
 800ac18:	200001ae 	.word	0x200001ae
 800ac1c:	200001be 	.word	0x200001be

0800ac20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	75fb      	strb	r3, [r7, #23]
 800ac36:	e027      	b.n	800ac88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d80b      	bhi.n	800ac58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	0f1b      	lsrs	r3, r3, #28
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	440b      	add	r3, r1
 800ac50:	3230      	adds	r2, #48	; 0x30
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e00a      	b.n	800ac6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	0f1b      	lsrs	r3, r3, #28
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	4619      	mov	r1, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	440b      	add	r3, r1
 800ac68:	3237      	adds	r2, #55	; 0x37
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	3301      	adds	r3, #1
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	3301      	adds	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
 800ac88:	7dfa      	ldrb	r2, [r7, #23]
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d3d3      	bcc.n	800ac38 <IntToUnicode+0x18>
  }
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bc80      	pop	{r7}
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08a      	sub	sp, #40	; 0x28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aca4:	f107 0314 	add.w	r3, r7, #20
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]
 800acac:	605a      	str	r2, [r3, #4]
 800acae:	609a      	str	r2, [r3, #8]
 800acb0:	60da      	str	r2, [r3, #12]
 800acb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acbc:	d147      	bne.n	800ad4e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acbe:	2300      	movs	r3, #0
 800acc0:	613b      	str	r3, [r7, #16]
 800acc2:	4b25      	ldr	r3, [pc, #148]	; (800ad58 <HAL_PCD_MspInit+0xbc>)
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	4a24      	ldr	r2, [pc, #144]	; (800ad58 <HAL_PCD_MspInit+0xbc>)
 800acc8:	f043 0301 	orr.w	r3, r3, #1
 800accc:	6313      	str	r3, [r2, #48]	; 0x30
 800acce:	4b22      	ldr	r3, [pc, #136]	; (800ad58 <HAL_PCD_MspInit+0xbc>)
 800acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	613b      	str	r3, [r7, #16]
 800acd8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800acda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace4:	2300      	movs	r3, #0
 800ace6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ace8:	f107 0314 	add.w	r3, r7, #20
 800acec:	4619      	mov	r1, r3
 800acee:	481b      	ldr	r0, [pc, #108]	; (800ad5c <HAL_PCD_MspInit+0xc0>)
 800acf0:	f7f9 fd16 	bl	8004720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800acf4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800acf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acfa:	2302      	movs	r3, #2
 800acfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad02:	2303      	movs	r3, #3
 800ad04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad06:	230a      	movs	r3, #10
 800ad08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad0a:	f107 0314 	add.w	r3, r7, #20
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4812      	ldr	r0, [pc, #72]	; (800ad5c <HAL_PCD_MspInit+0xc0>)
 800ad12:	f7f9 fd05 	bl	8004720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad16:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <HAL_PCD_MspInit+0xbc>)
 800ad18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1a:	4a0f      	ldr	r2, [pc, #60]	; (800ad58 <HAL_PCD_MspInit+0xbc>)
 800ad1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad20:	6353      	str	r3, [r2, #52]	; 0x34
 800ad22:	2300      	movs	r3, #0
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <HAL_PCD_MspInit+0xbc>)
 800ad28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2a:	4a0b      	ldr	r2, [pc, #44]	; (800ad58 <HAL_PCD_MspInit+0xbc>)
 800ad2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad30:	6453      	str	r3, [r2, #68]	; 0x44
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <HAL_PCD_MspInit+0xbc>)
 800ad34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2100      	movs	r1, #0
 800ad42:	2043      	movs	r0, #67	; 0x43
 800ad44:	f7f9 fcb5 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad48:	2043      	movs	r0, #67	; 0x43
 800ad4a:	f7f9 fcce 	bl	80046ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad4e:	bf00      	nop
 800ad50:	3728      	adds	r7, #40	; 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	40023800 	.word	0x40023800
 800ad5c:	40020000 	.word	0x40020000

0800ad60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7fe fd57 	bl	800982a <USBD_LL_SetupStage>
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800ad96:	78fa      	ldrb	r2, [r7, #3]
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	00db      	lsls	r3, r3, #3
 800ad9e:	4413      	add	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	440b      	add	r3, r1
 800ada4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	78fb      	ldrb	r3, [r7, #3]
 800adac:	4619      	mov	r1, r3
 800adae:	f7fe fd89 	bl	80098c4 <USBD_LL_DataOutStage>
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b082      	sub	sp, #8
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	460b      	mov	r3, r1
 800adc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800adcc:	78fa      	ldrb	r2, [r7, #3]
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	4613      	mov	r3, r2
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	4413      	add	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	440b      	add	r3, r1
 800adda:	3348      	adds	r3, #72	; 0x48
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	78fb      	ldrb	r3, [r7, #3]
 800ade0:	4619      	mov	r1, r3
 800ade2:	f7fe fde0 	bl	80099a6 <USBD_LL_DataInStage>
}
 800ade6:	bf00      	nop
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe fef0 	bl	8009be2 <USBD_LL_SOF>
}
 800ae02:	bf00      	nop
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae12:	2301      	movs	r3, #1
 800ae14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d102      	bne.n	800ae24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
 800ae22:	e008      	b.n	800ae36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d102      	bne.n	800ae32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	73fb      	strb	r3, [r7, #15]
 800ae30:	e001      	b.n	800ae36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae32:	f7f7 fe32 	bl	8002a9a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800ae3c:	7bfa      	ldrb	r2, [r7, #15]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fe96 	bl	8009b72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fe fe4f 	bl	8009af0 <USBD_LL_Reset>
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe fe90 	bl	8009b90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	6812      	ldr	r2, [r2, #0]
 800ae7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae82:	f043 0301 	orr.w	r3, r3, #1
 800ae86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d005      	beq.n	800ae9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae90:	4b04      	ldr	r3, [pc, #16]	; (800aea4 <HAL_PCD_SuspendCallback+0x48>)
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	4a03      	ldr	r2, [pc, #12]	; (800aea4 <HAL_PCD_SuspendCallback+0x48>)
 800ae96:	f043 0306 	orr.w	r3, r3, #6
 800ae9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae9c:	bf00      	nop
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	e000ed00 	.word	0xe000ed00

0800aea8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fe fe7e 	bl	8009bb8 <USBD_LL_Resume>
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800aed6:	78fa      	ldrb	r2, [r7, #3]
 800aed8:	4611      	mov	r1, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe fea7 	bl	8009c2e <USBD_LL_IsoOUTIncomplete>
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800aefa:	78fa      	ldrb	r2, [r7, #3]
 800aefc:	4611      	mov	r1, r2
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe fe89 	bl	8009c16 <USBD_LL_IsoINIncomplete>
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe fe93 	bl	8009c46 <USBD_LL_DevConnected>
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800af36:	4618      	mov	r0, r3
 800af38:	f7fe fe8f 	bl	8009c5a <USBD_LL_DevDisconnected>
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d139      	bne.n	800afc8 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af54:	4a1f      	ldr	r2, [pc, #124]	; (800afd4 <USBD_LL_Init+0x90>)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a1d      	ldr	r2, [pc, #116]	; (800afd4 <USBD_LL_Init+0x90>)
 800af60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af64:	4b1b      	ldr	r3, [pc, #108]	; (800afd4 <USBD_LL_Init+0x90>)
 800af66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af6c:	4b19      	ldr	r3, [pc, #100]	; (800afd4 <USBD_LL_Init+0x90>)
 800af6e:	2204      	movs	r2, #4
 800af70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af72:	4b18      	ldr	r3, [pc, #96]	; (800afd4 <USBD_LL_Init+0x90>)
 800af74:	2202      	movs	r2, #2
 800af76:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af78:	4b16      	ldr	r3, [pc, #88]	; (800afd4 <USBD_LL_Init+0x90>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af7e:	4b15      	ldr	r3, [pc, #84]	; (800afd4 <USBD_LL_Init+0x90>)
 800af80:	2202      	movs	r2, #2
 800af82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af84:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <USBD_LL_Init+0x90>)
 800af86:	2200      	movs	r2, #0
 800af88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af8a:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <USBD_LL_Init+0x90>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800af90:	4b10      	ldr	r3, [pc, #64]	; (800afd4 <USBD_LL_Init+0x90>)
 800af92:	2201      	movs	r2, #1
 800af94:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af96:	4b0f      	ldr	r3, [pc, #60]	; (800afd4 <USBD_LL_Init+0x90>)
 800af98:	2200      	movs	r2, #0
 800af9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af9c:	480d      	ldr	r0, [pc, #52]	; (800afd4 <USBD_LL_Init+0x90>)
 800af9e:	f7f9 fda5 	bl	8004aec <HAL_PCD_Init>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800afa8:	f7f7 fd77 	bl	8002a9a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800afac:	2180      	movs	r1, #128	; 0x80
 800afae:	4809      	ldr	r0, [pc, #36]	; (800afd4 <USBD_LL_Init+0x90>)
 800afb0:	f7fa ffbe 	bl	8005f30 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800afb4:	2240      	movs	r2, #64	; 0x40
 800afb6:	2100      	movs	r1, #0
 800afb8:	4806      	ldr	r0, [pc, #24]	; (800afd4 <USBD_LL_Init+0x90>)
 800afba:	f7fa ff73 	bl	8005ea4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800afbe:	2280      	movs	r2, #128	; 0x80
 800afc0:	2101      	movs	r1, #1
 800afc2:	4804      	ldr	r0, [pc, #16]	; (800afd4 <USBD_LL_Init+0x90>)
 800afc4:	f7fa ff6e 	bl	8005ea4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	200017ac 	.word	0x200017ac

0800afd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afee:	4618      	mov	r0, r3
 800aff0:	f7f9 fe99 	bl	8004d26 <HAL_PCD_Start>
 800aff4:	4603      	mov	r3, r0
 800aff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	4618      	mov	r0, r3
 800affc:	f000 f92e 	bl	800b25c <USBD_Get_USB_Status>
 800b000:	4603      	mov	r3, r0
 800b002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b004:	7bbb      	ldrb	r3, [r7, #14]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	4608      	mov	r0, r1
 800b018:	4611      	mov	r1, r2
 800b01a:	461a      	mov	r2, r3
 800b01c:	4603      	mov	r3, r0
 800b01e:	70fb      	strb	r3, [r7, #3]
 800b020:	460b      	mov	r3, r1
 800b022:	70bb      	strb	r3, [r7, #2]
 800b024:	4613      	mov	r3, r2
 800b026:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b036:	78bb      	ldrb	r3, [r7, #2]
 800b038:	883a      	ldrh	r2, [r7, #0]
 800b03a:	78f9      	ldrb	r1, [r7, #3]
 800b03c:	f7fa fb4b 	bl	80056d6 <HAL_PCD_EP_Open>
 800b040:	4603      	mov	r3, r0
 800b042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 f908 	bl	800b25c <USBD_Get_USB_Status>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b050:	7bbb      	ldrb	r3, [r7, #14]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	460b      	mov	r3, r1
 800b064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b074:	78fa      	ldrb	r2, [r7, #3]
 800b076:	4611      	mov	r1, r2
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fa fb94 	bl	80057a6 <HAL_PCD_EP_Close>
 800b07e:	4603      	mov	r3, r0
 800b080:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b082:	7bfb      	ldrb	r3, [r7, #15]
 800b084:	4618      	mov	r0, r3
 800b086:	f000 f8e9 	bl	800b25c <USBD_Get_USB_Status>
 800b08a:	4603      	mov	r3, r0
 800b08c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0b2:	78fa      	ldrb	r2, [r7, #3]
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fa fc4d 	bl	8005956 <HAL_PCD_EP_SetStall>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 f8ca 	bl	800b25c <USBD_Get_USB_Status>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0f0:	78fa      	ldrb	r2, [r7, #3]
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7fa fc92 	bl	8005a1e <HAL_PCD_EP_ClrStall>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	4618      	mov	r0, r3
 800b102:	f000 f8ab 	bl	800b25c <USBD_Get_USB_Status>
 800b106:	4603      	mov	r3, r0
 800b108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b126:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	da0b      	bge.n	800b148 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b136:	68f9      	ldr	r1, [r7, #12]
 800b138:	4613      	mov	r3, r2
 800b13a:	00db      	lsls	r3, r3, #3
 800b13c:	4413      	add	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	440b      	add	r3, r1
 800b142:	333e      	adds	r3, #62	; 0x3e
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	e00b      	b.n	800b160 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b14e:	68f9      	ldr	r1, [r7, #12]
 800b150:	4613      	mov	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	440b      	add	r3, r1
 800b15a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b15e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	bc80      	pop	{r7}
 800b168:	4770      	bx	lr

0800b16a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fa fa7f 	bl	800568c <HAL_PCD_SetAddress>
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 f861 	bl	800b25c <USBD_Get_USB_Status>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	607a      	str	r2, [r7, #4]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	72fb      	strb	r3, [r7, #11]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b1ca:	893b      	ldrh	r3, [r7, #8]
 800b1cc:	7af9      	ldrb	r1, [r7, #11]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	f7fa fb86 	bl	80058e0 <HAL_PCD_EP_Transmit>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 f83e 	bl	800b25c <USBD_Get_USB_Status>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b086      	sub	sp, #24
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	607a      	str	r2, [r7, #4]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	72fb      	strb	r3, [r7, #11]
 800b1fe:	4613      	mov	r3, r2
 800b200:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b210:	893b      	ldrh	r3, [r7, #8]
 800b212:	7af9      	ldrb	r1, [r7, #11]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	f7fa fb10 	bl	800583a <HAL_PCD_EP_Receive>
 800b21a:	4603      	mov	r3, r0
 800b21c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f81b 	bl	800b25c <USBD_Get_USB_Status>
 800b226:	4603      	mov	r3, r0
 800b228:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b22a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b246:	78fa      	ldrb	r2, [r7, #3]
 800b248:	4611      	mov	r1, r2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fa fb31 	bl	80058b2 <HAL_PCD_EP_GetRxCount>
 800b250:	4603      	mov	r3, r0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
	...

0800b25c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	4603      	mov	r3, r0
 800b264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d817      	bhi.n	800b2a0 <USBD_Get_USB_Status+0x44>
 800b270:	a201      	add	r2, pc, #4	; (adr r2, 800b278 <USBD_Get_USB_Status+0x1c>)
 800b272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b276:	bf00      	nop
 800b278:	0800b289 	.word	0x0800b289
 800b27c:	0800b28f 	.word	0x0800b28f
 800b280:	0800b295 	.word	0x0800b295
 800b284:	0800b29b 	.word	0x0800b29b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	73fb      	strb	r3, [r7, #15]
    break;
 800b28c:	e00b      	b.n	800b2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b28e:	2302      	movs	r3, #2
 800b290:	73fb      	strb	r3, [r7, #15]
    break;
 800b292:	e008      	b.n	800b2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b294:	2301      	movs	r3, #1
 800b296:	73fb      	strb	r3, [r7, #15]
    break;
 800b298:	e005      	b.n	800b2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b29a:	2302      	movs	r3, #2
 800b29c:	73fb      	strb	r3, [r7, #15]
    break;
 800b29e:	e002      	b.n	800b2a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a4:	bf00      	nop
  }
  return usb_status;
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop

0800b2b4 <malloc>:
 800b2b4:	4b02      	ldr	r3, [pc, #8]	; (800b2c0 <malloc+0xc>)
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	6818      	ldr	r0, [r3, #0]
 800b2ba:	f000 b82b 	b.w	800b314 <_malloc_r>
 800b2be:	bf00      	nop
 800b2c0:	20000220 	.word	0x20000220

0800b2c4 <free>:
 800b2c4:	4b02      	ldr	r3, [pc, #8]	; (800b2d0 <free+0xc>)
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	6818      	ldr	r0, [r3, #0]
 800b2ca:	f001 bd1d 	b.w	800cd08 <_free_r>
 800b2ce:	bf00      	nop
 800b2d0:	20000220 	.word	0x20000220

0800b2d4 <sbrk_aligned>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	4e0e      	ldr	r6, [pc, #56]	; (800b310 <sbrk_aligned+0x3c>)
 800b2d8:	460c      	mov	r4, r1
 800b2da:	6831      	ldr	r1, [r6, #0]
 800b2dc:	4605      	mov	r5, r0
 800b2de:	b911      	cbnz	r1, 800b2e6 <sbrk_aligned+0x12>
 800b2e0:	f000 fe48 	bl	800bf74 <_sbrk_r>
 800b2e4:	6030      	str	r0, [r6, #0]
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	f000 fe43 	bl	800bf74 <_sbrk_r>
 800b2ee:	1c43      	adds	r3, r0, #1
 800b2f0:	d00a      	beq.n	800b308 <sbrk_aligned+0x34>
 800b2f2:	1cc4      	adds	r4, r0, #3
 800b2f4:	f024 0403 	bic.w	r4, r4, #3
 800b2f8:	42a0      	cmp	r0, r4
 800b2fa:	d007      	beq.n	800b30c <sbrk_aligned+0x38>
 800b2fc:	1a21      	subs	r1, r4, r0
 800b2fe:	4628      	mov	r0, r5
 800b300:	f000 fe38 	bl	800bf74 <_sbrk_r>
 800b304:	3001      	adds	r0, #1
 800b306:	d101      	bne.n	800b30c <sbrk_aligned+0x38>
 800b308:	f04f 34ff 	mov.w	r4, #4294967295
 800b30c:	4620      	mov	r0, r4
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	20001cb4 	.word	0x20001cb4

0800b314 <_malloc_r>:
 800b314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b318:	1ccd      	adds	r5, r1, #3
 800b31a:	f025 0503 	bic.w	r5, r5, #3
 800b31e:	3508      	adds	r5, #8
 800b320:	2d0c      	cmp	r5, #12
 800b322:	bf38      	it	cc
 800b324:	250c      	movcc	r5, #12
 800b326:	2d00      	cmp	r5, #0
 800b328:	4607      	mov	r7, r0
 800b32a:	db01      	blt.n	800b330 <_malloc_r+0x1c>
 800b32c:	42a9      	cmp	r1, r5
 800b32e:	d905      	bls.n	800b33c <_malloc_r+0x28>
 800b330:	230c      	movs	r3, #12
 800b332:	2600      	movs	r6, #0
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	4630      	mov	r0, r6
 800b338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b33c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b410 <_malloc_r+0xfc>
 800b340:	f000 f868 	bl	800b414 <__malloc_lock>
 800b344:	f8d8 3000 	ldr.w	r3, [r8]
 800b348:	461c      	mov	r4, r3
 800b34a:	bb5c      	cbnz	r4, 800b3a4 <_malloc_r+0x90>
 800b34c:	4629      	mov	r1, r5
 800b34e:	4638      	mov	r0, r7
 800b350:	f7ff ffc0 	bl	800b2d4 <sbrk_aligned>
 800b354:	1c43      	adds	r3, r0, #1
 800b356:	4604      	mov	r4, r0
 800b358:	d155      	bne.n	800b406 <_malloc_r+0xf2>
 800b35a:	f8d8 4000 	ldr.w	r4, [r8]
 800b35e:	4626      	mov	r6, r4
 800b360:	2e00      	cmp	r6, #0
 800b362:	d145      	bne.n	800b3f0 <_malloc_r+0xdc>
 800b364:	2c00      	cmp	r4, #0
 800b366:	d048      	beq.n	800b3fa <_malloc_r+0xe6>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	4631      	mov	r1, r6
 800b36c:	4638      	mov	r0, r7
 800b36e:	eb04 0903 	add.w	r9, r4, r3
 800b372:	f000 fdff 	bl	800bf74 <_sbrk_r>
 800b376:	4581      	cmp	r9, r0
 800b378:	d13f      	bne.n	800b3fa <_malloc_r+0xe6>
 800b37a:	6821      	ldr	r1, [r4, #0]
 800b37c:	4638      	mov	r0, r7
 800b37e:	1a6d      	subs	r5, r5, r1
 800b380:	4629      	mov	r1, r5
 800b382:	f7ff ffa7 	bl	800b2d4 <sbrk_aligned>
 800b386:	3001      	adds	r0, #1
 800b388:	d037      	beq.n	800b3fa <_malloc_r+0xe6>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	442b      	add	r3, r5
 800b38e:	6023      	str	r3, [r4, #0]
 800b390:	f8d8 3000 	ldr.w	r3, [r8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d038      	beq.n	800b40a <_malloc_r+0xf6>
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	42a2      	cmp	r2, r4
 800b39c:	d12b      	bne.n	800b3f6 <_malloc_r+0xe2>
 800b39e:	2200      	movs	r2, #0
 800b3a0:	605a      	str	r2, [r3, #4]
 800b3a2:	e00f      	b.n	800b3c4 <_malloc_r+0xb0>
 800b3a4:	6822      	ldr	r2, [r4, #0]
 800b3a6:	1b52      	subs	r2, r2, r5
 800b3a8:	d41f      	bmi.n	800b3ea <_malloc_r+0xd6>
 800b3aa:	2a0b      	cmp	r2, #11
 800b3ac:	d917      	bls.n	800b3de <_malloc_r+0xca>
 800b3ae:	1961      	adds	r1, r4, r5
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	6025      	str	r5, [r4, #0]
 800b3b4:	bf18      	it	ne
 800b3b6:	6059      	strne	r1, [r3, #4]
 800b3b8:	6863      	ldr	r3, [r4, #4]
 800b3ba:	bf08      	it	eq
 800b3bc:	f8c8 1000 	streq.w	r1, [r8]
 800b3c0:	5162      	str	r2, [r4, r5]
 800b3c2:	604b      	str	r3, [r1, #4]
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f104 060b 	add.w	r6, r4, #11
 800b3ca:	f000 f829 	bl	800b420 <__malloc_unlock>
 800b3ce:	f026 0607 	bic.w	r6, r6, #7
 800b3d2:	1d23      	adds	r3, r4, #4
 800b3d4:	1af2      	subs	r2, r6, r3
 800b3d6:	d0ae      	beq.n	800b336 <_malloc_r+0x22>
 800b3d8:	1b9b      	subs	r3, r3, r6
 800b3da:	50a3      	str	r3, [r4, r2]
 800b3dc:	e7ab      	b.n	800b336 <_malloc_r+0x22>
 800b3de:	42a3      	cmp	r3, r4
 800b3e0:	6862      	ldr	r2, [r4, #4]
 800b3e2:	d1dd      	bne.n	800b3a0 <_malloc_r+0x8c>
 800b3e4:	f8c8 2000 	str.w	r2, [r8]
 800b3e8:	e7ec      	b.n	800b3c4 <_malloc_r+0xb0>
 800b3ea:	4623      	mov	r3, r4
 800b3ec:	6864      	ldr	r4, [r4, #4]
 800b3ee:	e7ac      	b.n	800b34a <_malloc_r+0x36>
 800b3f0:	4634      	mov	r4, r6
 800b3f2:	6876      	ldr	r6, [r6, #4]
 800b3f4:	e7b4      	b.n	800b360 <_malloc_r+0x4c>
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	e7cc      	b.n	800b394 <_malloc_r+0x80>
 800b3fa:	230c      	movs	r3, #12
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	f000 f80e 	bl	800b420 <__malloc_unlock>
 800b404:	e797      	b.n	800b336 <_malloc_r+0x22>
 800b406:	6025      	str	r5, [r4, #0]
 800b408:	e7dc      	b.n	800b3c4 <_malloc_r+0xb0>
 800b40a:	605b      	str	r3, [r3, #4]
 800b40c:	deff      	udf	#255	; 0xff
 800b40e:	bf00      	nop
 800b410:	20001cb0 	.word	0x20001cb0

0800b414 <__malloc_lock>:
 800b414:	4801      	ldr	r0, [pc, #4]	; (800b41c <__malloc_lock+0x8>)
 800b416:	f000 bdfa 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800b41a:	bf00      	nop
 800b41c:	20001df8 	.word	0x20001df8

0800b420 <__malloc_unlock>:
 800b420:	4801      	ldr	r0, [pc, #4]	; (800b428 <__malloc_unlock+0x8>)
 800b422:	f000 bdf5 	b.w	800c010 <__retarget_lock_release_recursive>
 800b426:	bf00      	nop
 800b428:	20001df8 	.word	0x20001df8

0800b42c <__cvt>:
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b432:	461f      	mov	r7, r3
 800b434:	bfbb      	ittet	lt
 800b436:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b43a:	461f      	movlt	r7, r3
 800b43c:	2300      	movge	r3, #0
 800b43e:	232d      	movlt	r3, #45	; 0x2d
 800b440:	b088      	sub	sp, #32
 800b442:	4614      	mov	r4, r2
 800b444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b446:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b448:	7013      	strb	r3, [r2, #0]
 800b44a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b44c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b450:	f023 0820 	bic.w	r8, r3, #32
 800b454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b458:	d005      	beq.n	800b466 <__cvt+0x3a>
 800b45a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b45e:	d100      	bne.n	800b462 <__cvt+0x36>
 800b460:	3501      	adds	r5, #1
 800b462:	2302      	movs	r3, #2
 800b464:	e000      	b.n	800b468 <__cvt+0x3c>
 800b466:	2303      	movs	r3, #3
 800b468:	aa07      	add	r2, sp, #28
 800b46a:	9204      	str	r2, [sp, #16]
 800b46c:	aa06      	add	r2, sp, #24
 800b46e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b472:	e9cd 3500 	strd	r3, r5, [sp]
 800b476:	4622      	mov	r2, r4
 800b478:	463b      	mov	r3, r7
 800b47a:	f000 fe61 	bl	800c140 <_dtoa_r>
 800b47e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b482:	4606      	mov	r6, r0
 800b484:	d102      	bne.n	800b48c <__cvt+0x60>
 800b486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b488:	07db      	lsls	r3, r3, #31
 800b48a:	d522      	bpl.n	800b4d2 <__cvt+0xa6>
 800b48c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b490:	eb06 0905 	add.w	r9, r6, r5
 800b494:	d110      	bne.n	800b4b8 <__cvt+0x8c>
 800b496:	7833      	ldrb	r3, [r6, #0]
 800b498:	2b30      	cmp	r3, #48	; 0x30
 800b49a:	d10a      	bne.n	800b4b2 <__cvt+0x86>
 800b49c:	2200      	movs	r2, #0
 800b49e:	2300      	movs	r3, #0
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f5 fabc 	bl	8000a20 <__aeabi_dcmpeq>
 800b4a8:	b918      	cbnz	r0, 800b4b2 <__cvt+0x86>
 800b4aa:	f1c5 0501 	rsb	r5, r5, #1
 800b4ae:	f8ca 5000 	str.w	r5, [sl]
 800b4b2:	f8da 3000 	ldr.w	r3, [sl]
 800b4b6:	4499      	add	r9, r3
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4639      	mov	r1, r7
 800b4c0:	f7f5 faae 	bl	8000a20 <__aeabi_dcmpeq>
 800b4c4:	b108      	cbz	r0, 800b4ca <__cvt+0x9e>
 800b4c6:	f8cd 901c 	str.w	r9, [sp, #28]
 800b4ca:	2230      	movs	r2, #48	; 0x30
 800b4cc:	9b07      	ldr	r3, [sp, #28]
 800b4ce:	454b      	cmp	r3, r9
 800b4d0:	d307      	bcc.n	800b4e2 <__cvt+0xb6>
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	9b07      	ldr	r3, [sp, #28]
 800b4d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b4d8:	1b9b      	subs	r3, r3, r6
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	b008      	add	sp, #32
 800b4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e2:	1c59      	adds	r1, r3, #1
 800b4e4:	9107      	str	r1, [sp, #28]
 800b4e6:	701a      	strb	r2, [r3, #0]
 800b4e8:	e7f0      	b.n	800b4cc <__cvt+0xa0>

0800b4ea <__exponent>:
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4ee:	2900      	cmp	r1, #0
 800b4f0:	f803 2b02 	strb.w	r2, [r3], #2
 800b4f4:	bfb6      	itet	lt
 800b4f6:	222d      	movlt	r2, #45	; 0x2d
 800b4f8:	222b      	movge	r2, #43	; 0x2b
 800b4fa:	4249      	neglt	r1, r1
 800b4fc:	2909      	cmp	r1, #9
 800b4fe:	7042      	strb	r2, [r0, #1]
 800b500:	dd2a      	ble.n	800b558 <__exponent+0x6e>
 800b502:	f10d 0207 	add.w	r2, sp, #7
 800b506:	4617      	mov	r7, r2
 800b508:	260a      	movs	r6, #10
 800b50a:	fb91 f5f6 	sdiv	r5, r1, r6
 800b50e:	4694      	mov	ip, r2
 800b510:	fb06 1415 	mls	r4, r6, r5, r1
 800b514:	3430      	adds	r4, #48	; 0x30
 800b516:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b51a:	460c      	mov	r4, r1
 800b51c:	2c63      	cmp	r4, #99	; 0x63
 800b51e:	4629      	mov	r1, r5
 800b520:	f102 32ff 	add.w	r2, r2, #4294967295
 800b524:	dcf1      	bgt.n	800b50a <__exponent+0x20>
 800b526:	3130      	adds	r1, #48	; 0x30
 800b528:	f1ac 0402 	sub.w	r4, ip, #2
 800b52c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b530:	4622      	mov	r2, r4
 800b532:	1c41      	adds	r1, r0, #1
 800b534:	42ba      	cmp	r2, r7
 800b536:	d30a      	bcc.n	800b54e <__exponent+0x64>
 800b538:	f10d 0209 	add.w	r2, sp, #9
 800b53c:	eba2 020c 	sub.w	r2, r2, ip
 800b540:	42bc      	cmp	r4, r7
 800b542:	bf88      	it	hi
 800b544:	2200      	movhi	r2, #0
 800b546:	4413      	add	r3, r2
 800b548:	1a18      	subs	r0, r3, r0
 800b54a:	b003      	add	sp, #12
 800b54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b54e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b552:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b556:	e7ed      	b.n	800b534 <__exponent+0x4a>
 800b558:	2330      	movs	r3, #48	; 0x30
 800b55a:	3130      	adds	r1, #48	; 0x30
 800b55c:	7083      	strb	r3, [r0, #2]
 800b55e:	70c1      	strb	r1, [r0, #3]
 800b560:	1d03      	adds	r3, r0, #4
 800b562:	e7f1      	b.n	800b548 <__exponent+0x5e>

0800b564 <_printf_float>:
 800b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	b091      	sub	sp, #68	; 0x44
 800b56a:	460c      	mov	r4, r1
 800b56c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b570:	4616      	mov	r6, r2
 800b572:	461f      	mov	r7, r3
 800b574:	4605      	mov	r5, r0
 800b576:	f000 fcc5 	bl	800bf04 <_localeconv_r>
 800b57a:	6803      	ldr	r3, [r0, #0]
 800b57c:	4618      	mov	r0, r3
 800b57e:	9309      	str	r3, [sp, #36]	; 0x24
 800b580:	f7f4 fe22 	bl	80001c8 <strlen>
 800b584:	2300      	movs	r3, #0
 800b586:	930e      	str	r3, [sp, #56]	; 0x38
 800b588:	f8d8 3000 	ldr.w	r3, [r8]
 800b58c:	900a      	str	r0, [sp, #40]	; 0x28
 800b58e:	3307      	adds	r3, #7
 800b590:	f023 0307 	bic.w	r3, r3, #7
 800b594:	f103 0208 	add.w	r2, r3, #8
 800b598:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b59c:	f8d4 b000 	ldr.w	fp, [r4]
 800b5a0:	f8c8 2000 	str.w	r2, [r8]
 800b5a4:	e9d3 a800 	ldrd	sl, r8, [r3]
 800b5a8:	4652      	mov	r2, sl
 800b5aa:	4643      	mov	r3, r8
 800b5ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b5b0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800b5b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ba:	4650      	mov	r0, sl
 800b5bc:	4b9c      	ldr	r3, [pc, #624]	; (800b830 <_printf_float+0x2cc>)
 800b5be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5c0:	f7f5 fa60 	bl	8000a84 <__aeabi_dcmpun>
 800b5c4:	bb70      	cbnz	r0, 800b624 <_printf_float+0xc0>
 800b5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	4b98      	ldr	r3, [pc, #608]	; (800b830 <_printf_float+0x2cc>)
 800b5ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5d0:	f7f5 fa3a 	bl	8000a48 <__aeabi_dcmple>
 800b5d4:	bb30      	cbnz	r0, 800b624 <_printf_float+0xc0>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4650      	mov	r0, sl
 800b5dc:	4641      	mov	r1, r8
 800b5de:	f7f5 fa29 	bl	8000a34 <__aeabi_dcmplt>
 800b5e2:	b110      	cbz	r0, 800b5ea <_printf_float+0x86>
 800b5e4:	232d      	movs	r3, #45	; 0x2d
 800b5e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ea:	4a92      	ldr	r2, [pc, #584]	; (800b834 <_printf_float+0x2d0>)
 800b5ec:	4b92      	ldr	r3, [pc, #584]	; (800b838 <_printf_float+0x2d4>)
 800b5ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b5f2:	bf94      	ite	ls
 800b5f4:	4690      	movls	r8, r2
 800b5f6:	4698      	movhi	r8, r3
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	f04f 0a00 	mov.w	sl, #0
 800b5fe:	6123      	str	r3, [r4, #16]
 800b600:	f02b 0304 	bic.w	r3, fp, #4
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	4633      	mov	r3, r6
 800b608:	4621      	mov	r1, r4
 800b60a:	4628      	mov	r0, r5
 800b60c:	9700      	str	r7, [sp, #0]
 800b60e:	aa0f      	add	r2, sp, #60	; 0x3c
 800b610:	f000 f9d6 	bl	800b9c0 <_printf_common>
 800b614:	3001      	adds	r0, #1
 800b616:	f040 8090 	bne.w	800b73a <_printf_float+0x1d6>
 800b61a:	f04f 30ff 	mov.w	r0, #4294967295
 800b61e:	b011      	add	sp, #68	; 0x44
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	4652      	mov	r2, sl
 800b626:	4643      	mov	r3, r8
 800b628:	4650      	mov	r0, sl
 800b62a:	4641      	mov	r1, r8
 800b62c:	f7f5 fa2a 	bl	8000a84 <__aeabi_dcmpun>
 800b630:	b148      	cbz	r0, 800b646 <_printf_float+0xe2>
 800b632:	f1b8 0f00 	cmp.w	r8, #0
 800b636:	bfb8      	it	lt
 800b638:	232d      	movlt	r3, #45	; 0x2d
 800b63a:	4a80      	ldr	r2, [pc, #512]	; (800b83c <_printf_float+0x2d8>)
 800b63c:	bfb8      	it	lt
 800b63e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b642:	4b7f      	ldr	r3, [pc, #508]	; (800b840 <_printf_float+0x2dc>)
 800b644:	e7d3      	b.n	800b5ee <_printf_float+0x8a>
 800b646:	6863      	ldr	r3, [r4, #4]
 800b648:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b64c:	1c5a      	adds	r2, r3, #1
 800b64e:	d142      	bne.n	800b6d6 <_printf_float+0x172>
 800b650:	2306      	movs	r3, #6
 800b652:	6063      	str	r3, [r4, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	9206      	str	r2, [sp, #24]
 800b658:	aa0e      	add	r2, sp, #56	; 0x38
 800b65a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b65e:	aa0d      	add	r2, sp, #52	; 0x34
 800b660:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b664:	9203      	str	r2, [sp, #12]
 800b666:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b66a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b66e:	6023      	str	r3, [r4, #0]
 800b670:	6863      	ldr	r3, [r4, #4]
 800b672:	4652      	mov	r2, sl
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	4628      	mov	r0, r5
 800b678:	4643      	mov	r3, r8
 800b67a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b67c:	f7ff fed6 	bl	800b42c <__cvt>
 800b680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b682:	4680      	mov	r8, r0
 800b684:	2947      	cmp	r1, #71	; 0x47
 800b686:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b688:	d108      	bne.n	800b69c <_printf_float+0x138>
 800b68a:	1cc8      	adds	r0, r1, #3
 800b68c:	db02      	blt.n	800b694 <_printf_float+0x130>
 800b68e:	6863      	ldr	r3, [r4, #4]
 800b690:	4299      	cmp	r1, r3
 800b692:	dd40      	ble.n	800b716 <_printf_float+0x1b2>
 800b694:	f1a9 0902 	sub.w	r9, r9, #2
 800b698:	fa5f f989 	uxtb.w	r9, r9
 800b69c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b6a0:	d81f      	bhi.n	800b6e2 <_printf_float+0x17e>
 800b6a2:	464a      	mov	r2, r9
 800b6a4:	3901      	subs	r1, #1
 800b6a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b6aa:	910d      	str	r1, [sp, #52]	; 0x34
 800b6ac:	f7ff ff1d 	bl	800b4ea <__exponent>
 800b6b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6b2:	4682      	mov	sl, r0
 800b6b4:	1813      	adds	r3, r2, r0
 800b6b6:	2a01      	cmp	r2, #1
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	dc02      	bgt.n	800b6c2 <_printf_float+0x15e>
 800b6bc:	6822      	ldr	r2, [r4, #0]
 800b6be:	07d2      	lsls	r2, r2, #31
 800b6c0:	d501      	bpl.n	800b6c6 <_printf_float+0x162>
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	6123      	str	r3, [r4, #16]
 800b6c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d09b      	beq.n	800b606 <_printf_float+0xa2>
 800b6ce:	232d      	movs	r3, #45	; 0x2d
 800b6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6d4:	e797      	b.n	800b606 <_printf_float+0xa2>
 800b6d6:	2947      	cmp	r1, #71	; 0x47
 800b6d8:	d1bc      	bne.n	800b654 <_printf_float+0xf0>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1ba      	bne.n	800b654 <_printf_float+0xf0>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e7b7      	b.n	800b652 <_printf_float+0xee>
 800b6e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b6e6:	d118      	bne.n	800b71a <_printf_float+0x1b6>
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	6863      	ldr	r3, [r4, #4]
 800b6ec:	dd0b      	ble.n	800b706 <_printf_float+0x1a2>
 800b6ee:	6121      	str	r1, [r4, #16]
 800b6f0:	b913      	cbnz	r3, 800b6f8 <_printf_float+0x194>
 800b6f2:	6822      	ldr	r2, [r4, #0]
 800b6f4:	07d0      	lsls	r0, r2, #31
 800b6f6:	d502      	bpl.n	800b6fe <_printf_float+0x19a>
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	440b      	add	r3, r1
 800b6fc:	6123      	str	r3, [r4, #16]
 800b6fe:	f04f 0a00 	mov.w	sl, #0
 800b702:	65a1      	str	r1, [r4, #88]	; 0x58
 800b704:	e7df      	b.n	800b6c6 <_printf_float+0x162>
 800b706:	b913      	cbnz	r3, 800b70e <_printf_float+0x1aa>
 800b708:	6822      	ldr	r2, [r4, #0]
 800b70a:	07d2      	lsls	r2, r2, #31
 800b70c:	d501      	bpl.n	800b712 <_printf_float+0x1ae>
 800b70e:	3302      	adds	r3, #2
 800b710:	e7f4      	b.n	800b6fc <_printf_float+0x198>
 800b712:	2301      	movs	r3, #1
 800b714:	e7f2      	b.n	800b6fc <_printf_float+0x198>
 800b716:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b71c:	4299      	cmp	r1, r3
 800b71e:	db05      	blt.n	800b72c <_printf_float+0x1c8>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	6121      	str	r1, [r4, #16]
 800b724:	07d8      	lsls	r0, r3, #31
 800b726:	d5ea      	bpl.n	800b6fe <_printf_float+0x19a>
 800b728:	1c4b      	adds	r3, r1, #1
 800b72a:	e7e7      	b.n	800b6fc <_printf_float+0x198>
 800b72c:	2900      	cmp	r1, #0
 800b72e:	bfcc      	ite	gt
 800b730:	2201      	movgt	r2, #1
 800b732:	f1c1 0202 	rsble	r2, r1, #2
 800b736:	4413      	add	r3, r2
 800b738:	e7e0      	b.n	800b6fc <_printf_float+0x198>
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	055a      	lsls	r2, r3, #21
 800b73e:	d407      	bmi.n	800b750 <_printf_float+0x1ec>
 800b740:	6923      	ldr	r3, [r4, #16]
 800b742:	4642      	mov	r2, r8
 800b744:	4631      	mov	r1, r6
 800b746:	4628      	mov	r0, r5
 800b748:	47b8      	blx	r7
 800b74a:	3001      	adds	r0, #1
 800b74c:	d12b      	bne.n	800b7a6 <_printf_float+0x242>
 800b74e:	e764      	b.n	800b61a <_printf_float+0xb6>
 800b750:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b754:	f240 80dd 	bls.w	800b912 <_printf_float+0x3ae>
 800b758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b75c:	2200      	movs	r2, #0
 800b75e:	2300      	movs	r3, #0
 800b760:	f7f5 f95e 	bl	8000a20 <__aeabi_dcmpeq>
 800b764:	2800      	cmp	r0, #0
 800b766:	d033      	beq.n	800b7d0 <_printf_float+0x26c>
 800b768:	2301      	movs	r3, #1
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	4a35      	ldr	r2, [pc, #212]	; (800b844 <_printf_float+0x2e0>)
 800b770:	47b8      	blx	r7
 800b772:	3001      	adds	r0, #1
 800b774:	f43f af51 	beq.w	800b61a <_printf_float+0xb6>
 800b778:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b77c:	429a      	cmp	r2, r3
 800b77e:	db02      	blt.n	800b786 <_printf_float+0x222>
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	07d8      	lsls	r0, r3, #31
 800b784:	d50f      	bpl.n	800b7a6 <_printf_float+0x242>
 800b786:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b78a:	4631      	mov	r1, r6
 800b78c:	4628      	mov	r0, r5
 800b78e:	47b8      	blx	r7
 800b790:	3001      	adds	r0, #1
 800b792:	f43f af42 	beq.w	800b61a <_printf_float+0xb6>
 800b796:	f04f 0800 	mov.w	r8, #0
 800b79a:	f104 091a 	add.w	r9, r4, #26
 800b79e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	4543      	cmp	r3, r8
 800b7a4:	dc09      	bgt.n	800b7ba <_printf_float+0x256>
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	079b      	lsls	r3, r3, #30
 800b7aa:	f100 8104 	bmi.w	800b9b6 <_printf_float+0x452>
 800b7ae:	68e0      	ldr	r0, [r4, #12]
 800b7b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7b2:	4298      	cmp	r0, r3
 800b7b4:	bfb8      	it	lt
 800b7b6:	4618      	movlt	r0, r3
 800b7b8:	e731      	b.n	800b61e <_printf_float+0xba>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	464a      	mov	r2, r9
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	47b8      	blx	r7
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	f43f af28 	beq.w	800b61a <_printf_float+0xb6>
 800b7ca:	f108 0801 	add.w	r8, r8, #1
 800b7ce:	e7e6      	b.n	800b79e <_printf_float+0x23a>
 800b7d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dc38      	bgt.n	800b848 <_printf_float+0x2e4>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4628      	mov	r0, r5
 800b7dc:	4a19      	ldr	r2, [pc, #100]	; (800b844 <_printf_float+0x2e0>)
 800b7de:	47b8      	blx	r7
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	f43f af1a 	beq.w	800b61a <_printf_float+0xb6>
 800b7e6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	d102      	bne.n	800b7f4 <_printf_float+0x290>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	07d9      	lsls	r1, r3, #31
 800b7f2:	d5d8      	bpl.n	800b7a6 <_printf_float+0x242>
 800b7f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	47b8      	blx	r7
 800b7fe:	3001      	adds	r0, #1
 800b800:	f43f af0b 	beq.w	800b61a <_printf_float+0xb6>
 800b804:	f04f 0900 	mov.w	r9, #0
 800b808:	f104 0a1a 	add.w	sl, r4, #26
 800b80c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b80e:	425b      	negs	r3, r3
 800b810:	454b      	cmp	r3, r9
 800b812:	dc01      	bgt.n	800b818 <_printf_float+0x2b4>
 800b814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b816:	e794      	b.n	800b742 <_printf_float+0x1de>
 800b818:	2301      	movs	r3, #1
 800b81a:	4652      	mov	r2, sl
 800b81c:	4631      	mov	r1, r6
 800b81e:	4628      	mov	r0, r5
 800b820:	47b8      	blx	r7
 800b822:	3001      	adds	r0, #1
 800b824:	f43f aef9 	beq.w	800b61a <_printf_float+0xb6>
 800b828:	f109 0901 	add.w	r9, r9, #1
 800b82c:	e7ee      	b.n	800b80c <_printf_float+0x2a8>
 800b82e:	bf00      	nop
 800b830:	7fefffff 	.word	0x7fefffff
 800b834:	0800e464 	.word	0x0800e464
 800b838:	0800e468 	.word	0x0800e468
 800b83c:	0800e46c 	.word	0x0800e46c
 800b840:	0800e470 	.word	0x0800e470
 800b844:	0800e474 	.word	0x0800e474
 800b848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b84a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b84c:	429a      	cmp	r2, r3
 800b84e:	bfa8      	it	ge
 800b850:	461a      	movge	r2, r3
 800b852:	2a00      	cmp	r2, #0
 800b854:	4691      	mov	r9, r2
 800b856:	dc37      	bgt.n	800b8c8 <_printf_float+0x364>
 800b858:	f04f 0b00 	mov.w	fp, #0
 800b85c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b860:	f104 021a 	add.w	r2, r4, #26
 800b864:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b868:	ebaa 0309 	sub.w	r3, sl, r9
 800b86c:	455b      	cmp	r3, fp
 800b86e:	dc33      	bgt.n	800b8d8 <_printf_float+0x374>
 800b870:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b874:	429a      	cmp	r2, r3
 800b876:	db3b      	blt.n	800b8f0 <_printf_float+0x38c>
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	07da      	lsls	r2, r3, #31
 800b87c:	d438      	bmi.n	800b8f0 <_printf_float+0x38c>
 800b87e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b882:	eba2 0903 	sub.w	r9, r2, r3
 800b886:	eba2 020a 	sub.w	r2, r2, sl
 800b88a:	4591      	cmp	r9, r2
 800b88c:	bfa8      	it	ge
 800b88e:	4691      	movge	r9, r2
 800b890:	f1b9 0f00 	cmp.w	r9, #0
 800b894:	dc34      	bgt.n	800b900 <_printf_float+0x39c>
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b89e:	f104 0a1a 	add.w	sl, r4, #26
 800b8a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b8a6:	1a9b      	subs	r3, r3, r2
 800b8a8:	eba3 0309 	sub.w	r3, r3, r9
 800b8ac:	4543      	cmp	r3, r8
 800b8ae:	f77f af7a 	ble.w	800b7a6 <_printf_float+0x242>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	4652      	mov	r2, sl
 800b8b6:	4631      	mov	r1, r6
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	47b8      	blx	r7
 800b8bc:	3001      	adds	r0, #1
 800b8be:	f43f aeac 	beq.w	800b61a <_printf_float+0xb6>
 800b8c2:	f108 0801 	add.w	r8, r8, #1
 800b8c6:	e7ec      	b.n	800b8a2 <_printf_float+0x33e>
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4642      	mov	r2, r8
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	47b8      	blx	r7
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	d1c0      	bne.n	800b858 <_printf_float+0x2f4>
 800b8d6:	e6a0      	b.n	800b61a <_printf_float+0xb6>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4628      	mov	r0, r5
 800b8de:	920b      	str	r2, [sp, #44]	; 0x2c
 800b8e0:	47b8      	blx	r7
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	f43f ae99 	beq.w	800b61a <_printf_float+0xb6>
 800b8e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8ea:	f10b 0b01 	add.w	fp, fp, #1
 800b8ee:	e7b9      	b.n	800b864 <_printf_float+0x300>
 800b8f0:	4631      	mov	r1, r6
 800b8f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	47b8      	blx	r7
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	d1bf      	bne.n	800b87e <_printf_float+0x31a>
 800b8fe:	e68c      	b.n	800b61a <_printf_float+0xb6>
 800b900:	464b      	mov	r3, r9
 800b902:	4631      	mov	r1, r6
 800b904:	4628      	mov	r0, r5
 800b906:	eb08 020a 	add.w	r2, r8, sl
 800b90a:	47b8      	blx	r7
 800b90c:	3001      	adds	r0, #1
 800b90e:	d1c2      	bne.n	800b896 <_printf_float+0x332>
 800b910:	e683      	b.n	800b61a <_printf_float+0xb6>
 800b912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b914:	2a01      	cmp	r2, #1
 800b916:	dc01      	bgt.n	800b91c <_printf_float+0x3b8>
 800b918:	07db      	lsls	r3, r3, #31
 800b91a:	d539      	bpl.n	800b990 <_printf_float+0x42c>
 800b91c:	2301      	movs	r3, #1
 800b91e:	4642      	mov	r2, r8
 800b920:	4631      	mov	r1, r6
 800b922:	4628      	mov	r0, r5
 800b924:	47b8      	blx	r7
 800b926:	3001      	adds	r0, #1
 800b928:	f43f ae77 	beq.w	800b61a <_printf_float+0xb6>
 800b92c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b930:	4631      	mov	r1, r6
 800b932:	4628      	mov	r0, r5
 800b934:	47b8      	blx	r7
 800b936:	3001      	adds	r0, #1
 800b938:	f43f ae6f 	beq.w	800b61a <_printf_float+0xb6>
 800b93c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b940:	2200      	movs	r2, #0
 800b942:	2300      	movs	r3, #0
 800b944:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b948:	f7f5 f86a 	bl	8000a20 <__aeabi_dcmpeq>
 800b94c:	b9d8      	cbnz	r0, 800b986 <_printf_float+0x422>
 800b94e:	f109 33ff 	add.w	r3, r9, #4294967295
 800b952:	f108 0201 	add.w	r2, r8, #1
 800b956:	4631      	mov	r1, r6
 800b958:	4628      	mov	r0, r5
 800b95a:	47b8      	blx	r7
 800b95c:	3001      	adds	r0, #1
 800b95e:	d10e      	bne.n	800b97e <_printf_float+0x41a>
 800b960:	e65b      	b.n	800b61a <_printf_float+0xb6>
 800b962:	2301      	movs	r3, #1
 800b964:	464a      	mov	r2, r9
 800b966:	4631      	mov	r1, r6
 800b968:	4628      	mov	r0, r5
 800b96a:	47b8      	blx	r7
 800b96c:	3001      	adds	r0, #1
 800b96e:	f43f ae54 	beq.w	800b61a <_printf_float+0xb6>
 800b972:	f108 0801 	add.w	r8, r8, #1
 800b976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b978:	3b01      	subs	r3, #1
 800b97a:	4543      	cmp	r3, r8
 800b97c:	dcf1      	bgt.n	800b962 <_printf_float+0x3fe>
 800b97e:	4653      	mov	r3, sl
 800b980:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b984:	e6de      	b.n	800b744 <_printf_float+0x1e0>
 800b986:	f04f 0800 	mov.w	r8, #0
 800b98a:	f104 091a 	add.w	r9, r4, #26
 800b98e:	e7f2      	b.n	800b976 <_printf_float+0x412>
 800b990:	2301      	movs	r3, #1
 800b992:	4642      	mov	r2, r8
 800b994:	e7df      	b.n	800b956 <_printf_float+0x3f2>
 800b996:	2301      	movs	r3, #1
 800b998:	464a      	mov	r2, r9
 800b99a:	4631      	mov	r1, r6
 800b99c:	4628      	mov	r0, r5
 800b99e:	47b8      	blx	r7
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	f43f ae3a 	beq.w	800b61a <_printf_float+0xb6>
 800b9a6:	f108 0801 	add.w	r8, r8, #1
 800b9aa:	68e3      	ldr	r3, [r4, #12]
 800b9ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b9ae:	1a5b      	subs	r3, r3, r1
 800b9b0:	4543      	cmp	r3, r8
 800b9b2:	dcf0      	bgt.n	800b996 <_printf_float+0x432>
 800b9b4:	e6fb      	b.n	800b7ae <_printf_float+0x24a>
 800b9b6:	f04f 0800 	mov.w	r8, #0
 800b9ba:	f104 0919 	add.w	r9, r4, #25
 800b9be:	e7f4      	b.n	800b9aa <_printf_float+0x446>

0800b9c0 <_printf_common>:
 800b9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c4:	4616      	mov	r6, r2
 800b9c6:	4699      	mov	r9, r3
 800b9c8:	688a      	ldr	r2, [r1, #8]
 800b9ca:	690b      	ldr	r3, [r1, #16]
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	bfb8      	it	lt
 800b9d2:	4613      	movlt	r3, r2
 800b9d4:	6033      	str	r3, [r6, #0]
 800b9d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9da:	460c      	mov	r4, r1
 800b9dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9e0:	b10a      	cbz	r2, 800b9e6 <_printf_common+0x26>
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	6033      	str	r3, [r6, #0]
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	0699      	lsls	r1, r3, #26
 800b9ea:	bf42      	ittt	mi
 800b9ec:	6833      	ldrmi	r3, [r6, #0]
 800b9ee:	3302      	addmi	r3, #2
 800b9f0:	6033      	strmi	r3, [r6, #0]
 800b9f2:	6825      	ldr	r5, [r4, #0]
 800b9f4:	f015 0506 	ands.w	r5, r5, #6
 800b9f8:	d106      	bne.n	800ba08 <_printf_common+0x48>
 800b9fa:	f104 0a19 	add.w	sl, r4, #25
 800b9fe:	68e3      	ldr	r3, [r4, #12]
 800ba00:	6832      	ldr	r2, [r6, #0]
 800ba02:	1a9b      	subs	r3, r3, r2
 800ba04:	42ab      	cmp	r3, r5
 800ba06:	dc2b      	bgt.n	800ba60 <_printf_common+0xa0>
 800ba08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba0c:	1e13      	subs	r3, r2, #0
 800ba0e:	6822      	ldr	r2, [r4, #0]
 800ba10:	bf18      	it	ne
 800ba12:	2301      	movne	r3, #1
 800ba14:	0692      	lsls	r2, r2, #26
 800ba16:	d430      	bmi.n	800ba7a <_printf_common+0xba>
 800ba18:	4649      	mov	r1, r9
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba20:	47c0      	blx	r8
 800ba22:	3001      	adds	r0, #1
 800ba24:	d023      	beq.n	800ba6e <_printf_common+0xae>
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	6922      	ldr	r2, [r4, #16]
 800ba2a:	f003 0306 	and.w	r3, r3, #6
 800ba2e:	2b04      	cmp	r3, #4
 800ba30:	bf14      	ite	ne
 800ba32:	2500      	movne	r5, #0
 800ba34:	6833      	ldreq	r3, [r6, #0]
 800ba36:	f04f 0600 	mov.w	r6, #0
 800ba3a:	bf08      	it	eq
 800ba3c:	68e5      	ldreq	r5, [r4, #12]
 800ba3e:	f104 041a 	add.w	r4, r4, #26
 800ba42:	bf08      	it	eq
 800ba44:	1aed      	subeq	r5, r5, r3
 800ba46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ba4a:	bf08      	it	eq
 800ba4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba50:	4293      	cmp	r3, r2
 800ba52:	bfc4      	itt	gt
 800ba54:	1a9b      	subgt	r3, r3, r2
 800ba56:	18ed      	addgt	r5, r5, r3
 800ba58:	42b5      	cmp	r5, r6
 800ba5a:	d11a      	bne.n	800ba92 <_printf_common+0xd2>
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	e008      	b.n	800ba72 <_printf_common+0xb2>
 800ba60:	2301      	movs	r3, #1
 800ba62:	4652      	mov	r2, sl
 800ba64:	4649      	mov	r1, r9
 800ba66:	4638      	mov	r0, r7
 800ba68:	47c0      	blx	r8
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	d103      	bne.n	800ba76 <_printf_common+0xb6>
 800ba6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba76:	3501      	adds	r5, #1
 800ba78:	e7c1      	b.n	800b9fe <_printf_common+0x3e>
 800ba7a:	2030      	movs	r0, #48	; 0x30
 800ba7c:	18e1      	adds	r1, r4, r3
 800ba7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba88:	4422      	add	r2, r4
 800ba8a:	3302      	adds	r3, #2
 800ba8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba90:	e7c2      	b.n	800ba18 <_printf_common+0x58>
 800ba92:	2301      	movs	r3, #1
 800ba94:	4622      	mov	r2, r4
 800ba96:	4649      	mov	r1, r9
 800ba98:	4638      	mov	r0, r7
 800ba9a:	47c0      	blx	r8
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	d0e6      	beq.n	800ba6e <_printf_common+0xae>
 800baa0:	3601      	adds	r6, #1
 800baa2:	e7d9      	b.n	800ba58 <_printf_common+0x98>

0800baa4 <_printf_i>:
 800baa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	7e0f      	ldrb	r7, [r1, #24]
 800baaa:	4691      	mov	r9, r2
 800baac:	2f78      	cmp	r7, #120	; 0x78
 800baae:	4680      	mov	r8, r0
 800bab0:	460c      	mov	r4, r1
 800bab2:	469a      	mov	sl, r3
 800bab4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baba:	d807      	bhi.n	800bacc <_printf_i+0x28>
 800babc:	2f62      	cmp	r7, #98	; 0x62
 800babe:	d80a      	bhi.n	800bad6 <_printf_i+0x32>
 800bac0:	2f00      	cmp	r7, #0
 800bac2:	f000 80d5 	beq.w	800bc70 <_printf_i+0x1cc>
 800bac6:	2f58      	cmp	r7, #88	; 0x58
 800bac8:	f000 80c1 	beq.w	800bc4e <_printf_i+0x1aa>
 800bacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bad4:	e03a      	b.n	800bb4c <_printf_i+0xa8>
 800bad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bada:	2b15      	cmp	r3, #21
 800badc:	d8f6      	bhi.n	800bacc <_printf_i+0x28>
 800bade:	a101      	add	r1, pc, #4	; (adr r1, 800bae4 <_printf_i+0x40>)
 800bae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bae4:	0800bb3d 	.word	0x0800bb3d
 800bae8:	0800bb51 	.word	0x0800bb51
 800baec:	0800bacd 	.word	0x0800bacd
 800baf0:	0800bacd 	.word	0x0800bacd
 800baf4:	0800bacd 	.word	0x0800bacd
 800baf8:	0800bacd 	.word	0x0800bacd
 800bafc:	0800bb51 	.word	0x0800bb51
 800bb00:	0800bacd 	.word	0x0800bacd
 800bb04:	0800bacd 	.word	0x0800bacd
 800bb08:	0800bacd 	.word	0x0800bacd
 800bb0c:	0800bacd 	.word	0x0800bacd
 800bb10:	0800bc57 	.word	0x0800bc57
 800bb14:	0800bb7d 	.word	0x0800bb7d
 800bb18:	0800bc11 	.word	0x0800bc11
 800bb1c:	0800bacd 	.word	0x0800bacd
 800bb20:	0800bacd 	.word	0x0800bacd
 800bb24:	0800bc79 	.word	0x0800bc79
 800bb28:	0800bacd 	.word	0x0800bacd
 800bb2c:	0800bb7d 	.word	0x0800bb7d
 800bb30:	0800bacd 	.word	0x0800bacd
 800bb34:	0800bacd 	.word	0x0800bacd
 800bb38:	0800bc19 	.word	0x0800bc19
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	1d1a      	adds	r2, r3, #4
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	602a      	str	r2, [r5, #0]
 800bb44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e0a0      	b.n	800bc92 <_printf_i+0x1ee>
 800bb50:	6820      	ldr	r0, [r4, #0]
 800bb52:	682b      	ldr	r3, [r5, #0]
 800bb54:	0607      	lsls	r7, r0, #24
 800bb56:	f103 0104 	add.w	r1, r3, #4
 800bb5a:	6029      	str	r1, [r5, #0]
 800bb5c:	d501      	bpl.n	800bb62 <_printf_i+0xbe>
 800bb5e:	681e      	ldr	r6, [r3, #0]
 800bb60:	e003      	b.n	800bb6a <_printf_i+0xc6>
 800bb62:	0646      	lsls	r6, r0, #25
 800bb64:	d5fb      	bpl.n	800bb5e <_printf_i+0xba>
 800bb66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	da03      	bge.n	800bb76 <_printf_i+0xd2>
 800bb6e:	232d      	movs	r3, #45	; 0x2d
 800bb70:	4276      	negs	r6, r6
 800bb72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb76:	230a      	movs	r3, #10
 800bb78:	4859      	ldr	r0, [pc, #356]	; (800bce0 <_printf_i+0x23c>)
 800bb7a:	e012      	b.n	800bba2 <_printf_i+0xfe>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	6820      	ldr	r0, [r4, #0]
 800bb80:	1d19      	adds	r1, r3, #4
 800bb82:	6029      	str	r1, [r5, #0]
 800bb84:	0605      	lsls	r5, r0, #24
 800bb86:	d501      	bpl.n	800bb8c <_printf_i+0xe8>
 800bb88:	681e      	ldr	r6, [r3, #0]
 800bb8a:	e002      	b.n	800bb92 <_printf_i+0xee>
 800bb8c:	0641      	lsls	r1, r0, #25
 800bb8e:	d5fb      	bpl.n	800bb88 <_printf_i+0xe4>
 800bb90:	881e      	ldrh	r6, [r3, #0]
 800bb92:	2f6f      	cmp	r7, #111	; 0x6f
 800bb94:	bf0c      	ite	eq
 800bb96:	2308      	moveq	r3, #8
 800bb98:	230a      	movne	r3, #10
 800bb9a:	4851      	ldr	r0, [pc, #324]	; (800bce0 <_printf_i+0x23c>)
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bba2:	6865      	ldr	r5, [r4, #4]
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	bfa8      	it	ge
 800bba8:	6821      	ldrge	r1, [r4, #0]
 800bbaa:	60a5      	str	r5, [r4, #8]
 800bbac:	bfa4      	itt	ge
 800bbae:	f021 0104 	bicge.w	r1, r1, #4
 800bbb2:	6021      	strge	r1, [r4, #0]
 800bbb4:	b90e      	cbnz	r6, 800bbba <_printf_i+0x116>
 800bbb6:	2d00      	cmp	r5, #0
 800bbb8:	d04b      	beq.n	800bc52 <_printf_i+0x1ae>
 800bbba:	4615      	mov	r5, r2
 800bbbc:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbc0:	fb03 6711 	mls	r7, r3, r1, r6
 800bbc4:	5dc7      	ldrb	r7, [r0, r7]
 800bbc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbca:	4637      	mov	r7, r6
 800bbcc:	42bb      	cmp	r3, r7
 800bbce:	460e      	mov	r6, r1
 800bbd0:	d9f4      	bls.n	800bbbc <_printf_i+0x118>
 800bbd2:	2b08      	cmp	r3, #8
 800bbd4:	d10b      	bne.n	800bbee <_printf_i+0x14a>
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	07de      	lsls	r6, r3, #31
 800bbda:	d508      	bpl.n	800bbee <_printf_i+0x14a>
 800bbdc:	6923      	ldr	r3, [r4, #16]
 800bbde:	6861      	ldr	r1, [r4, #4]
 800bbe0:	4299      	cmp	r1, r3
 800bbe2:	bfde      	ittt	le
 800bbe4:	2330      	movle	r3, #48	; 0x30
 800bbe6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bbee:	1b52      	subs	r2, r2, r5
 800bbf0:	6122      	str	r2, [r4, #16]
 800bbf2:	464b      	mov	r3, r9
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	f8cd a000 	str.w	sl, [sp]
 800bbfc:	aa03      	add	r2, sp, #12
 800bbfe:	f7ff fedf 	bl	800b9c0 <_printf_common>
 800bc02:	3001      	adds	r0, #1
 800bc04:	d14a      	bne.n	800bc9c <_printf_i+0x1f8>
 800bc06:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0a:	b004      	add	sp, #16
 800bc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	f043 0320 	orr.w	r3, r3, #32
 800bc16:	6023      	str	r3, [r4, #0]
 800bc18:	2778      	movs	r7, #120	; 0x78
 800bc1a:	4832      	ldr	r0, [pc, #200]	; (800bce4 <_printf_i+0x240>)
 800bc1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	6829      	ldr	r1, [r5, #0]
 800bc24:	061f      	lsls	r7, r3, #24
 800bc26:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc2a:	d402      	bmi.n	800bc32 <_printf_i+0x18e>
 800bc2c:	065f      	lsls	r7, r3, #25
 800bc2e:	bf48      	it	mi
 800bc30:	b2b6      	uxthmi	r6, r6
 800bc32:	07df      	lsls	r7, r3, #31
 800bc34:	bf48      	it	mi
 800bc36:	f043 0320 	orrmi.w	r3, r3, #32
 800bc3a:	6029      	str	r1, [r5, #0]
 800bc3c:	bf48      	it	mi
 800bc3e:	6023      	strmi	r3, [r4, #0]
 800bc40:	b91e      	cbnz	r6, 800bc4a <_printf_i+0x1a6>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	f023 0320 	bic.w	r3, r3, #32
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	2310      	movs	r3, #16
 800bc4c:	e7a6      	b.n	800bb9c <_printf_i+0xf8>
 800bc4e:	4824      	ldr	r0, [pc, #144]	; (800bce0 <_printf_i+0x23c>)
 800bc50:	e7e4      	b.n	800bc1c <_printf_i+0x178>
 800bc52:	4615      	mov	r5, r2
 800bc54:	e7bd      	b.n	800bbd2 <_printf_i+0x12e>
 800bc56:	682b      	ldr	r3, [r5, #0]
 800bc58:	6826      	ldr	r6, [r4, #0]
 800bc5a:	1d18      	adds	r0, r3, #4
 800bc5c:	6961      	ldr	r1, [r4, #20]
 800bc5e:	6028      	str	r0, [r5, #0]
 800bc60:	0635      	lsls	r5, r6, #24
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	d501      	bpl.n	800bc6a <_printf_i+0x1c6>
 800bc66:	6019      	str	r1, [r3, #0]
 800bc68:	e002      	b.n	800bc70 <_printf_i+0x1cc>
 800bc6a:	0670      	lsls	r0, r6, #25
 800bc6c:	d5fb      	bpl.n	800bc66 <_printf_i+0x1c2>
 800bc6e:	8019      	strh	r1, [r3, #0]
 800bc70:	2300      	movs	r3, #0
 800bc72:	4615      	mov	r5, r2
 800bc74:	6123      	str	r3, [r4, #16]
 800bc76:	e7bc      	b.n	800bbf2 <_printf_i+0x14e>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	1d1a      	adds	r2, r3, #4
 800bc7e:	602a      	str	r2, [r5, #0]
 800bc80:	681d      	ldr	r5, [r3, #0]
 800bc82:	6862      	ldr	r2, [r4, #4]
 800bc84:	4628      	mov	r0, r5
 800bc86:	f000 f9c4 	bl	800c012 <memchr>
 800bc8a:	b108      	cbz	r0, 800bc90 <_printf_i+0x1ec>
 800bc8c:	1b40      	subs	r0, r0, r5
 800bc8e:	6060      	str	r0, [r4, #4]
 800bc90:	6863      	ldr	r3, [r4, #4]
 800bc92:	6123      	str	r3, [r4, #16]
 800bc94:	2300      	movs	r3, #0
 800bc96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc9a:	e7aa      	b.n	800bbf2 <_printf_i+0x14e>
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4649      	mov	r1, r9
 800bca0:	4640      	mov	r0, r8
 800bca2:	6923      	ldr	r3, [r4, #16]
 800bca4:	47d0      	blx	sl
 800bca6:	3001      	adds	r0, #1
 800bca8:	d0ad      	beq.n	800bc06 <_printf_i+0x162>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	079b      	lsls	r3, r3, #30
 800bcae:	d413      	bmi.n	800bcd8 <_printf_i+0x234>
 800bcb0:	68e0      	ldr	r0, [r4, #12]
 800bcb2:	9b03      	ldr	r3, [sp, #12]
 800bcb4:	4298      	cmp	r0, r3
 800bcb6:	bfb8      	it	lt
 800bcb8:	4618      	movlt	r0, r3
 800bcba:	e7a6      	b.n	800bc0a <_printf_i+0x166>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	4649      	mov	r1, r9
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	47d0      	blx	sl
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	d09d      	beq.n	800bc06 <_printf_i+0x162>
 800bcca:	3501      	adds	r5, #1
 800bccc:	68e3      	ldr	r3, [r4, #12]
 800bcce:	9903      	ldr	r1, [sp, #12]
 800bcd0:	1a5b      	subs	r3, r3, r1
 800bcd2:	42ab      	cmp	r3, r5
 800bcd4:	dcf2      	bgt.n	800bcbc <_printf_i+0x218>
 800bcd6:	e7eb      	b.n	800bcb0 <_printf_i+0x20c>
 800bcd8:	2500      	movs	r5, #0
 800bcda:	f104 0619 	add.w	r6, r4, #25
 800bcde:	e7f5      	b.n	800bccc <_printf_i+0x228>
 800bce0:	0800e476 	.word	0x0800e476
 800bce4:	0800e487 	.word	0x0800e487

0800bce8 <std>:
 800bce8:	2300      	movs	r3, #0
 800bcea:	b510      	push	{r4, lr}
 800bcec:	4604      	mov	r4, r0
 800bcee:	e9c0 3300 	strd	r3, r3, [r0]
 800bcf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcf6:	6083      	str	r3, [r0, #8]
 800bcf8:	8181      	strh	r1, [r0, #12]
 800bcfa:	6643      	str	r3, [r0, #100]	; 0x64
 800bcfc:	81c2      	strh	r2, [r0, #14]
 800bcfe:	6183      	str	r3, [r0, #24]
 800bd00:	4619      	mov	r1, r3
 800bd02:	2208      	movs	r2, #8
 800bd04:	305c      	adds	r0, #92	; 0x5c
 800bd06:	f000 f8f4 	bl	800bef2 <memset>
 800bd0a:	4b0d      	ldr	r3, [pc, #52]	; (800bd40 <std+0x58>)
 800bd0c:	6224      	str	r4, [r4, #32]
 800bd0e:	6263      	str	r3, [r4, #36]	; 0x24
 800bd10:	4b0c      	ldr	r3, [pc, #48]	; (800bd44 <std+0x5c>)
 800bd12:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd14:	4b0c      	ldr	r3, [pc, #48]	; (800bd48 <std+0x60>)
 800bd16:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd18:	4b0c      	ldr	r3, [pc, #48]	; (800bd4c <std+0x64>)
 800bd1a:	6323      	str	r3, [r4, #48]	; 0x30
 800bd1c:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <std+0x68>)
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d006      	beq.n	800bd30 <std+0x48>
 800bd22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bd26:	4294      	cmp	r4, r2
 800bd28:	d002      	beq.n	800bd30 <std+0x48>
 800bd2a:	33d0      	adds	r3, #208	; 0xd0
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d105      	bne.n	800bd3c <std+0x54>
 800bd30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd38:	f000 b968 	b.w	800c00c <__retarget_lock_init_recursive>
 800bd3c:	bd10      	pop	{r4, pc}
 800bd3e:	bf00      	nop
 800bd40:	0800be6d 	.word	0x0800be6d
 800bd44:	0800be8f 	.word	0x0800be8f
 800bd48:	0800bec7 	.word	0x0800bec7
 800bd4c:	0800beeb 	.word	0x0800beeb
 800bd50:	20001cb8 	.word	0x20001cb8

0800bd54 <stdio_exit_handler>:
 800bd54:	4a02      	ldr	r2, [pc, #8]	; (800bd60 <stdio_exit_handler+0xc>)
 800bd56:	4903      	ldr	r1, [pc, #12]	; (800bd64 <stdio_exit_handler+0x10>)
 800bd58:	4803      	ldr	r0, [pc, #12]	; (800bd68 <stdio_exit_handler+0x14>)
 800bd5a:	f000 b869 	b.w	800be30 <_fwalk_sglue>
 800bd5e:	bf00      	nop
 800bd60:	200001c8 	.word	0x200001c8
 800bd64:	0800d58d 	.word	0x0800d58d
 800bd68:	200001d4 	.word	0x200001d4

0800bd6c <cleanup_stdio>:
 800bd6c:	6841      	ldr	r1, [r0, #4]
 800bd6e:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <cleanup_stdio+0x34>)
 800bd70:	b510      	push	{r4, lr}
 800bd72:	4299      	cmp	r1, r3
 800bd74:	4604      	mov	r4, r0
 800bd76:	d001      	beq.n	800bd7c <cleanup_stdio+0x10>
 800bd78:	f001 fc08 	bl	800d58c <_fflush_r>
 800bd7c:	68a1      	ldr	r1, [r4, #8]
 800bd7e:	4b09      	ldr	r3, [pc, #36]	; (800bda4 <cleanup_stdio+0x38>)
 800bd80:	4299      	cmp	r1, r3
 800bd82:	d002      	beq.n	800bd8a <cleanup_stdio+0x1e>
 800bd84:	4620      	mov	r0, r4
 800bd86:	f001 fc01 	bl	800d58c <_fflush_r>
 800bd8a:	68e1      	ldr	r1, [r4, #12]
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <cleanup_stdio+0x3c>)
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	d004      	beq.n	800bd9c <cleanup_stdio+0x30>
 800bd92:	4620      	mov	r0, r4
 800bd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd98:	f001 bbf8 	b.w	800d58c <_fflush_r>
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	bf00      	nop
 800bda0:	20001cb8 	.word	0x20001cb8
 800bda4:	20001d20 	.word	0x20001d20
 800bda8:	20001d88 	.word	0x20001d88

0800bdac <global_stdio_init.part.0>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	4b0b      	ldr	r3, [pc, #44]	; (800bddc <global_stdio_init.part.0+0x30>)
 800bdb0:	4c0b      	ldr	r4, [pc, #44]	; (800bde0 <global_stdio_init.part.0+0x34>)
 800bdb2:	4a0c      	ldr	r2, [pc, #48]	; (800bde4 <global_stdio_init.part.0+0x38>)
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	601a      	str	r2, [r3, #0]
 800bdb8:	2104      	movs	r1, #4
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f7ff ff94 	bl	800bce8 <std>
 800bdc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	2109      	movs	r1, #9
 800bdc8:	f7ff ff8e 	bl	800bce8 <std>
 800bdcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdd6:	2112      	movs	r1, #18
 800bdd8:	f7ff bf86 	b.w	800bce8 <std>
 800bddc:	20001df0 	.word	0x20001df0
 800bde0:	20001cb8 	.word	0x20001cb8
 800bde4:	0800bd55 	.word	0x0800bd55

0800bde8 <__sfp_lock_acquire>:
 800bde8:	4801      	ldr	r0, [pc, #4]	; (800bdf0 <__sfp_lock_acquire+0x8>)
 800bdea:	f000 b910 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800bdee:	bf00      	nop
 800bdf0:	20001df9 	.word	0x20001df9

0800bdf4 <__sfp_lock_release>:
 800bdf4:	4801      	ldr	r0, [pc, #4]	; (800bdfc <__sfp_lock_release+0x8>)
 800bdf6:	f000 b90b 	b.w	800c010 <__retarget_lock_release_recursive>
 800bdfa:	bf00      	nop
 800bdfc:	20001df9 	.word	0x20001df9

0800be00 <__sinit>:
 800be00:	b510      	push	{r4, lr}
 800be02:	4604      	mov	r4, r0
 800be04:	f7ff fff0 	bl	800bde8 <__sfp_lock_acquire>
 800be08:	6a23      	ldr	r3, [r4, #32]
 800be0a:	b11b      	cbz	r3, 800be14 <__sinit+0x14>
 800be0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be10:	f7ff bff0 	b.w	800bdf4 <__sfp_lock_release>
 800be14:	4b04      	ldr	r3, [pc, #16]	; (800be28 <__sinit+0x28>)
 800be16:	6223      	str	r3, [r4, #32]
 800be18:	4b04      	ldr	r3, [pc, #16]	; (800be2c <__sinit+0x2c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1f5      	bne.n	800be0c <__sinit+0xc>
 800be20:	f7ff ffc4 	bl	800bdac <global_stdio_init.part.0>
 800be24:	e7f2      	b.n	800be0c <__sinit+0xc>
 800be26:	bf00      	nop
 800be28:	0800bd6d 	.word	0x0800bd6d
 800be2c:	20001df0 	.word	0x20001df0

0800be30 <_fwalk_sglue>:
 800be30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be34:	4607      	mov	r7, r0
 800be36:	4688      	mov	r8, r1
 800be38:	4614      	mov	r4, r2
 800be3a:	2600      	movs	r6, #0
 800be3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be40:	f1b9 0901 	subs.w	r9, r9, #1
 800be44:	d505      	bpl.n	800be52 <_fwalk_sglue+0x22>
 800be46:	6824      	ldr	r4, [r4, #0]
 800be48:	2c00      	cmp	r4, #0
 800be4a:	d1f7      	bne.n	800be3c <_fwalk_sglue+0xc>
 800be4c:	4630      	mov	r0, r6
 800be4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be52:	89ab      	ldrh	r3, [r5, #12]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d907      	bls.n	800be68 <_fwalk_sglue+0x38>
 800be58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be5c:	3301      	adds	r3, #1
 800be5e:	d003      	beq.n	800be68 <_fwalk_sglue+0x38>
 800be60:	4629      	mov	r1, r5
 800be62:	4638      	mov	r0, r7
 800be64:	47c0      	blx	r8
 800be66:	4306      	orrs	r6, r0
 800be68:	3568      	adds	r5, #104	; 0x68
 800be6a:	e7e9      	b.n	800be40 <_fwalk_sglue+0x10>

0800be6c <__sread>:
 800be6c:	b510      	push	{r4, lr}
 800be6e:	460c      	mov	r4, r1
 800be70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be74:	f000 f86c 	bl	800bf50 <_read_r>
 800be78:	2800      	cmp	r0, #0
 800be7a:	bfab      	itete	ge
 800be7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be7e:	89a3      	ldrhlt	r3, [r4, #12]
 800be80:	181b      	addge	r3, r3, r0
 800be82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be86:	bfac      	ite	ge
 800be88:	6563      	strge	r3, [r4, #84]	; 0x54
 800be8a:	81a3      	strhlt	r3, [r4, #12]
 800be8c:	bd10      	pop	{r4, pc}

0800be8e <__swrite>:
 800be8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be92:	461f      	mov	r7, r3
 800be94:	898b      	ldrh	r3, [r1, #12]
 800be96:	4605      	mov	r5, r0
 800be98:	05db      	lsls	r3, r3, #23
 800be9a:	460c      	mov	r4, r1
 800be9c:	4616      	mov	r6, r2
 800be9e:	d505      	bpl.n	800beac <__swrite+0x1e>
 800bea0:	2302      	movs	r3, #2
 800bea2:	2200      	movs	r2, #0
 800bea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea8:	f000 f840 	bl	800bf2c <_lseek_r>
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	4632      	mov	r2, r6
 800beb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beb4:	81a3      	strh	r3, [r4, #12]
 800beb6:	4628      	mov	r0, r5
 800beb8:	463b      	mov	r3, r7
 800beba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bec2:	f000 b867 	b.w	800bf94 <_write_r>

0800bec6 <__sseek>:
 800bec6:	b510      	push	{r4, lr}
 800bec8:	460c      	mov	r4, r1
 800beca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bece:	f000 f82d 	bl	800bf2c <_lseek_r>
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	89a3      	ldrh	r3, [r4, #12]
 800bed6:	bf15      	itete	ne
 800bed8:	6560      	strne	r0, [r4, #84]	; 0x54
 800beda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bee2:	81a3      	strheq	r3, [r4, #12]
 800bee4:	bf18      	it	ne
 800bee6:	81a3      	strhne	r3, [r4, #12]
 800bee8:	bd10      	pop	{r4, pc}

0800beea <__sclose>:
 800beea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beee:	f000 b80d 	b.w	800bf0c <_close_r>

0800bef2 <memset>:
 800bef2:	4603      	mov	r3, r0
 800bef4:	4402      	add	r2, r0
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d100      	bne.n	800befc <memset+0xa>
 800befa:	4770      	bx	lr
 800befc:	f803 1b01 	strb.w	r1, [r3], #1
 800bf00:	e7f9      	b.n	800bef6 <memset+0x4>
	...

0800bf04 <_localeconv_r>:
 800bf04:	4800      	ldr	r0, [pc, #0]	; (800bf08 <_localeconv_r+0x4>)
 800bf06:	4770      	bx	lr
 800bf08:	20000314 	.word	0x20000314

0800bf0c <_close_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4d05      	ldr	r5, [pc, #20]	; (800bf28 <_close_r+0x1c>)
 800bf12:	4604      	mov	r4, r0
 800bf14:	4608      	mov	r0, r1
 800bf16:	602b      	str	r3, [r5, #0]
 800bf18:	f7f6 ff26 	bl	8002d68 <_close>
 800bf1c:	1c43      	adds	r3, r0, #1
 800bf1e:	d102      	bne.n	800bf26 <_close_r+0x1a>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	b103      	cbz	r3, 800bf26 <_close_r+0x1a>
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	bd38      	pop	{r3, r4, r5, pc}
 800bf28:	20001df4 	.word	0x20001df4

0800bf2c <_lseek_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4604      	mov	r4, r0
 800bf30:	4608      	mov	r0, r1
 800bf32:	4611      	mov	r1, r2
 800bf34:	2200      	movs	r2, #0
 800bf36:	4d05      	ldr	r5, [pc, #20]	; (800bf4c <_lseek_r+0x20>)
 800bf38:	602a      	str	r2, [r5, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f7f6 ff38 	bl	8002db0 <_lseek>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_lseek_r+0x1e>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_lseek_r+0x1e>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	20001df4 	.word	0x20001df4

0800bf50 <_read_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4604      	mov	r4, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	4611      	mov	r1, r2
 800bf58:	2200      	movs	r2, #0
 800bf5a:	4d05      	ldr	r5, [pc, #20]	; (800bf70 <_read_r+0x20>)
 800bf5c:	602a      	str	r2, [r5, #0]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f7f6 fec9 	bl	8002cf6 <_read>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d102      	bne.n	800bf6e <_read_r+0x1e>
 800bf68:	682b      	ldr	r3, [r5, #0]
 800bf6a:	b103      	cbz	r3, 800bf6e <_read_r+0x1e>
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	20001df4 	.word	0x20001df4

0800bf74 <_sbrk_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	2300      	movs	r3, #0
 800bf78:	4d05      	ldr	r5, [pc, #20]	; (800bf90 <_sbrk_r+0x1c>)
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	f7f6 ff22 	bl	8002dc8 <_sbrk>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_sbrk_r+0x1a>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_sbrk_r+0x1a>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	20001df4 	.word	0x20001df4

0800bf94 <_write_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4604      	mov	r4, r0
 800bf98:	4608      	mov	r0, r1
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4d05      	ldr	r5, [pc, #20]	; (800bfb4 <_write_r+0x20>)
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f7f6 fec4 	bl	8002d30 <_write>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_write_r+0x1e>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_write_r+0x1e>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	20001df4 	.word	0x20001df4

0800bfb8 <__errno>:
 800bfb8:	4b01      	ldr	r3, [pc, #4]	; (800bfc0 <__errno+0x8>)
 800bfba:	6818      	ldr	r0, [r3, #0]
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	20000220 	.word	0x20000220

0800bfc4 <__libc_init_array>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	2600      	movs	r6, #0
 800bfc8:	4d0c      	ldr	r5, [pc, #48]	; (800bffc <__libc_init_array+0x38>)
 800bfca:	4c0d      	ldr	r4, [pc, #52]	; (800c000 <__libc_init_array+0x3c>)
 800bfcc:	1b64      	subs	r4, r4, r5
 800bfce:	10a4      	asrs	r4, r4, #2
 800bfd0:	42a6      	cmp	r6, r4
 800bfd2:	d109      	bne.n	800bfe8 <__libc_init_array+0x24>
 800bfd4:	f002 f806 	bl	800dfe4 <_init>
 800bfd8:	2600      	movs	r6, #0
 800bfda:	4d0a      	ldr	r5, [pc, #40]	; (800c004 <__libc_init_array+0x40>)
 800bfdc:	4c0a      	ldr	r4, [pc, #40]	; (800c008 <__libc_init_array+0x44>)
 800bfde:	1b64      	subs	r4, r4, r5
 800bfe0:	10a4      	asrs	r4, r4, #2
 800bfe2:	42a6      	cmp	r6, r4
 800bfe4:	d105      	bne.n	800bff2 <__libc_init_array+0x2e>
 800bfe6:	bd70      	pop	{r4, r5, r6, pc}
 800bfe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfec:	4798      	blx	r3
 800bfee:	3601      	adds	r6, #1
 800bff0:	e7ee      	b.n	800bfd0 <__libc_init_array+0xc>
 800bff2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff6:	4798      	blx	r3
 800bff8:	3601      	adds	r6, #1
 800bffa:	e7f2      	b.n	800bfe2 <__libc_init_array+0x1e>
 800bffc:	0800e7dc 	.word	0x0800e7dc
 800c000:	0800e7dc 	.word	0x0800e7dc
 800c004:	0800e7dc 	.word	0x0800e7dc
 800c008:	0800e7e0 	.word	0x0800e7e0

0800c00c <__retarget_lock_init_recursive>:
 800c00c:	4770      	bx	lr

0800c00e <__retarget_lock_acquire_recursive>:
 800c00e:	4770      	bx	lr

0800c010 <__retarget_lock_release_recursive>:
 800c010:	4770      	bx	lr

0800c012 <memchr>:
 800c012:	4603      	mov	r3, r0
 800c014:	b510      	push	{r4, lr}
 800c016:	b2c9      	uxtb	r1, r1
 800c018:	4402      	add	r2, r0
 800c01a:	4293      	cmp	r3, r2
 800c01c:	4618      	mov	r0, r3
 800c01e:	d101      	bne.n	800c024 <memchr+0x12>
 800c020:	2000      	movs	r0, #0
 800c022:	e003      	b.n	800c02c <memchr+0x1a>
 800c024:	7804      	ldrb	r4, [r0, #0]
 800c026:	3301      	adds	r3, #1
 800c028:	428c      	cmp	r4, r1
 800c02a:	d1f6      	bne.n	800c01a <memchr+0x8>
 800c02c:	bd10      	pop	{r4, pc}

0800c02e <quorem>:
 800c02e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c032:	6903      	ldr	r3, [r0, #16]
 800c034:	690c      	ldr	r4, [r1, #16]
 800c036:	4607      	mov	r7, r0
 800c038:	42a3      	cmp	r3, r4
 800c03a:	db7f      	blt.n	800c13c <quorem+0x10e>
 800c03c:	3c01      	subs	r4, #1
 800c03e:	f100 0514 	add.w	r5, r0, #20
 800c042:	f101 0814 	add.w	r8, r1, #20
 800c046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c054:	3301      	adds	r3, #1
 800c056:	429a      	cmp	r2, r3
 800c058:	fbb2 f6f3 	udiv	r6, r2, r3
 800c05c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c064:	d331      	bcc.n	800c0ca <quorem+0x9c>
 800c066:	f04f 0e00 	mov.w	lr, #0
 800c06a:	4640      	mov	r0, r8
 800c06c:	46ac      	mov	ip, r5
 800c06e:	46f2      	mov	sl, lr
 800c070:	f850 2b04 	ldr.w	r2, [r0], #4
 800c074:	b293      	uxth	r3, r2
 800c076:	fb06 e303 	mla	r3, r6, r3, lr
 800c07a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c07e:	0c1a      	lsrs	r2, r3, #16
 800c080:	b29b      	uxth	r3, r3
 800c082:	fb06 220e 	mla	r2, r6, lr, r2
 800c086:	ebaa 0303 	sub.w	r3, sl, r3
 800c08a:	f8dc a000 	ldr.w	sl, [ip]
 800c08e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c092:	fa1f fa8a 	uxth.w	sl, sl
 800c096:	4453      	add	r3, sl
 800c098:	f8dc a000 	ldr.w	sl, [ip]
 800c09c:	b292      	uxth	r2, r2
 800c09e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c0a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0ac:	4581      	cmp	r9, r0
 800c0ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c0b2:	f84c 3b04 	str.w	r3, [ip], #4
 800c0b6:	d2db      	bcs.n	800c070 <quorem+0x42>
 800c0b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c0bc:	b92b      	cbnz	r3, 800c0ca <quorem+0x9c>
 800c0be:	9b01      	ldr	r3, [sp, #4]
 800c0c0:	3b04      	subs	r3, #4
 800c0c2:	429d      	cmp	r5, r3
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	d32d      	bcc.n	800c124 <quorem+0xf6>
 800c0c8:	613c      	str	r4, [r7, #16]
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	f001 f8de 	bl	800d28c <__mcmp>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	db23      	blt.n	800c11c <quorem+0xee>
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	3601      	adds	r6, #1
 800c0da:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0de:	f8d1 c000 	ldr.w	ip, [r1]
 800c0e2:	b293      	uxth	r3, r2
 800c0e4:	1ac3      	subs	r3, r0, r3
 800c0e6:	0c12      	lsrs	r2, r2, #16
 800c0e8:	fa1f f08c 	uxth.w	r0, ip
 800c0ec:	4403      	add	r3, r0
 800c0ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c0f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0fc:	45c1      	cmp	r9, r8
 800c0fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c102:	f841 3b04 	str.w	r3, [r1], #4
 800c106:	d2e8      	bcs.n	800c0da <quorem+0xac>
 800c108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c10c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c110:	b922      	cbnz	r2, 800c11c <quorem+0xee>
 800c112:	3b04      	subs	r3, #4
 800c114:	429d      	cmp	r5, r3
 800c116:	461a      	mov	r2, r3
 800c118:	d30a      	bcc.n	800c130 <quorem+0x102>
 800c11a:	613c      	str	r4, [r7, #16]
 800c11c:	4630      	mov	r0, r6
 800c11e:	b003      	add	sp, #12
 800c120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c124:	6812      	ldr	r2, [r2, #0]
 800c126:	3b04      	subs	r3, #4
 800c128:	2a00      	cmp	r2, #0
 800c12a:	d1cd      	bne.n	800c0c8 <quorem+0x9a>
 800c12c:	3c01      	subs	r4, #1
 800c12e:	e7c8      	b.n	800c0c2 <quorem+0x94>
 800c130:	6812      	ldr	r2, [r2, #0]
 800c132:	3b04      	subs	r3, #4
 800c134:	2a00      	cmp	r2, #0
 800c136:	d1f0      	bne.n	800c11a <quorem+0xec>
 800c138:	3c01      	subs	r4, #1
 800c13a:	e7eb      	b.n	800c114 <quorem+0xe6>
 800c13c:	2000      	movs	r0, #0
 800c13e:	e7ee      	b.n	800c11e <quorem+0xf0>

0800c140 <_dtoa_r>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	4616      	mov	r6, r2
 800c146:	461f      	mov	r7, r3
 800c148:	69c4      	ldr	r4, [r0, #28]
 800c14a:	b099      	sub	sp, #100	; 0x64
 800c14c:	4605      	mov	r5, r0
 800c14e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c152:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c156:	b974      	cbnz	r4, 800c176 <_dtoa_r+0x36>
 800c158:	2010      	movs	r0, #16
 800c15a:	f7ff f8ab 	bl	800b2b4 <malloc>
 800c15e:	4602      	mov	r2, r0
 800c160:	61e8      	str	r0, [r5, #28]
 800c162:	b920      	cbnz	r0, 800c16e <_dtoa_r+0x2e>
 800c164:	21ef      	movs	r1, #239	; 0xef
 800c166:	4bac      	ldr	r3, [pc, #688]	; (800c418 <_dtoa_r+0x2d8>)
 800c168:	48ac      	ldr	r0, [pc, #688]	; (800c41c <_dtoa_r+0x2dc>)
 800c16a:	f001 fa45 	bl	800d5f8 <__assert_func>
 800c16e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c172:	6004      	str	r4, [r0, #0]
 800c174:	60c4      	str	r4, [r0, #12]
 800c176:	69eb      	ldr	r3, [r5, #28]
 800c178:	6819      	ldr	r1, [r3, #0]
 800c17a:	b151      	cbz	r1, 800c192 <_dtoa_r+0x52>
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	2301      	movs	r3, #1
 800c180:	4093      	lsls	r3, r2
 800c182:	604a      	str	r2, [r1, #4]
 800c184:	608b      	str	r3, [r1, #8]
 800c186:	4628      	mov	r0, r5
 800c188:	f000 fe46 	bl	800ce18 <_Bfree>
 800c18c:	2200      	movs	r2, #0
 800c18e:	69eb      	ldr	r3, [r5, #28]
 800c190:	601a      	str	r2, [r3, #0]
 800c192:	1e3b      	subs	r3, r7, #0
 800c194:	bfaf      	iteee	ge
 800c196:	2300      	movge	r3, #0
 800c198:	2201      	movlt	r2, #1
 800c19a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c19e:	9305      	strlt	r3, [sp, #20]
 800c1a0:	bfa8      	it	ge
 800c1a2:	f8c8 3000 	strge.w	r3, [r8]
 800c1a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c1aa:	4b9d      	ldr	r3, [pc, #628]	; (800c420 <_dtoa_r+0x2e0>)
 800c1ac:	bfb8      	it	lt
 800c1ae:	f8c8 2000 	strlt.w	r2, [r8]
 800c1b2:	ea33 0309 	bics.w	r3, r3, r9
 800c1b6:	d119      	bne.n	800c1ec <_dtoa_r+0xac>
 800c1b8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1c4:	4333      	orrs	r3, r6
 800c1c6:	f000 8589 	beq.w	800ccdc <_dtoa_r+0xb9c>
 800c1ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c1cc:	b953      	cbnz	r3, 800c1e4 <_dtoa_r+0xa4>
 800c1ce:	4b95      	ldr	r3, [pc, #596]	; (800c424 <_dtoa_r+0x2e4>)
 800c1d0:	e023      	b.n	800c21a <_dtoa_r+0xda>
 800c1d2:	4b95      	ldr	r3, [pc, #596]	; (800c428 <_dtoa_r+0x2e8>)
 800c1d4:	9303      	str	r3, [sp, #12]
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	9803      	ldr	r0, [sp, #12]
 800c1de:	b019      	add	sp, #100	; 0x64
 800c1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e4:	4b8f      	ldr	r3, [pc, #572]	; (800c424 <_dtoa_r+0x2e4>)
 800c1e6:	9303      	str	r3, [sp, #12]
 800c1e8:	3303      	adds	r3, #3
 800c1ea:	e7f5      	b.n	800c1d8 <_dtoa_r+0x98>
 800c1ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c1f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c1f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f7f4 fc10 	bl	8000a20 <__aeabi_dcmpeq>
 800c200:	4680      	mov	r8, r0
 800c202:	b160      	cbz	r0, 800c21e <_dtoa_r+0xde>
 800c204:	2301      	movs	r3, #1
 800c206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c208:	6013      	str	r3, [r2, #0]
 800c20a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 8562 	beq.w	800ccd6 <_dtoa_r+0xb96>
 800c212:	4b86      	ldr	r3, [pc, #536]	; (800c42c <_dtoa_r+0x2ec>)
 800c214:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c216:	6013      	str	r3, [r2, #0]
 800c218:	3b01      	subs	r3, #1
 800c21a:	9303      	str	r3, [sp, #12]
 800c21c:	e7de      	b.n	800c1dc <_dtoa_r+0x9c>
 800c21e:	ab16      	add	r3, sp, #88	; 0x58
 800c220:	9301      	str	r3, [sp, #4]
 800c222:	ab17      	add	r3, sp, #92	; 0x5c
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	4628      	mov	r0, r5
 800c228:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c22c:	f001 f8d6 	bl	800d3dc <__d2b>
 800c230:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c234:	4682      	mov	sl, r0
 800c236:	2c00      	cmp	r4, #0
 800c238:	d07e      	beq.n	800c338 <_dtoa_r+0x1f8>
 800c23a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c23e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c240:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c248:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c24c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c250:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c254:	4619      	mov	r1, r3
 800c256:	2200      	movs	r2, #0
 800c258:	4b75      	ldr	r3, [pc, #468]	; (800c430 <_dtoa_r+0x2f0>)
 800c25a:	f7f3 ffc1 	bl	80001e0 <__aeabi_dsub>
 800c25e:	a368      	add	r3, pc, #416	; (adr r3, 800c400 <_dtoa_r+0x2c0>)
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f7f4 f974 	bl	8000550 <__aeabi_dmul>
 800c268:	a367      	add	r3, pc, #412	; (adr r3, 800c408 <_dtoa_r+0x2c8>)
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f7f3 ffb9 	bl	80001e4 <__adddf3>
 800c272:	4606      	mov	r6, r0
 800c274:	4620      	mov	r0, r4
 800c276:	460f      	mov	r7, r1
 800c278:	f7f4 f900 	bl	800047c <__aeabi_i2d>
 800c27c:	a364      	add	r3, pc, #400	; (adr r3, 800c410 <_dtoa_r+0x2d0>)
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	f7f4 f965 	bl	8000550 <__aeabi_dmul>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	4630      	mov	r0, r6
 800c28c:	4639      	mov	r1, r7
 800c28e:	f7f3 ffa9 	bl	80001e4 <__adddf3>
 800c292:	4606      	mov	r6, r0
 800c294:	460f      	mov	r7, r1
 800c296:	f7f4 fc0b 	bl	8000ab0 <__aeabi_d2iz>
 800c29a:	2200      	movs	r2, #0
 800c29c:	4683      	mov	fp, r0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	f7f4 fbc6 	bl	8000a34 <__aeabi_dcmplt>
 800c2a8:	b148      	cbz	r0, 800c2be <_dtoa_r+0x17e>
 800c2aa:	4658      	mov	r0, fp
 800c2ac:	f7f4 f8e6 	bl	800047c <__aeabi_i2d>
 800c2b0:	4632      	mov	r2, r6
 800c2b2:	463b      	mov	r3, r7
 800c2b4:	f7f4 fbb4 	bl	8000a20 <__aeabi_dcmpeq>
 800c2b8:	b908      	cbnz	r0, 800c2be <_dtoa_r+0x17e>
 800c2ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2be:	f1bb 0f16 	cmp.w	fp, #22
 800c2c2:	d857      	bhi.n	800c374 <_dtoa_r+0x234>
 800c2c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2c8:	4b5a      	ldr	r3, [pc, #360]	; (800c434 <_dtoa_r+0x2f4>)
 800c2ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	f7f4 fbaf 	bl	8000a34 <__aeabi_dcmplt>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d04e      	beq.n	800c378 <_dtoa_r+0x238>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c2e4:	1b1b      	subs	r3, r3, r4
 800c2e6:	1e5a      	subs	r2, r3, #1
 800c2e8:	bf46      	itte	mi
 800c2ea:	f1c3 0901 	rsbmi	r9, r3, #1
 800c2ee:	2300      	movmi	r3, #0
 800c2f0:	f04f 0900 	movpl.w	r9, #0
 800c2f4:	9209      	str	r2, [sp, #36]	; 0x24
 800c2f6:	bf48      	it	mi
 800c2f8:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c2fa:	f1bb 0f00 	cmp.w	fp, #0
 800c2fe:	db3d      	blt.n	800c37c <_dtoa_r+0x23c>
 800c300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c302:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800c306:	445b      	add	r3, fp
 800c308:	9309      	str	r3, [sp, #36]	; 0x24
 800c30a:	2300      	movs	r3, #0
 800c30c:	930a      	str	r3, [sp, #40]	; 0x28
 800c30e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c310:	2b09      	cmp	r3, #9
 800c312:	d867      	bhi.n	800c3e4 <_dtoa_r+0x2a4>
 800c314:	2b05      	cmp	r3, #5
 800c316:	bfc4      	itt	gt
 800c318:	3b04      	subgt	r3, #4
 800c31a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c31c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c31e:	bfc8      	it	gt
 800c320:	2400      	movgt	r4, #0
 800c322:	f1a3 0302 	sub.w	r3, r3, #2
 800c326:	bfd8      	it	le
 800c328:	2401      	movle	r4, #1
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	f200 8086 	bhi.w	800c43c <_dtoa_r+0x2fc>
 800c330:	e8df f003 	tbb	[pc, r3]
 800c334:	5637392c 	.word	0x5637392c
 800c338:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c33c:	441c      	add	r4, r3
 800c33e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c342:	2b20      	cmp	r3, #32
 800c344:	bfc1      	itttt	gt
 800c346:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c34a:	fa09 f903 	lslgt.w	r9, r9, r3
 800c34e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800c352:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c356:	bfd6      	itet	le
 800c358:	f1c3 0320 	rsble	r3, r3, #32
 800c35c:	ea49 0003 	orrgt.w	r0, r9, r3
 800c360:	fa06 f003 	lslle.w	r0, r6, r3
 800c364:	f7f4 f87a 	bl	800045c <__aeabi_ui2d>
 800c368:	2201      	movs	r2, #1
 800c36a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c36e:	3c01      	subs	r4, #1
 800c370:	9213      	str	r2, [sp, #76]	; 0x4c
 800c372:	e76f      	b.n	800c254 <_dtoa_r+0x114>
 800c374:	2301      	movs	r3, #1
 800c376:	e7b3      	b.n	800c2e0 <_dtoa_r+0x1a0>
 800c378:	900f      	str	r0, [sp, #60]	; 0x3c
 800c37a:	e7b2      	b.n	800c2e2 <_dtoa_r+0x1a2>
 800c37c:	f1cb 0300 	rsb	r3, fp, #0
 800c380:	930a      	str	r3, [sp, #40]	; 0x28
 800c382:	2300      	movs	r3, #0
 800c384:	eba9 090b 	sub.w	r9, r9, fp
 800c388:	930e      	str	r3, [sp, #56]	; 0x38
 800c38a:	e7c0      	b.n	800c30e <_dtoa_r+0x1ce>
 800c38c:	2300      	movs	r3, #0
 800c38e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c392:	2b00      	cmp	r3, #0
 800c394:	dc55      	bgt.n	800c442 <_dtoa_r+0x302>
 800c396:	2301      	movs	r3, #1
 800c398:	461a      	mov	r2, r3
 800c39a:	9306      	str	r3, [sp, #24]
 800c39c:	9308      	str	r3, [sp, #32]
 800c39e:	9223      	str	r2, [sp, #140]	; 0x8c
 800c3a0:	e00b      	b.n	800c3ba <_dtoa_r+0x27a>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e7f3      	b.n	800c38e <_dtoa_r+0x24e>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c3ac:	445b      	add	r3, fp
 800c3ae:	9306      	str	r3, [sp, #24]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	9308      	str	r3, [sp, #32]
 800c3b6:	bfb8      	it	lt
 800c3b8:	2301      	movlt	r3, #1
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	2204      	movs	r2, #4
 800c3be:	69e8      	ldr	r0, [r5, #28]
 800c3c0:	f102 0614 	add.w	r6, r2, #20
 800c3c4:	429e      	cmp	r6, r3
 800c3c6:	d940      	bls.n	800c44a <_dtoa_r+0x30a>
 800c3c8:	6041      	str	r1, [r0, #4]
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f000 fce4 	bl	800cd98 <_Balloc>
 800c3d0:	9003      	str	r0, [sp, #12]
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	d13c      	bne.n	800c450 <_dtoa_r+0x310>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	f240 11af 	movw	r1, #431	; 0x1af
 800c3dc:	4b16      	ldr	r3, [pc, #88]	; (800c438 <_dtoa_r+0x2f8>)
 800c3de:	e6c3      	b.n	800c168 <_dtoa_r+0x28>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e7e1      	b.n	800c3a8 <_dtoa_r+0x268>
 800c3e4:	2401      	movs	r4, #1
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	940b      	str	r4, [sp, #44]	; 0x2c
 800c3ea:	9322      	str	r3, [sp, #136]	; 0x88
 800c3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	9306      	str	r3, [sp, #24]
 800c3f4:	9308      	str	r3, [sp, #32]
 800c3f6:	2312      	movs	r3, #18
 800c3f8:	e7d1      	b.n	800c39e <_dtoa_r+0x25e>
 800c3fa:	bf00      	nop
 800c3fc:	f3af 8000 	nop.w
 800c400:	636f4361 	.word	0x636f4361
 800c404:	3fd287a7 	.word	0x3fd287a7
 800c408:	8b60c8b3 	.word	0x8b60c8b3
 800c40c:	3fc68a28 	.word	0x3fc68a28
 800c410:	509f79fb 	.word	0x509f79fb
 800c414:	3fd34413 	.word	0x3fd34413
 800c418:	0800e4a5 	.word	0x0800e4a5
 800c41c:	0800e4bc 	.word	0x0800e4bc
 800c420:	7ff00000 	.word	0x7ff00000
 800c424:	0800e4a1 	.word	0x0800e4a1
 800c428:	0800e498 	.word	0x0800e498
 800c42c:	0800e475 	.word	0x0800e475
 800c430:	3ff80000 	.word	0x3ff80000
 800c434:	0800e5a8 	.word	0x0800e5a8
 800c438:	0800e514 	.word	0x0800e514
 800c43c:	2301      	movs	r3, #1
 800c43e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c440:	e7d4      	b.n	800c3ec <_dtoa_r+0x2ac>
 800c442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c444:	9306      	str	r3, [sp, #24]
 800c446:	9308      	str	r3, [sp, #32]
 800c448:	e7b7      	b.n	800c3ba <_dtoa_r+0x27a>
 800c44a:	3101      	adds	r1, #1
 800c44c:	0052      	lsls	r2, r2, #1
 800c44e:	e7b7      	b.n	800c3c0 <_dtoa_r+0x280>
 800c450:	69eb      	ldr	r3, [r5, #28]
 800c452:	9a03      	ldr	r2, [sp, #12]
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	9b08      	ldr	r3, [sp, #32]
 800c458:	2b0e      	cmp	r3, #14
 800c45a:	f200 80a8 	bhi.w	800c5ae <_dtoa_r+0x46e>
 800c45e:	2c00      	cmp	r4, #0
 800c460:	f000 80a5 	beq.w	800c5ae <_dtoa_r+0x46e>
 800c464:	f1bb 0f00 	cmp.w	fp, #0
 800c468:	dd34      	ble.n	800c4d4 <_dtoa_r+0x394>
 800c46a:	4b9a      	ldr	r3, [pc, #616]	; (800c6d4 <_dtoa_r+0x594>)
 800c46c:	f00b 020f 	and.w	r2, fp, #15
 800c470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c474:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c47c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c480:	ea4f 142b 	mov.w	r4, fp, asr #4
 800c484:	d016      	beq.n	800c4b4 <_dtoa_r+0x374>
 800c486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c48a:	4b93      	ldr	r3, [pc, #588]	; (800c6d8 <_dtoa_r+0x598>)
 800c48c:	2703      	movs	r7, #3
 800c48e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c492:	f7f4 f987 	bl	80007a4 <__aeabi_ddiv>
 800c496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c49a:	f004 040f 	and.w	r4, r4, #15
 800c49e:	4e8e      	ldr	r6, [pc, #568]	; (800c6d8 <_dtoa_r+0x598>)
 800c4a0:	b954      	cbnz	r4, 800c4b8 <_dtoa_r+0x378>
 800c4a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4aa:	f7f4 f97b 	bl	80007a4 <__aeabi_ddiv>
 800c4ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4b2:	e029      	b.n	800c508 <_dtoa_r+0x3c8>
 800c4b4:	2702      	movs	r7, #2
 800c4b6:	e7f2      	b.n	800c49e <_dtoa_r+0x35e>
 800c4b8:	07e1      	lsls	r1, r4, #31
 800c4ba:	d508      	bpl.n	800c4ce <_dtoa_r+0x38e>
 800c4bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c4c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c4c4:	f7f4 f844 	bl	8000550 <__aeabi_dmul>
 800c4c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c4cc:	3701      	adds	r7, #1
 800c4ce:	1064      	asrs	r4, r4, #1
 800c4d0:	3608      	adds	r6, #8
 800c4d2:	e7e5      	b.n	800c4a0 <_dtoa_r+0x360>
 800c4d4:	f000 80a5 	beq.w	800c622 <_dtoa_r+0x4e2>
 800c4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c4dc:	f1cb 0400 	rsb	r4, fp, #0
 800c4e0:	4b7c      	ldr	r3, [pc, #496]	; (800c6d4 <_dtoa_r+0x594>)
 800c4e2:	f004 020f 	and.w	r2, r4, #15
 800c4e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ee:	f7f4 f82f 	bl	8000550 <__aeabi_dmul>
 800c4f2:	2702      	movs	r7, #2
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4fa:	4e77      	ldr	r6, [pc, #476]	; (800c6d8 <_dtoa_r+0x598>)
 800c4fc:	1124      	asrs	r4, r4, #4
 800c4fe:	2c00      	cmp	r4, #0
 800c500:	f040 8084 	bne.w	800c60c <_dtoa_r+0x4cc>
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1d2      	bne.n	800c4ae <_dtoa_r+0x36e>
 800c508:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c50c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c512:	2b00      	cmp	r3, #0
 800c514:	f000 8087 	beq.w	800c626 <_dtoa_r+0x4e6>
 800c518:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c51c:	2200      	movs	r2, #0
 800c51e:	4b6f      	ldr	r3, [pc, #444]	; (800c6dc <_dtoa_r+0x59c>)
 800c520:	f7f4 fa88 	bl	8000a34 <__aeabi_dcmplt>
 800c524:	2800      	cmp	r0, #0
 800c526:	d07e      	beq.n	800c626 <_dtoa_r+0x4e6>
 800c528:	9b08      	ldr	r3, [sp, #32]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d07b      	beq.n	800c626 <_dtoa_r+0x4e6>
 800c52e:	9b06      	ldr	r3, [sp, #24]
 800c530:	2b00      	cmp	r3, #0
 800c532:	dd38      	ble.n	800c5a6 <_dtoa_r+0x466>
 800c534:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c538:	2200      	movs	r2, #0
 800c53a:	4b69      	ldr	r3, [pc, #420]	; (800c6e0 <_dtoa_r+0x5a0>)
 800c53c:	f7f4 f808 	bl	8000550 <__aeabi_dmul>
 800c540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c544:	9c06      	ldr	r4, [sp, #24]
 800c546:	f10b 38ff 	add.w	r8, fp, #4294967295
 800c54a:	3701      	adds	r7, #1
 800c54c:	4638      	mov	r0, r7
 800c54e:	f7f3 ff95 	bl	800047c <__aeabi_i2d>
 800c552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c556:	f7f3 fffb 	bl	8000550 <__aeabi_dmul>
 800c55a:	2200      	movs	r2, #0
 800c55c:	4b61      	ldr	r3, [pc, #388]	; (800c6e4 <_dtoa_r+0x5a4>)
 800c55e:	f7f3 fe41 	bl	80001e4 <__adddf3>
 800c562:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c56a:	9611      	str	r6, [sp, #68]	; 0x44
 800c56c:	2c00      	cmp	r4, #0
 800c56e:	d15d      	bne.n	800c62c <_dtoa_r+0x4ec>
 800c570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c574:	2200      	movs	r2, #0
 800c576:	4b5c      	ldr	r3, [pc, #368]	; (800c6e8 <_dtoa_r+0x5a8>)
 800c578:	f7f3 fe32 	bl	80001e0 <__aeabi_dsub>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c584:	4633      	mov	r3, r6
 800c586:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c588:	f7f4 fa72 	bl	8000a70 <__aeabi_dcmpgt>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f040 8295 	bne.w	800cabc <_dtoa_r+0x97c>
 800c592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c596:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c598:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c59c:	f7f4 fa4a 	bl	8000a34 <__aeabi_dcmplt>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	f040 8289 	bne.w	800cab8 <_dtoa_r+0x978>
 800c5a6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c5aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c5ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f2c0 8151 	blt.w	800c858 <_dtoa_r+0x718>
 800c5b6:	f1bb 0f0e 	cmp.w	fp, #14
 800c5ba:	f300 814d 	bgt.w	800c858 <_dtoa_r+0x718>
 800c5be:	4b45      	ldr	r3, [pc, #276]	; (800c6d4 <_dtoa_r+0x594>)
 800c5c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c5c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c5cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f280 80da 	bge.w	800c788 <_dtoa_r+0x648>
 800c5d4:	9b08      	ldr	r3, [sp, #32]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f300 80d6 	bgt.w	800c788 <_dtoa_r+0x648>
 800c5dc:	f040 826b 	bne.w	800cab6 <_dtoa_r+0x976>
 800c5e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	4b40      	ldr	r3, [pc, #256]	; (800c6e8 <_dtoa_r+0x5a8>)
 800c5e8:	f7f3 ffb2 	bl	8000550 <__aeabi_dmul>
 800c5ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5f0:	f7f4 fa34 	bl	8000a5c <__aeabi_dcmpge>
 800c5f4:	9c08      	ldr	r4, [sp, #32]
 800c5f6:	4626      	mov	r6, r4
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	f040 8241 	bne.w	800ca80 <_dtoa_r+0x940>
 800c5fe:	2331      	movs	r3, #49	; 0x31
 800c600:	9f03      	ldr	r7, [sp, #12]
 800c602:	f10b 0b01 	add.w	fp, fp, #1
 800c606:	f807 3b01 	strb.w	r3, [r7], #1
 800c60a:	e23d      	b.n	800ca88 <_dtoa_r+0x948>
 800c60c:	07e2      	lsls	r2, r4, #31
 800c60e:	d505      	bpl.n	800c61c <_dtoa_r+0x4dc>
 800c610:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c614:	f7f3 ff9c 	bl	8000550 <__aeabi_dmul>
 800c618:	2301      	movs	r3, #1
 800c61a:	3701      	adds	r7, #1
 800c61c:	1064      	asrs	r4, r4, #1
 800c61e:	3608      	adds	r6, #8
 800c620:	e76d      	b.n	800c4fe <_dtoa_r+0x3be>
 800c622:	2702      	movs	r7, #2
 800c624:	e770      	b.n	800c508 <_dtoa_r+0x3c8>
 800c626:	46d8      	mov	r8, fp
 800c628:	9c08      	ldr	r4, [sp, #32]
 800c62a:	e78f      	b.n	800c54c <_dtoa_r+0x40c>
 800c62c:	9903      	ldr	r1, [sp, #12]
 800c62e:	4b29      	ldr	r3, [pc, #164]	; (800c6d4 <_dtoa_r+0x594>)
 800c630:	4421      	add	r1, r4
 800c632:	9112      	str	r1, [sp, #72]	; 0x48
 800c634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c636:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c63a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c63e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c642:	2900      	cmp	r1, #0
 800c644:	d054      	beq.n	800c6f0 <_dtoa_r+0x5b0>
 800c646:	2000      	movs	r0, #0
 800c648:	4928      	ldr	r1, [pc, #160]	; (800c6ec <_dtoa_r+0x5ac>)
 800c64a:	f7f4 f8ab 	bl	80007a4 <__aeabi_ddiv>
 800c64e:	463b      	mov	r3, r7
 800c650:	4632      	mov	r2, r6
 800c652:	f7f3 fdc5 	bl	80001e0 <__aeabi_dsub>
 800c656:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c65a:	9f03      	ldr	r7, [sp, #12]
 800c65c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c660:	f7f4 fa26 	bl	8000ab0 <__aeabi_d2iz>
 800c664:	4604      	mov	r4, r0
 800c666:	f7f3 ff09 	bl	800047c <__aeabi_i2d>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c672:	f7f3 fdb5 	bl	80001e0 <__aeabi_dsub>
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	3430      	adds	r4, #48	; 0x30
 800c67c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c680:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c684:	f807 4b01 	strb.w	r4, [r7], #1
 800c688:	f7f4 f9d4 	bl	8000a34 <__aeabi_dcmplt>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d173      	bne.n	800c778 <_dtoa_r+0x638>
 800c690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c694:	2000      	movs	r0, #0
 800c696:	4911      	ldr	r1, [pc, #68]	; (800c6dc <_dtoa_r+0x59c>)
 800c698:	f7f3 fda2 	bl	80001e0 <__aeabi_dsub>
 800c69c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c6a0:	f7f4 f9c8 	bl	8000a34 <__aeabi_dcmplt>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	f040 80b6 	bne.w	800c816 <_dtoa_r+0x6d6>
 800c6aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c6ac:	429f      	cmp	r7, r3
 800c6ae:	f43f af7a 	beq.w	800c5a6 <_dtoa_r+0x466>
 800c6b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <_dtoa_r+0x5a0>)
 800c6ba:	f7f3 ff49 	bl	8000550 <__aeabi_dmul>
 800c6be:	2200      	movs	r2, #0
 800c6c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c6c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6c8:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <_dtoa_r+0x5a0>)
 800c6ca:	f7f3 ff41 	bl	8000550 <__aeabi_dmul>
 800c6ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6d2:	e7c3      	b.n	800c65c <_dtoa_r+0x51c>
 800c6d4:	0800e5a8 	.word	0x0800e5a8
 800c6d8:	0800e580 	.word	0x0800e580
 800c6dc:	3ff00000 	.word	0x3ff00000
 800c6e0:	40240000 	.word	0x40240000
 800c6e4:	401c0000 	.word	0x401c0000
 800c6e8:	40140000 	.word	0x40140000
 800c6ec:	3fe00000 	.word	0x3fe00000
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	f7f3 ff2c 	bl	8000550 <__aeabi_dmul>
 800c6f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c6fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c6fe:	9c03      	ldr	r4, [sp, #12]
 800c700:	9314      	str	r3, [sp, #80]	; 0x50
 800c702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c706:	f7f4 f9d3 	bl	8000ab0 <__aeabi_d2iz>
 800c70a:	9015      	str	r0, [sp, #84]	; 0x54
 800c70c:	f7f3 feb6 	bl	800047c <__aeabi_i2d>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c718:	f7f3 fd62 	bl	80001e0 <__aeabi_dsub>
 800c71c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c71e:	4606      	mov	r6, r0
 800c720:	3330      	adds	r3, #48	; 0x30
 800c722:	f804 3b01 	strb.w	r3, [r4], #1
 800c726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c728:	460f      	mov	r7, r1
 800c72a:	429c      	cmp	r4, r3
 800c72c:	f04f 0200 	mov.w	r2, #0
 800c730:	d124      	bne.n	800c77c <_dtoa_r+0x63c>
 800c732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c736:	4baf      	ldr	r3, [pc, #700]	; (800c9f4 <_dtoa_r+0x8b4>)
 800c738:	f7f3 fd54 	bl	80001e4 <__adddf3>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4630      	mov	r0, r6
 800c742:	4639      	mov	r1, r7
 800c744:	f7f4 f994 	bl	8000a70 <__aeabi_dcmpgt>
 800c748:	2800      	cmp	r0, #0
 800c74a:	d163      	bne.n	800c814 <_dtoa_r+0x6d4>
 800c74c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c750:	2000      	movs	r0, #0
 800c752:	49a8      	ldr	r1, [pc, #672]	; (800c9f4 <_dtoa_r+0x8b4>)
 800c754:	f7f3 fd44 	bl	80001e0 <__aeabi_dsub>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	4630      	mov	r0, r6
 800c75e:	4639      	mov	r1, r7
 800c760:	f7f4 f968 	bl	8000a34 <__aeabi_dcmplt>
 800c764:	2800      	cmp	r0, #0
 800c766:	f43f af1e 	beq.w	800c5a6 <_dtoa_r+0x466>
 800c76a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c76c:	1e7b      	subs	r3, r7, #1
 800c76e:	9314      	str	r3, [sp, #80]	; 0x50
 800c770:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c774:	2b30      	cmp	r3, #48	; 0x30
 800c776:	d0f8      	beq.n	800c76a <_dtoa_r+0x62a>
 800c778:	46c3      	mov	fp, r8
 800c77a:	e03b      	b.n	800c7f4 <_dtoa_r+0x6b4>
 800c77c:	4b9e      	ldr	r3, [pc, #632]	; (800c9f8 <_dtoa_r+0x8b8>)
 800c77e:	f7f3 fee7 	bl	8000550 <__aeabi_dmul>
 800c782:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c786:	e7bc      	b.n	800c702 <_dtoa_r+0x5c2>
 800c788:	9f03      	ldr	r7, [sp, #12]
 800c78a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c78e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c792:	4640      	mov	r0, r8
 800c794:	4649      	mov	r1, r9
 800c796:	f7f4 f805 	bl	80007a4 <__aeabi_ddiv>
 800c79a:	f7f4 f989 	bl	8000ab0 <__aeabi_d2iz>
 800c79e:	4604      	mov	r4, r0
 800c7a0:	f7f3 fe6c 	bl	800047c <__aeabi_i2d>
 800c7a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7a8:	f7f3 fed2 	bl	8000550 <__aeabi_dmul>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	4640      	mov	r0, r8
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	f7f3 fd14 	bl	80001e0 <__aeabi_dsub>
 800c7b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c7bc:	f807 6b01 	strb.w	r6, [r7], #1
 800c7c0:	9e03      	ldr	r6, [sp, #12]
 800c7c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c7c6:	1bbe      	subs	r6, r7, r6
 800c7c8:	45b4      	cmp	ip, r6
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	d136      	bne.n	800c83e <_dtoa_r+0x6fe>
 800c7d0:	f7f3 fd08 	bl	80001e4 <__adddf3>
 800c7d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7d8:	4680      	mov	r8, r0
 800c7da:	4689      	mov	r9, r1
 800c7dc:	f7f4 f948 	bl	8000a70 <__aeabi_dcmpgt>
 800c7e0:	bb58      	cbnz	r0, 800c83a <_dtoa_r+0x6fa>
 800c7e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	f7f4 f919 	bl	8000a20 <__aeabi_dcmpeq>
 800c7ee:	b108      	cbz	r0, 800c7f4 <_dtoa_r+0x6b4>
 800c7f0:	07e3      	lsls	r3, r4, #31
 800c7f2:	d422      	bmi.n	800c83a <_dtoa_r+0x6fa>
 800c7f4:	4651      	mov	r1, sl
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	f000 fb0e 	bl	800ce18 <_Bfree>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c800:	703b      	strb	r3, [r7, #0]
 800c802:	f10b 0301 	add.w	r3, fp, #1
 800c806:	6013      	str	r3, [r2, #0]
 800c808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f43f ace6 	beq.w	800c1dc <_dtoa_r+0x9c>
 800c810:	601f      	str	r7, [r3, #0]
 800c812:	e4e3      	b.n	800c1dc <_dtoa_r+0x9c>
 800c814:	4627      	mov	r7, r4
 800c816:	463b      	mov	r3, r7
 800c818:	461f      	mov	r7, r3
 800c81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c81e:	2a39      	cmp	r2, #57	; 0x39
 800c820:	d107      	bne.n	800c832 <_dtoa_r+0x6f2>
 800c822:	9a03      	ldr	r2, [sp, #12]
 800c824:	429a      	cmp	r2, r3
 800c826:	d1f7      	bne.n	800c818 <_dtoa_r+0x6d8>
 800c828:	2230      	movs	r2, #48	; 0x30
 800c82a:	9903      	ldr	r1, [sp, #12]
 800c82c:	f108 0801 	add.w	r8, r8, #1
 800c830:	700a      	strb	r2, [r1, #0]
 800c832:	781a      	ldrb	r2, [r3, #0]
 800c834:	3201      	adds	r2, #1
 800c836:	701a      	strb	r2, [r3, #0]
 800c838:	e79e      	b.n	800c778 <_dtoa_r+0x638>
 800c83a:	46d8      	mov	r8, fp
 800c83c:	e7eb      	b.n	800c816 <_dtoa_r+0x6d6>
 800c83e:	2200      	movs	r2, #0
 800c840:	4b6d      	ldr	r3, [pc, #436]	; (800c9f8 <_dtoa_r+0x8b8>)
 800c842:	f7f3 fe85 	bl	8000550 <__aeabi_dmul>
 800c846:	2200      	movs	r2, #0
 800c848:	2300      	movs	r3, #0
 800c84a:	4680      	mov	r8, r0
 800c84c:	4689      	mov	r9, r1
 800c84e:	f7f4 f8e7 	bl	8000a20 <__aeabi_dcmpeq>
 800c852:	2800      	cmp	r0, #0
 800c854:	d09b      	beq.n	800c78e <_dtoa_r+0x64e>
 800c856:	e7cd      	b.n	800c7f4 <_dtoa_r+0x6b4>
 800c858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	f000 80c4 	beq.w	800c9e8 <_dtoa_r+0x8a8>
 800c860:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c862:	2a01      	cmp	r2, #1
 800c864:	f300 80a8 	bgt.w	800c9b8 <_dtoa_r+0x878>
 800c868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c86a:	2a00      	cmp	r2, #0
 800c86c:	f000 80a0 	beq.w	800c9b0 <_dtoa_r+0x870>
 800c870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c874:	464f      	mov	r7, r9
 800c876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c87a:	2101      	movs	r1, #1
 800c87c:	441a      	add	r2, r3
 800c87e:	4628      	mov	r0, r5
 800c880:	4499      	add	r9, r3
 800c882:	9209      	str	r2, [sp, #36]	; 0x24
 800c884:	f000 fb7e 	bl	800cf84 <__i2b>
 800c888:	4606      	mov	r6, r0
 800c88a:	b15f      	cbz	r7, 800c8a4 <_dtoa_r+0x764>
 800c88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c88e:	2b00      	cmp	r3, #0
 800c890:	dd08      	ble.n	800c8a4 <_dtoa_r+0x764>
 800c892:	42bb      	cmp	r3, r7
 800c894:	bfa8      	it	ge
 800c896:	463b      	movge	r3, r7
 800c898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c89a:	eba9 0903 	sub.w	r9, r9, r3
 800c89e:	1aff      	subs	r7, r7, r3
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a6:	b1f3      	cbz	r3, 800c8e6 <_dtoa_r+0x7a6>
 800c8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f000 80a0 	beq.w	800c9f0 <_dtoa_r+0x8b0>
 800c8b0:	2c00      	cmp	r4, #0
 800c8b2:	dd10      	ble.n	800c8d6 <_dtoa_r+0x796>
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f000 fc21 	bl	800d100 <__pow5mult>
 800c8be:	4652      	mov	r2, sl
 800c8c0:	4601      	mov	r1, r0
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	f000 fb73 	bl	800cfb0 <__multiply>
 800c8ca:	4680      	mov	r8, r0
 800c8cc:	4651      	mov	r1, sl
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f000 faa2 	bl	800ce18 <_Bfree>
 800c8d4:	46c2      	mov	sl, r8
 800c8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d8:	1b1a      	subs	r2, r3, r4
 800c8da:	d004      	beq.n	800c8e6 <_dtoa_r+0x7a6>
 800c8dc:	4651      	mov	r1, sl
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 fc0e 	bl	800d100 <__pow5mult>
 800c8e4:	4682      	mov	sl, r0
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	f000 fb4b 	bl	800cf84 <__i2b>
 800c8ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f340 8082 	ble.w	800c9fc <_dtoa_r+0x8bc>
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4601      	mov	r1, r0
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f000 fbff 	bl	800d100 <__pow5mult>
 800c902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c904:	4604      	mov	r4, r0
 800c906:	2b01      	cmp	r3, #1
 800c908:	dd7b      	ble.n	800ca02 <_dtoa_r+0x8c2>
 800c90a:	f04f 0800 	mov.w	r8, #0
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c914:	6918      	ldr	r0, [r3, #16]
 800c916:	f000 fae7 	bl	800cee8 <__hi0bits>
 800c91a:	f1c0 0020 	rsb	r0, r0, #32
 800c91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c920:	4418      	add	r0, r3
 800c922:	f010 001f 	ands.w	r0, r0, #31
 800c926:	f000 8092 	beq.w	800ca4e <_dtoa_r+0x90e>
 800c92a:	f1c0 0320 	rsb	r3, r0, #32
 800c92e:	2b04      	cmp	r3, #4
 800c930:	f340 8085 	ble.w	800ca3e <_dtoa_r+0x8fe>
 800c934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c936:	f1c0 001c 	rsb	r0, r0, #28
 800c93a:	4403      	add	r3, r0
 800c93c:	4481      	add	r9, r0
 800c93e:	4407      	add	r7, r0
 800c940:	9309      	str	r3, [sp, #36]	; 0x24
 800c942:	f1b9 0f00 	cmp.w	r9, #0
 800c946:	dd05      	ble.n	800c954 <_dtoa_r+0x814>
 800c948:	4651      	mov	r1, sl
 800c94a:	464a      	mov	r2, r9
 800c94c:	4628      	mov	r0, r5
 800c94e:	f000 fc31 	bl	800d1b4 <__lshift>
 800c952:	4682      	mov	sl, r0
 800c954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c956:	2b00      	cmp	r3, #0
 800c958:	dd05      	ble.n	800c966 <_dtoa_r+0x826>
 800c95a:	4621      	mov	r1, r4
 800c95c:	461a      	mov	r2, r3
 800c95e:	4628      	mov	r0, r5
 800c960:	f000 fc28 	bl	800d1b4 <__lshift>
 800c964:	4604      	mov	r4, r0
 800c966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d072      	beq.n	800ca52 <_dtoa_r+0x912>
 800c96c:	4621      	mov	r1, r4
 800c96e:	4650      	mov	r0, sl
 800c970:	f000 fc8c 	bl	800d28c <__mcmp>
 800c974:	2800      	cmp	r0, #0
 800c976:	da6c      	bge.n	800ca52 <_dtoa_r+0x912>
 800c978:	2300      	movs	r3, #0
 800c97a:	4651      	mov	r1, sl
 800c97c:	220a      	movs	r2, #10
 800c97e:	4628      	mov	r0, r5
 800c980:	f000 fa6c 	bl	800ce5c <__multadd>
 800c984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c986:	4682      	mov	sl, r0
 800c988:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 81ac 	beq.w	800ccea <_dtoa_r+0xbaa>
 800c992:	2300      	movs	r3, #0
 800c994:	4631      	mov	r1, r6
 800c996:	220a      	movs	r2, #10
 800c998:	4628      	mov	r0, r5
 800c99a:	f000 fa5f 	bl	800ce5c <__multadd>
 800c99e:	9b06      	ldr	r3, [sp, #24]
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f300 8093 	bgt.w	800cace <_dtoa_r+0x98e>
 800c9a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	dc59      	bgt.n	800ca62 <_dtoa_r+0x922>
 800c9ae:	e08e      	b.n	800cace <_dtoa_r+0x98e>
 800c9b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c9b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9b6:	e75d      	b.n	800c874 <_dtoa_r+0x734>
 800c9b8:	9b08      	ldr	r3, [sp, #32]
 800c9ba:	1e5c      	subs	r4, r3, #1
 800c9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9be:	42a3      	cmp	r3, r4
 800c9c0:	bfbf      	itttt	lt
 800c9c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c9c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c9c6:	1ae3      	sublt	r3, r4, r3
 800c9c8:	18d2      	addlt	r2, r2, r3
 800c9ca:	bfa8      	it	ge
 800c9cc:	1b1c      	subge	r4, r3, r4
 800c9ce:	9b08      	ldr	r3, [sp, #32]
 800c9d0:	bfbe      	ittt	lt
 800c9d2:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c9d4:	920e      	strlt	r2, [sp, #56]	; 0x38
 800c9d6:	2400      	movlt	r4, #0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bfb5      	itete	lt
 800c9dc:	eba9 0703 	sublt.w	r7, r9, r3
 800c9e0:	464f      	movge	r7, r9
 800c9e2:	2300      	movlt	r3, #0
 800c9e4:	9b08      	ldrge	r3, [sp, #32]
 800c9e6:	e747      	b.n	800c878 <_dtoa_r+0x738>
 800c9e8:	464f      	mov	r7, r9
 800c9ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c9ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c9ee:	e74c      	b.n	800c88a <_dtoa_r+0x74a>
 800c9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9f2:	e773      	b.n	800c8dc <_dtoa_r+0x79c>
 800c9f4:	3fe00000 	.word	0x3fe00000
 800c9f8:	40240000 	.word	0x40240000
 800c9fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	dc18      	bgt.n	800ca34 <_dtoa_r+0x8f4>
 800ca02:	9b04      	ldr	r3, [sp, #16]
 800ca04:	b9b3      	cbnz	r3, 800ca34 <_dtoa_r+0x8f4>
 800ca06:	9b05      	ldr	r3, [sp, #20]
 800ca08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca0c:	b993      	cbnz	r3, 800ca34 <_dtoa_r+0x8f4>
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca14:	0d1b      	lsrs	r3, r3, #20
 800ca16:	051b      	lsls	r3, r3, #20
 800ca18:	b17b      	cbz	r3, 800ca3a <_dtoa_r+0x8fa>
 800ca1a:	f04f 0801 	mov.w	r8, #1
 800ca1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca20:	f109 0901 	add.w	r9, r9, #1
 800ca24:	3301      	adds	r3, #1
 800ca26:	9309      	str	r3, [sp, #36]	; 0x24
 800ca28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f47f af6f 	bne.w	800c90e <_dtoa_r+0x7ce>
 800ca30:	2001      	movs	r0, #1
 800ca32:	e774      	b.n	800c91e <_dtoa_r+0x7de>
 800ca34:	f04f 0800 	mov.w	r8, #0
 800ca38:	e7f6      	b.n	800ca28 <_dtoa_r+0x8e8>
 800ca3a:	4698      	mov	r8, r3
 800ca3c:	e7f4      	b.n	800ca28 <_dtoa_r+0x8e8>
 800ca3e:	d080      	beq.n	800c942 <_dtoa_r+0x802>
 800ca40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca42:	331c      	adds	r3, #28
 800ca44:	441a      	add	r2, r3
 800ca46:	4499      	add	r9, r3
 800ca48:	441f      	add	r7, r3
 800ca4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca4c:	e779      	b.n	800c942 <_dtoa_r+0x802>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	e7f6      	b.n	800ca40 <_dtoa_r+0x900>
 800ca52:	9b08      	ldr	r3, [sp, #32]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	dc34      	bgt.n	800cac2 <_dtoa_r+0x982>
 800ca58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	dd31      	ble.n	800cac2 <_dtoa_r+0x982>
 800ca5e:	9b08      	ldr	r3, [sp, #32]
 800ca60:	9306      	str	r3, [sp, #24]
 800ca62:	9b06      	ldr	r3, [sp, #24]
 800ca64:	b963      	cbnz	r3, 800ca80 <_dtoa_r+0x940>
 800ca66:	4621      	mov	r1, r4
 800ca68:	2205      	movs	r2, #5
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f000 f9f6 	bl	800ce5c <__multadd>
 800ca70:	4601      	mov	r1, r0
 800ca72:	4604      	mov	r4, r0
 800ca74:	4650      	mov	r0, sl
 800ca76:	f000 fc09 	bl	800d28c <__mcmp>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	f73f adbf 	bgt.w	800c5fe <_dtoa_r+0x4be>
 800ca80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ca82:	9f03      	ldr	r7, [sp, #12]
 800ca84:	ea6f 0b03 	mvn.w	fp, r3
 800ca88:	f04f 0800 	mov.w	r8, #0
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	4628      	mov	r0, r5
 800ca90:	f000 f9c2 	bl	800ce18 <_Bfree>
 800ca94:	2e00      	cmp	r6, #0
 800ca96:	f43f aead 	beq.w	800c7f4 <_dtoa_r+0x6b4>
 800ca9a:	f1b8 0f00 	cmp.w	r8, #0
 800ca9e:	d005      	beq.n	800caac <_dtoa_r+0x96c>
 800caa0:	45b0      	cmp	r8, r6
 800caa2:	d003      	beq.n	800caac <_dtoa_r+0x96c>
 800caa4:	4641      	mov	r1, r8
 800caa6:	4628      	mov	r0, r5
 800caa8:	f000 f9b6 	bl	800ce18 <_Bfree>
 800caac:	4631      	mov	r1, r6
 800caae:	4628      	mov	r0, r5
 800cab0:	f000 f9b2 	bl	800ce18 <_Bfree>
 800cab4:	e69e      	b.n	800c7f4 <_dtoa_r+0x6b4>
 800cab6:	2400      	movs	r4, #0
 800cab8:	4626      	mov	r6, r4
 800caba:	e7e1      	b.n	800ca80 <_dtoa_r+0x940>
 800cabc:	46c3      	mov	fp, r8
 800cabe:	4626      	mov	r6, r4
 800cac0:	e59d      	b.n	800c5fe <_dtoa_r+0x4be>
 800cac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 80c8 	beq.w	800cc5a <_dtoa_r+0xb1a>
 800caca:	9b08      	ldr	r3, [sp, #32]
 800cacc:	9306      	str	r3, [sp, #24]
 800cace:	2f00      	cmp	r7, #0
 800cad0:	dd05      	ble.n	800cade <_dtoa_r+0x99e>
 800cad2:	4631      	mov	r1, r6
 800cad4:	463a      	mov	r2, r7
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 fb6c 	bl	800d1b4 <__lshift>
 800cadc:	4606      	mov	r6, r0
 800cade:	f1b8 0f00 	cmp.w	r8, #0
 800cae2:	d05b      	beq.n	800cb9c <_dtoa_r+0xa5c>
 800cae4:	4628      	mov	r0, r5
 800cae6:	6871      	ldr	r1, [r6, #4]
 800cae8:	f000 f956 	bl	800cd98 <_Balloc>
 800caec:	4607      	mov	r7, r0
 800caee:	b928      	cbnz	r0, 800cafc <_dtoa_r+0x9bc>
 800caf0:	4602      	mov	r2, r0
 800caf2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800caf6:	4b81      	ldr	r3, [pc, #516]	; (800ccfc <_dtoa_r+0xbbc>)
 800caf8:	f7ff bb36 	b.w	800c168 <_dtoa_r+0x28>
 800cafc:	6932      	ldr	r2, [r6, #16]
 800cafe:	f106 010c 	add.w	r1, r6, #12
 800cb02:	3202      	adds	r2, #2
 800cb04:	0092      	lsls	r2, r2, #2
 800cb06:	300c      	adds	r0, #12
 800cb08:	f000 fd68 	bl	800d5dc <memcpy>
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	4639      	mov	r1, r7
 800cb10:	4628      	mov	r0, r5
 800cb12:	f000 fb4f 	bl	800d1b4 <__lshift>
 800cb16:	46b0      	mov	r8, r6
 800cb18:	4606      	mov	r6, r0
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	9a03      	ldr	r2, [sp, #12]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	9308      	str	r3, [sp, #32]
 800cb22:	9b06      	ldr	r3, [sp, #24]
 800cb24:	4413      	add	r3, r2
 800cb26:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb28:	9b04      	ldr	r3, [sp, #16]
 800cb2a:	f003 0301 	and.w	r3, r3, #1
 800cb2e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb30:	9b08      	ldr	r3, [sp, #32]
 800cb32:	4621      	mov	r1, r4
 800cb34:	3b01      	subs	r3, #1
 800cb36:	4650      	mov	r0, sl
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	f7ff fa78 	bl	800c02e <quorem>
 800cb3e:	4641      	mov	r1, r8
 800cb40:	9006      	str	r0, [sp, #24]
 800cb42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb46:	4650      	mov	r0, sl
 800cb48:	f000 fba0 	bl	800d28c <__mcmp>
 800cb4c:	4632      	mov	r2, r6
 800cb4e:	9009      	str	r0, [sp, #36]	; 0x24
 800cb50:	4621      	mov	r1, r4
 800cb52:	4628      	mov	r0, r5
 800cb54:	f000 fbb6 	bl	800d2c4 <__mdiff>
 800cb58:	68c2      	ldr	r2, [r0, #12]
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	bb02      	cbnz	r2, 800cba0 <_dtoa_r+0xa60>
 800cb5e:	4601      	mov	r1, r0
 800cb60:	4650      	mov	r0, sl
 800cb62:	f000 fb93 	bl	800d28c <__mcmp>
 800cb66:	4602      	mov	r2, r0
 800cb68:	4639      	mov	r1, r7
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	920c      	str	r2, [sp, #48]	; 0x30
 800cb6e:	f000 f953 	bl	800ce18 <_Bfree>
 800cb72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb76:	9f08      	ldr	r7, [sp, #32]
 800cb78:	ea43 0102 	orr.w	r1, r3, r2
 800cb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb7e:	4319      	orrs	r1, r3
 800cb80:	d110      	bne.n	800cba4 <_dtoa_r+0xa64>
 800cb82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb86:	d029      	beq.n	800cbdc <_dtoa_r+0xa9c>
 800cb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	dd02      	ble.n	800cb94 <_dtoa_r+0xa54>
 800cb8e:	9b06      	ldr	r3, [sp, #24]
 800cb90:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cb94:	9b04      	ldr	r3, [sp, #16]
 800cb96:	f883 9000 	strb.w	r9, [r3]
 800cb9a:	e777      	b.n	800ca8c <_dtoa_r+0x94c>
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	e7ba      	b.n	800cb16 <_dtoa_r+0x9d6>
 800cba0:	2201      	movs	r2, #1
 800cba2:	e7e1      	b.n	800cb68 <_dtoa_r+0xa28>
 800cba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	db04      	blt.n	800cbb4 <_dtoa_r+0xa74>
 800cbaa:	9922      	ldr	r1, [sp, #136]	; 0x88
 800cbac:	430b      	orrs	r3, r1
 800cbae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cbb0:	430b      	orrs	r3, r1
 800cbb2:	d120      	bne.n	800cbf6 <_dtoa_r+0xab6>
 800cbb4:	2a00      	cmp	r2, #0
 800cbb6:	dded      	ble.n	800cb94 <_dtoa_r+0xa54>
 800cbb8:	4651      	mov	r1, sl
 800cbba:	2201      	movs	r2, #1
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f000 faf9 	bl	800d1b4 <__lshift>
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	f000 fb61 	bl	800d28c <__mcmp>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	dc03      	bgt.n	800cbd6 <_dtoa_r+0xa96>
 800cbce:	d1e1      	bne.n	800cb94 <_dtoa_r+0xa54>
 800cbd0:	f019 0f01 	tst.w	r9, #1
 800cbd4:	d0de      	beq.n	800cb94 <_dtoa_r+0xa54>
 800cbd6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbda:	d1d8      	bne.n	800cb8e <_dtoa_r+0xa4e>
 800cbdc:	2339      	movs	r3, #57	; 0x39
 800cbde:	9a04      	ldr	r2, [sp, #16]
 800cbe0:	7013      	strb	r3, [r2, #0]
 800cbe2:	463b      	mov	r3, r7
 800cbe4:	461f      	mov	r7, r3
 800cbe6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800cbea:	3b01      	subs	r3, #1
 800cbec:	2a39      	cmp	r2, #57	; 0x39
 800cbee:	d06b      	beq.n	800ccc8 <_dtoa_r+0xb88>
 800cbf0:	3201      	adds	r2, #1
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	e74a      	b.n	800ca8c <_dtoa_r+0x94c>
 800cbf6:	2a00      	cmp	r2, #0
 800cbf8:	dd07      	ble.n	800cc0a <_dtoa_r+0xaca>
 800cbfa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbfe:	d0ed      	beq.n	800cbdc <_dtoa_r+0xa9c>
 800cc00:	9a04      	ldr	r2, [sp, #16]
 800cc02:	f109 0301 	add.w	r3, r9, #1
 800cc06:	7013      	strb	r3, [r2, #0]
 800cc08:	e740      	b.n	800ca8c <_dtoa_r+0x94c>
 800cc0a:	9b08      	ldr	r3, [sp, #32]
 800cc0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc0e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d042      	beq.n	800cc9c <_dtoa_r+0xb5c>
 800cc16:	4651      	mov	r1, sl
 800cc18:	2300      	movs	r3, #0
 800cc1a:	220a      	movs	r2, #10
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	f000 f91d 	bl	800ce5c <__multadd>
 800cc22:	45b0      	cmp	r8, r6
 800cc24:	4682      	mov	sl, r0
 800cc26:	f04f 0300 	mov.w	r3, #0
 800cc2a:	f04f 020a 	mov.w	r2, #10
 800cc2e:	4641      	mov	r1, r8
 800cc30:	4628      	mov	r0, r5
 800cc32:	d107      	bne.n	800cc44 <_dtoa_r+0xb04>
 800cc34:	f000 f912 	bl	800ce5c <__multadd>
 800cc38:	4680      	mov	r8, r0
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	9b08      	ldr	r3, [sp, #32]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	9308      	str	r3, [sp, #32]
 800cc42:	e775      	b.n	800cb30 <_dtoa_r+0x9f0>
 800cc44:	f000 f90a 	bl	800ce5c <__multadd>
 800cc48:	4631      	mov	r1, r6
 800cc4a:	4680      	mov	r8, r0
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	220a      	movs	r2, #10
 800cc50:	4628      	mov	r0, r5
 800cc52:	f000 f903 	bl	800ce5c <__multadd>
 800cc56:	4606      	mov	r6, r0
 800cc58:	e7f0      	b.n	800cc3c <_dtoa_r+0xafc>
 800cc5a:	9b08      	ldr	r3, [sp, #32]
 800cc5c:	9306      	str	r3, [sp, #24]
 800cc5e:	9f03      	ldr	r7, [sp, #12]
 800cc60:	4621      	mov	r1, r4
 800cc62:	4650      	mov	r0, sl
 800cc64:	f7ff f9e3 	bl	800c02e <quorem>
 800cc68:	9b03      	ldr	r3, [sp, #12]
 800cc6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc6e:	f807 9b01 	strb.w	r9, [r7], #1
 800cc72:	1afa      	subs	r2, r7, r3
 800cc74:	9b06      	ldr	r3, [sp, #24]
 800cc76:	4293      	cmp	r3, r2
 800cc78:	dd07      	ble.n	800cc8a <_dtoa_r+0xb4a>
 800cc7a:	4651      	mov	r1, sl
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	220a      	movs	r2, #10
 800cc80:	4628      	mov	r0, r5
 800cc82:	f000 f8eb 	bl	800ce5c <__multadd>
 800cc86:	4682      	mov	sl, r0
 800cc88:	e7ea      	b.n	800cc60 <_dtoa_r+0xb20>
 800cc8a:	9b06      	ldr	r3, [sp, #24]
 800cc8c:	f04f 0800 	mov.w	r8, #0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	bfcc      	ite	gt
 800cc94:	461f      	movgt	r7, r3
 800cc96:	2701      	movle	r7, #1
 800cc98:	9b03      	ldr	r3, [sp, #12]
 800cc9a:	441f      	add	r7, r3
 800cc9c:	4651      	mov	r1, sl
 800cc9e:	2201      	movs	r2, #1
 800cca0:	4628      	mov	r0, r5
 800cca2:	f000 fa87 	bl	800d1b4 <__lshift>
 800cca6:	4621      	mov	r1, r4
 800cca8:	4682      	mov	sl, r0
 800ccaa:	f000 faef 	bl	800d28c <__mcmp>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	dc97      	bgt.n	800cbe2 <_dtoa_r+0xaa2>
 800ccb2:	d102      	bne.n	800ccba <_dtoa_r+0xb7a>
 800ccb4:	f019 0f01 	tst.w	r9, #1
 800ccb8:	d193      	bne.n	800cbe2 <_dtoa_r+0xaa2>
 800ccba:	463b      	mov	r3, r7
 800ccbc:	461f      	mov	r7, r3
 800ccbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccc2:	2a30      	cmp	r2, #48	; 0x30
 800ccc4:	d0fa      	beq.n	800ccbc <_dtoa_r+0xb7c>
 800ccc6:	e6e1      	b.n	800ca8c <_dtoa_r+0x94c>
 800ccc8:	9a03      	ldr	r2, [sp, #12]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d18a      	bne.n	800cbe4 <_dtoa_r+0xaa4>
 800ccce:	2331      	movs	r3, #49	; 0x31
 800ccd0:	f10b 0b01 	add.w	fp, fp, #1
 800ccd4:	e797      	b.n	800cc06 <_dtoa_r+0xac6>
 800ccd6:	4b0a      	ldr	r3, [pc, #40]	; (800cd00 <_dtoa_r+0xbc0>)
 800ccd8:	f7ff ba9f 	b.w	800c21a <_dtoa_r+0xda>
 800ccdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	f47f aa77 	bne.w	800c1d2 <_dtoa_r+0x92>
 800cce4:	4b07      	ldr	r3, [pc, #28]	; (800cd04 <_dtoa_r+0xbc4>)
 800cce6:	f7ff ba98 	b.w	800c21a <_dtoa_r+0xda>
 800ccea:	9b06      	ldr	r3, [sp, #24]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	dcb6      	bgt.n	800cc5e <_dtoa_r+0xb1e>
 800ccf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	f73f aeb5 	bgt.w	800ca62 <_dtoa_r+0x922>
 800ccf8:	e7b1      	b.n	800cc5e <_dtoa_r+0xb1e>
 800ccfa:	bf00      	nop
 800ccfc:	0800e514 	.word	0x0800e514
 800cd00:	0800e474 	.word	0x0800e474
 800cd04:	0800e498 	.word	0x0800e498

0800cd08 <_free_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	d040      	beq.n	800cd92 <_free_r+0x8a>
 800cd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd14:	1f0c      	subs	r4, r1, #4
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	bfb8      	it	lt
 800cd1a:	18e4      	addlt	r4, r4, r3
 800cd1c:	f7fe fb7a 	bl	800b414 <__malloc_lock>
 800cd20:	4a1c      	ldr	r2, [pc, #112]	; (800cd94 <_free_r+0x8c>)
 800cd22:	6813      	ldr	r3, [r2, #0]
 800cd24:	b933      	cbnz	r3, 800cd34 <_free_r+0x2c>
 800cd26:	6063      	str	r3, [r4, #4]
 800cd28:	6014      	str	r4, [r2, #0]
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd30:	f7fe bb76 	b.w	800b420 <__malloc_unlock>
 800cd34:	42a3      	cmp	r3, r4
 800cd36:	d908      	bls.n	800cd4a <_free_r+0x42>
 800cd38:	6820      	ldr	r0, [r4, #0]
 800cd3a:	1821      	adds	r1, r4, r0
 800cd3c:	428b      	cmp	r3, r1
 800cd3e:	bf01      	itttt	eq
 800cd40:	6819      	ldreq	r1, [r3, #0]
 800cd42:	685b      	ldreq	r3, [r3, #4]
 800cd44:	1809      	addeq	r1, r1, r0
 800cd46:	6021      	streq	r1, [r4, #0]
 800cd48:	e7ed      	b.n	800cd26 <_free_r+0x1e>
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	b10b      	cbz	r3, 800cd54 <_free_r+0x4c>
 800cd50:	42a3      	cmp	r3, r4
 800cd52:	d9fa      	bls.n	800cd4a <_free_r+0x42>
 800cd54:	6811      	ldr	r1, [r2, #0]
 800cd56:	1850      	adds	r0, r2, r1
 800cd58:	42a0      	cmp	r0, r4
 800cd5a:	d10b      	bne.n	800cd74 <_free_r+0x6c>
 800cd5c:	6820      	ldr	r0, [r4, #0]
 800cd5e:	4401      	add	r1, r0
 800cd60:	1850      	adds	r0, r2, r1
 800cd62:	4283      	cmp	r3, r0
 800cd64:	6011      	str	r1, [r2, #0]
 800cd66:	d1e0      	bne.n	800cd2a <_free_r+0x22>
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	4408      	add	r0, r1
 800cd6e:	6010      	str	r0, [r2, #0]
 800cd70:	6053      	str	r3, [r2, #4]
 800cd72:	e7da      	b.n	800cd2a <_free_r+0x22>
 800cd74:	d902      	bls.n	800cd7c <_free_r+0x74>
 800cd76:	230c      	movs	r3, #12
 800cd78:	602b      	str	r3, [r5, #0]
 800cd7a:	e7d6      	b.n	800cd2a <_free_r+0x22>
 800cd7c:	6820      	ldr	r0, [r4, #0]
 800cd7e:	1821      	adds	r1, r4, r0
 800cd80:	428b      	cmp	r3, r1
 800cd82:	bf01      	itttt	eq
 800cd84:	6819      	ldreq	r1, [r3, #0]
 800cd86:	685b      	ldreq	r3, [r3, #4]
 800cd88:	1809      	addeq	r1, r1, r0
 800cd8a:	6021      	streq	r1, [r4, #0]
 800cd8c:	6063      	str	r3, [r4, #4]
 800cd8e:	6054      	str	r4, [r2, #4]
 800cd90:	e7cb      	b.n	800cd2a <_free_r+0x22>
 800cd92:	bd38      	pop	{r3, r4, r5, pc}
 800cd94:	20001cb0 	.word	0x20001cb0

0800cd98 <_Balloc>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	69c6      	ldr	r6, [r0, #28]
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	460d      	mov	r5, r1
 800cda0:	b976      	cbnz	r6, 800cdc0 <_Balloc+0x28>
 800cda2:	2010      	movs	r0, #16
 800cda4:	f7fe fa86 	bl	800b2b4 <malloc>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	61e0      	str	r0, [r4, #28]
 800cdac:	b920      	cbnz	r0, 800cdb8 <_Balloc+0x20>
 800cdae:	216b      	movs	r1, #107	; 0x6b
 800cdb0:	4b17      	ldr	r3, [pc, #92]	; (800ce10 <_Balloc+0x78>)
 800cdb2:	4818      	ldr	r0, [pc, #96]	; (800ce14 <_Balloc+0x7c>)
 800cdb4:	f000 fc20 	bl	800d5f8 <__assert_func>
 800cdb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdbc:	6006      	str	r6, [r0, #0]
 800cdbe:	60c6      	str	r6, [r0, #12]
 800cdc0:	69e6      	ldr	r6, [r4, #28]
 800cdc2:	68f3      	ldr	r3, [r6, #12]
 800cdc4:	b183      	cbz	r3, 800cde8 <_Balloc+0x50>
 800cdc6:	69e3      	ldr	r3, [r4, #28]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cdce:	b9b8      	cbnz	r0, 800ce00 <_Balloc+0x68>
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	fa01 f605 	lsl.w	r6, r1, r5
 800cdd6:	1d72      	adds	r2, r6, #5
 800cdd8:	4620      	mov	r0, r4
 800cdda:	0092      	lsls	r2, r2, #2
 800cddc:	f000 fc2a 	bl	800d634 <_calloc_r>
 800cde0:	b160      	cbz	r0, 800cdfc <_Balloc+0x64>
 800cde2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cde6:	e00e      	b.n	800ce06 <_Balloc+0x6e>
 800cde8:	2221      	movs	r2, #33	; 0x21
 800cdea:	2104      	movs	r1, #4
 800cdec:	4620      	mov	r0, r4
 800cdee:	f000 fc21 	bl	800d634 <_calloc_r>
 800cdf2:	69e3      	ldr	r3, [r4, #28]
 800cdf4:	60f0      	str	r0, [r6, #12]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1e4      	bne.n	800cdc6 <_Balloc+0x2e>
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	bd70      	pop	{r4, r5, r6, pc}
 800ce00:	6802      	ldr	r2, [r0, #0]
 800ce02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce06:	2300      	movs	r3, #0
 800ce08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce0c:	e7f7      	b.n	800cdfe <_Balloc+0x66>
 800ce0e:	bf00      	nop
 800ce10:	0800e4a5 	.word	0x0800e4a5
 800ce14:	0800e525 	.word	0x0800e525

0800ce18 <_Bfree>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	69c6      	ldr	r6, [r0, #28]
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	460c      	mov	r4, r1
 800ce20:	b976      	cbnz	r6, 800ce40 <_Bfree+0x28>
 800ce22:	2010      	movs	r0, #16
 800ce24:	f7fe fa46 	bl	800b2b4 <malloc>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	61e8      	str	r0, [r5, #28]
 800ce2c:	b920      	cbnz	r0, 800ce38 <_Bfree+0x20>
 800ce2e:	218f      	movs	r1, #143	; 0x8f
 800ce30:	4b08      	ldr	r3, [pc, #32]	; (800ce54 <_Bfree+0x3c>)
 800ce32:	4809      	ldr	r0, [pc, #36]	; (800ce58 <_Bfree+0x40>)
 800ce34:	f000 fbe0 	bl	800d5f8 <__assert_func>
 800ce38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce3c:	6006      	str	r6, [r0, #0]
 800ce3e:	60c6      	str	r6, [r0, #12]
 800ce40:	b13c      	cbz	r4, 800ce52 <_Bfree+0x3a>
 800ce42:	69eb      	ldr	r3, [r5, #28]
 800ce44:	6862      	ldr	r2, [r4, #4]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce4c:	6021      	str	r1, [r4, #0]
 800ce4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce52:	bd70      	pop	{r4, r5, r6, pc}
 800ce54:	0800e4a5 	.word	0x0800e4a5
 800ce58:	0800e525 	.word	0x0800e525

0800ce5c <__multadd>:
 800ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce60:	4607      	mov	r7, r0
 800ce62:	460c      	mov	r4, r1
 800ce64:	461e      	mov	r6, r3
 800ce66:	2000      	movs	r0, #0
 800ce68:	690d      	ldr	r5, [r1, #16]
 800ce6a:	f101 0c14 	add.w	ip, r1, #20
 800ce6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ce72:	3001      	adds	r0, #1
 800ce74:	b299      	uxth	r1, r3
 800ce76:	fb02 6101 	mla	r1, r2, r1, r6
 800ce7a:	0c1e      	lsrs	r6, r3, #16
 800ce7c:	0c0b      	lsrs	r3, r1, #16
 800ce7e:	fb02 3306 	mla	r3, r2, r6, r3
 800ce82:	b289      	uxth	r1, r1
 800ce84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce88:	4285      	cmp	r5, r0
 800ce8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce8e:	f84c 1b04 	str.w	r1, [ip], #4
 800ce92:	dcec      	bgt.n	800ce6e <__multadd+0x12>
 800ce94:	b30e      	cbz	r6, 800ceda <__multadd+0x7e>
 800ce96:	68a3      	ldr	r3, [r4, #8]
 800ce98:	42ab      	cmp	r3, r5
 800ce9a:	dc19      	bgt.n	800ced0 <__multadd+0x74>
 800ce9c:	6861      	ldr	r1, [r4, #4]
 800ce9e:	4638      	mov	r0, r7
 800cea0:	3101      	adds	r1, #1
 800cea2:	f7ff ff79 	bl	800cd98 <_Balloc>
 800cea6:	4680      	mov	r8, r0
 800cea8:	b928      	cbnz	r0, 800ceb6 <__multadd+0x5a>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	21ba      	movs	r1, #186	; 0xba
 800ceae:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <__multadd+0x84>)
 800ceb0:	480c      	ldr	r0, [pc, #48]	; (800cee4 <__multadd+0x88>)
 800ceb2:	f000 fba1 	bl	800d5f8 <__assert_func>
 800ceb6:	6922      	ldr	r2, [r4, #16]
 800ceb8:	f104 010c 	add.w	r1, r4, #12
 800cebc:	3202      	adds	r2, #2
 800cebe:	0092      	lsls	r2, r2, #2
 800cec0:	300c      	adds	r0, #12
 800cec2:	f000 fb8b 	bl	800d5dc <memcpy>
 800cec6:	4621      	mov	r1, r4
 800cec8:	4638      	mov	r0, r7
 800ceca:	f7ff ffa5 	bl	800ce18 <_Bfree>
 800cece:	4644      	mov	r4, r8
 800ced0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ced4:	3501      	adds	r5, #1
 800ced6:	615e      	str	r6, [r3, #20]
 800ced8:	6125      	str	r5, [r4, #16]
 800ceda:	4620      	mov	r0, r4
 800cedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee0:	0800e514 	.word	0x0800e514
 800cee4:	0800e525 	.word	0x0800e525

0800cee8 <__hi0bits>:
 800cee8:	0c02      	lsrs	r2, r0, #16
 800ceea:	0412      	lsls	r2, r2, #16
 800ceec:	4603      	mov	r3, r0
 800ceee:	b9ca      	cbnz	r2, 800cf24 <__hi0bits+0x3c>
 800cef0:	0403      	lsls	r3, r0, #16
 800cef2:	2010      	movs	r0, #16
 800cef4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cef8:	bf04      	itt	eq
 800cefa:	021b      	lsleq	r3, r3, #8
 800cefc:	3008      	addeq	r0, #8
 800cefe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cf02:	bf04      	itt	eq
 800cf04:	011b      	lsleq	r3, r3, #4
 800cf06:	3004      	addeq	r0, #4
 800cf08:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cf0c:	bf04      	itt	eq
 800cf0e:	009b      	lsleq	r3, r3, #2
 800cf10:	3002      	addeq	r0, #2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	db05      	blt.n	800cf22 <__hi0bits+0x3a>
 800cf16:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cf1a:	f100 0001 	add.w	r0, r0, #1
 800cf1e:	bf08      	it	eq
 800cf20:	2020      	moveq	r0, #32
 800cf22:	4770      	bx	lr
 800cf24:	2000      	movs	r0, #0
 800cf26:	e7e5      	b.n	800cef4 <__hi0bits+0xc>

0800cf28 <__lo0bits>:
 800cf28:	6803      	ldr	r3, [r0, #0]
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	f013 0007 	ands.w	r0, r3, #7
 800cf30:	d00b      	beq.n	800cf4a <__lo0bits+0x22>
 800cf32:	07d9      	lsls	r1, r3, #31
 800cf34:	d421      	bmi.n	800cf7a <__lo0bits+0x52>
 800cf36:	0798      	lsls	r0, r3, #30
 800cf38:	bf49      	itett	mi
 800cf3a:	085b      	lsrmi	r3, r3, #1
 800cf3c:	089b      	lsrpl	r3, r3, #2
 800cf3e:	2001      	movmi	r0, #1
 800cf40:	6013      	strmi	r3, [r2, #0]
 800cf42:	bf5c      	itt	pl
 800cf44:	2002      	movpl	r0, #2
 800cf46:	6013      	strpl	r3, [r2, #0]
 800cf48:	4770      	bx	lr
 800cf4a:	b299      	uxth	r1, r3
 800cf4c:	b909      	cbnz	r1, 800cf52 <__lo0bits+0x2a>
 800cf4e:	2010      	movs	r0, #16
 800cf50:	0c1b      	lsrs	r3, r3, #16
 800cf52:	b2d9      	uxtb	r1, r3
 800cf54:	b909      	cbnz	r1, 800cf5a <__lo0bits+0x32>
 800cf56:	3008      	adds	r0, #8
 800cf58:	0a1b      	lsrs	r3, r3, #8
 800cf5a:	0719      	lsls	r1, r3, #28
 800cf5c:	bf04      	itt	eq
 800cf5e:	091b      	lsreq	r3, r3, #4
 800cf60:	3004      	addeq	r0, #4
 800cf62:	0799      	lsls	r1, r3, #30
 800cf64:	bf04      	itt	eq
 800cf66:	089b      	lsreq	r3, r3, #2
 800cf68:	3002      	addeq	r0, #2
 800cf6a:	07d9      	lsls	r1, r3, #31
 800cf6c:	d403      	bmi.n	800cf76 <__lo0bits+0x4e>
 800cf6e:	085b      	lsrs	r3, r3, #1
 800cf70:	f100 0001 	add.w	r0, r0, #1
 800cf74:	d003      	beq.n	800cf7e <__lo0bits+0x56>
 800cf76:	6013      	str	r3, [r2, #0]
 800cf78:	4770      	bx	lr
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	4770      	bx	lr
 800cf7e:	2020      	movs	r0, #32
 800cf80:	4770      	bx	lr
	...

0800cf84 <__i2b>:
 800cf84:	b510      	push	{r4, lr}
 800cf86:	460c      	mov	r4, r1
 800cf88:	2101      	movs	r1, #1
 800cf8a:	f7ff ff05 	bl	800cd98 <_Balloc>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	b928      	cbnz	r0, 800cf9e <__i2b+0x1a>
 800cf92:	f240 1145 	movw	r1, #325	; 0x145
 800cf96:	4b04      	ldr	r3, [pc, #16]	; (800cfa8 <__i2b+0x24>)
 800cf98:	4804      	ldr	r0, [pc, #16]	; (800cfac <__i2b+0x28>)
 800cf9a:	f000 fb2d 	bl	800d5f8 <__assert_func>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	6144      	str	r4, [r0, #20]
 800cfa2:	6103      	str	r3, [r0, #16]
 800cfa4:	bd10      	pop	{r4, pc}
 800cfa6:	bf00      	nop
 800cfa8:	0800e514 	.word	0x0800e514
 800cfac:	0800e525 	.word	0x0800e525

0800cfb0 <__multiply>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	4691      	mov	r9, r2
 800cfb6:	690a      	ldr	r2, [r1, #16]
 800cfb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	bfbe      	ittt	lt
 800cfc2:	460b      	movlt	r3, r1
 800cfc4:	464c      	movlt	r4, r9
 800cfc6:	4699      	movlt	r9, r3
 800cfc8:	6927      	ldr	r7, [r4, #16]
 800cfca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cfce:	68a3      	ldr	r3, [r4, #8]
 800cfd0:	6861      	ldr	r1, [r4, #4]
 800cfd2:	eb07 060a 	add.w	r6, r7, sl
 800cfd6:	42b3      	cmp	r3, r6
 800cfd8:	b085      	sub	sp, #20
 800cfda:	bfb8      	it	lt
 800cfdc:	3101      	addlt	r1, #1
 800cfde:	f7ff fedb 	bl	800cd98 <_Balloc>
 800cfe2:	b930      	cbnz	r0, 800cff2 <__multiply+0x42>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cfea:	4b43      	ldr	r3, [pc, #268]	; (800d0f8 <__multiply+0x148>)
 800cfec:	4843      	ldr	r0, [pc, #268]	; (800d0fc <__multiply+0x14c>)
 800cfee:	f000 fb03 	bl	800d5f8 <__assert_func>
 800cff2:	f100 0514 	add.w	r5, r0, #20
 800cff6:	462b      	mov	r3, r5
 800cff8:	2200      	movs	r2, #0
 800cffa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cffe:	4543      	cmp	r3, r8
 800d000:	d321      	bcc.n	800d046 <__multiply+0x96>
 800d002:	f104 0314 	add.w	r3, r4, #20
 800d006:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d00a:	f109 0314 	add.w	r3, r9, #20
 800d00e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d012:	9202      	str	r2, [sp, #8]
 800d014:	1b3a      	subs	r2, r7, r4
 800d016:	3a15      	subs	r2, #21
 800d018:	f022 0203 	bic.w	r2, r2, #3
 800d01c:	3204      	adds	r2, #4
 800d01e:	f104 0115 	add.w	r1, r4, #21
 800d022:	428f      	cmp	r7, r1
 800d024:	bf38      	it	cc
 800d026:	2204      	movcc	r2, #4
 800d028:	9201      	str	r2, [sp, #4]
 800d02a:	9a02      	ldr	r2, [sp, #8]
 800d02c:	9303      	str	r3, [sp, #12]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d80c      	bhi.n	800d04c <__multiply+0x9c>
 800d032:	2e00      	cmp	r6, #0
 800d034:	dd03      	ble.n	800d03e <__multiply+0x8e>
 800d036:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d05a      	beq.n	800d0f4 <__multiply+0x144>
 800d03e:	6106      	str	r6, [r0, #16]
 800d040:	b005      	add	sp, #20
 800d042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d046:	f843 2b04 	str.w	r2, [r3], #4
 800d04a:	e7d8      	b.n	800cffe <__multiply+0x4e>
 800d04c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d050:	f1ba 0f00 	cmp.w	sl, #0
 800d054:	d023      	beq.n	800d09e <__multiply+0xee>
 800d056:	46a9      	mov	r9, r5
 800d058:	f04f 0c00 	mov.w	ip, #0
 800d05c:	f104 0e14 	add.w	lr, r4, #20
 800d060:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d064:	f8d9 1000 	ldr.w	r1, [r9]
 800d068:	fa1f fb82 	uxth.w	fp, r2
 800d06c:	b289      	uxth	r1, r1
 800d06e:	fb0a 110b 	mla	r1, sl, fp, r1
 800d072:	4461      	add	r1, ip
 800d074:	f8d9 c000 	ldr.w	ip, [r9]
 800d078:	0c12      	lsrs	r2, r2, #16
 800d07a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d07e:	fb0a c202 	mla	r2, sl, r2, ip
 800d082:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d086:	b289      	uxth	r1, r1
 800d088:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d08c:	4577      	cmp	r7, lr
 800d08e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d092:	f849 1b04 	str.w	r1, [r9], #4
 800d096:	d8e3      	bhi.n	800d060 <__multiply+0xb0>
 800d098:	9a01      	ldr	r2, [sp, #4]
 800d09a:	f845 c002 	str.w	ip, [r5, r2]
 800d09e:	9a03      	ldr	r2, [sp, #12]
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d0a6:	f1b9 0f00 	cmp.w	r9, #0
 800d0aa:	d021      	beq.n	800d0f0 <__multiply+0x140>
 800d0ac:	46ae      	mov	lr, r5
 800d0ae:	f04f 0a00 	mov.w	sl, #0
 800d0b2:	6829      	ldr	r1, [r5, #0]
 800d0b4:	f104 0c14 	add.w	ip, r4, #20
 800d0b8:	f8bc b000 	ldrh.w	fp, [ip]
 800d0bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d0c0:	b289      	uxth	r1, r1
 800d0c2:	fb09 220b 	mla	r2, r9, fp, r2
 800d0c6:	4452      	add	r2, sl
 800d0c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d0cc:	f84e 1b04 	str.w	r1, [lr], #4
 800d0d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d0d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0d8:	f8be 1000 	ldrh.w	r1, [lr]
 800d0dc:	4567      	cmp	r7, ip
 800d0de:	fb09 110a 	mla	r1, r9, sl, r1
 800d0e2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d0e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0ea:	d8e5      	bhi.n	800d0b8 <__multiply+0x108>
 800d0ec:	9a01      	ldr	r2, [sp, #4]
 800d0ee:	50a9      	str	r1, [r5, r2]
 800d0f0:	3504      	adds	r5, #4
 800d0f2:	e79a      	b.n	800d02a <__multiply+0x7a>
 800d0f4:	3e01      	subs	r6, #1
 800d0f6:	e79c      	b.n	800d032 <__multiply+0x82>
 800d0f8:	0800e514 	.word	0x0800e514
 800d0fc:	0800e525 	.word	0x0800e525

0800d100 <__pow5mult>:
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d104:	4615      	mov	r5, r2
 800d106:	f012 0203 	ands.w	r2, r2, #3
 800d10a:	4606      	mov	r6, r0
 800d10c:	460f      	mov	r7, r1
 800d10e:	d007      	beq.n	800d120 <__pow5mult+0x20>
 800d110:	4c25      	ldr	r4, [pc, #148]	; (800d1a8 <__pow5mult+0xa8>)
 800d112:	3a01      	subs	r2, #1
 800d114:	2300      	movs	r3, #0
 800d116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d11a:	f7ff fe9f 	bl	800ce5c <__multadd>
 800d11e:	4607      	mov	r7, r0
 800d120:	10ad      	asrs	r5, r5, #2
 800d122:	d03d      	beq.n	800d1a0 <__pow5mult+0xa0>
 800d124:	69f4      	ldr	r4, [r6, #28]
 800d126:	b97c      	cbnz	r4, 800d148 <__pow5mult+0x48>
 800d128:	2010      	movs	r0, #16
 800d12a:	f7fe f8c3 	bl	800b2b4 <malloc>
 800d12e:	4602      	mov	r2, r0
 800d130:	61f0      	str	r0, [r6, #28]
 800d132:	b928      	cbnz	r0, 800d140 <__pow5mult+0x40>
 800d134:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d138:	4b1c      	ldr	r3, [pc, #112]	; (800d1ac <__pow5mult+0xac>)
 800d13a:	481d      	ldr	r0, [pc, #116]	; (800d1b0 <__pow5mult+0xb0>)
 800d13c:	f000 fa5c 	bl	800d5f8 <__assert_func>
 800d140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d144:	6004      	str	r4, [r0, #0]
 800d146:	60c4      	str	r4, [r0, #12]
 800d148:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d14c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d150:	b94c      	cbnz	r4, 800d166 <__pow5mult+0x66>
 800d152:	f240 2171 	movw	r1, #625	; 0x271
 800d156:	4630      	mov	r0, r6
 800d158:	f7ff ff14 	bl	800cf84 <__i2b>
 800d15c:	2300      	movs	r3, #0
 800d15e:	4604      	mov	r4, r0
 800d160:	f8c8 0008 	str.w	r0, [r8, #8]
 800d164:	6003      	str	r3, [r0, #0]
 800d166:	f04f 0900 	mov.w	r9, #0
 800d16a:	07eb      	lsls	r3, r5, #31
 800d16c:	d50a      	bpl.n	800d184 <__pow5mult+0x84>
 800d16e:	4639      	mov	r1, r7
 800d170:	4622      	mov	r2, r4
 800d172:	4630      	mov	r0, r6
 800d174:	f7ff ff1c 	bl	800cfb0 <__multiply>
 800d178:	4680      	mov	r8, r0
 800d17a:	4639      	mov	r1, r7
 800d17c:	4630      	mov	r0, r6
 800d17e:	f7ff fe4b 	bl	800ce18 <_Bfree>
 800d182:	4647      	mov	r7, r8
 800d184:	106d      	asrs	r5, r5, #1
 800d186:	d00b      	beq.n	800d1a0 <__pow5mult+0xa0>
 800d188:	6820      	ldr	r0, [r4, #0]
 800d18a:	b938      	cbnz	r0, 800d19c <__pow5mult+0x9c>
 800d18c:	4622      	mov	r2, r4
 800d18e:	4621      	mov	r1, r4
 800d190:	4630      	mov	r0, r6
 800d192:	f7ff ff0d 	bl	800cfb0 <__multiply>
 800d196:	6020      	str	r0, [r4, #0]
 800d198:	f8c0 9000 	str.w	r9, [r0]
 800d19c:	4604      	mov	r4, r0
 800d19e:	e7e4      	b.n	800d16a <__pow5mult+0x6a>
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a6:	bf00      	nop
 800d1a8:	0800e670 	.word	0x0800e670
 800d1ac:	0800e4a5 	.word	0x0800e4a5
 800d1b0:	0800e525 	.word	0x0800e525

0800d1b4 <__lshift>:
 800d1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	4607      	mov	r7, r0
 800d1bc:	4691      	mov	r9, r2
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	6849      	ldr	r1, [r1, #4]
 800d1c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1c6:	68a3      	ldr	r3, [r4, #8]
 800d1c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1cc:	f108 0601 	add.w	r6, r8, #1
 800d1d0:	42b3      	cmp	r3, r6
 800d1d2:	db0b      	blt.n	800d1ec <__lshift+0x38>
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	f7ff fddf 	bl	800cd98 <_Balloc>
 800d1da:	4605      	mov	r5, r0
 800d1dc:	b948      	cbnz	r0, 800d1f2 <__lshift+0x3e>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d1e4:	4b27      	ldr	r3, [pc, #156]	; (800d284 <__lshift+0xd0>)
 800d1e6:	4828      	ldr	r0, [pc, #160]	; (800d288 <__lshift+0xd4>)
 800d1e8:	f000 fa06 	bl	800d5f8 <__assert_func>
 800d1ec:	3101      	adds	r1, #1
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	e7ee      	b.n	800d1d0 <__lshift+0x1c>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f100 0114 	add.w	r1, r0, #20
 800d1f8:	f100 0210 	add.w	r2, r0, #16
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	4553      	cmp	r3, sl
 800d200:	db33      	blt.n	800d26a <__lshift+0xb6>
 800d202:	6920      	ldr	r0, [r4, #16]
 800d204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d208:	f104 0314 	add.w	r3, r4, #20
 800d20c:	f019 091f 	ands.w	r9, r9, #31
 800d210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d218:	d02b      	beq.n	800d272 <__lshift+0xbe>
 800d21a:	468a      	mov	sl, r1
 800d21c:	2200      	movs	r2, #0
 800d21e:	f1c9 0e20 	rsb	lr, r9, #32
 800d222:	6818      	ldr	r0, [r3, #0]
 800d224:	fa00 f009 	lsl.w	r0, r0, r9
 800d228:	4310      	orrs	r0, r2
 800d22a:	f84a 0b04 	str.w	r0, [sl], #4
 800d22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d232:	459c      	cmp	ip, r3
 800d234:	fa22 f20e 	lsr.w	r2, r2, lr
 800d238:	d8f3      	bhi.n	800d222 <__lshift+0x6e>
 800d23a:	ebac 0304 	sub.w	r3, ip, r4
 800d23e:	3b15      	subs	r3, #21
 800d240:	f023 0303 	bic.w	r3, r3, #3
 800d244:	3304      	adds	r3, #4
 800d246:	f104 0015 	add.w	r0, r4, #21
 800d24a:	4584      	cmp	ip, r0
 800d24c:	bf38      	it	cc
 800d24e:	2304      	movcc	r3, #4
 800d250:	50ca      	str	r2, [r1, r3]
 800d252:	b10a      	cbz	r2, 800d258 <__lshift+0xa4>
 800d254:	f108 0602 	add.w	r6, r8, #2
 800d258:	3e01      	subs	r6, #1
 800d25a:	4638      	mov	r0, r7
 800d25c:	4621      	mov	r1, r4
 800d25e:	612e      	str	r6, [r5, #16]
 800d260:	f7ff fdda 	bl	800ce18 <_Bfree>
 800d264:	4628      	mov	r0, r5
 800d266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d26e:	3301      	adds	r3, #1
 800d270:	e7c5      	b.n	800d1fe <__lshift+0x4a>
 800d272:	3904      	subs	r1, #4
 800d274:	f853 2b04 	ldr.w	r2, [r3], #4
 800d278:	459c      	cmp	ip, r3
 800d27a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d27e:	d8f9      	bhi.n	800d274 <__lshift+0xc0>
 800d280:	e7ea      	b.n	800d258 <__lshift+0xa4>
 800d282:	bf00      	nop
 800d284:	0800e514 	.word	0x0800e514
 800d288:	0800e525 	.word	0x0800e525

0800d28c <__mcmp>:
 800d28c:	4603      	mov	r3, r0
 800d28e:	690a      	ldr	r2, [r1, #16]
 800d290:	6900      	ldr	r0, [r0, #16]
 800d292:	b530      	push	{r4, r5, lr}
 800d294:	1a80      	subs	r0, r0, r2
 800d296:	d10d      	bne.n	800d2b4 <__mcmp+0x28>
 800d298:	3314      	adds	r3, #20
 800d29a:	3114      	adds	r1, #20
 800d29c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2ac:	4295      	cmp	r5, r2
 800d2ae:	d002      	beq.n	800d2b6 <__mcmp+0x2a>
 800d2b0:	d304      	bcc.n	800d2bc <__mcmp+0x30>
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	bd30      	pop	{r4, r5, pc}
 800d2b6:	42a3      	cmp	r3, r4
 800d2b8:	d3f4      	bcc.n	800d2a4 <__mcmp+0x18>
 800d2ba:	e7fb      	b.n	800d2b4 <__mcmp+0x28>
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c0:	e7f8      	b.n	800d2b4 <__mcmp+0x28>
	...

0800d2c4 <__mdiff>:
 800d2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c8:	460d      	mov	r5, r1
 800d2ca:	4607      	mov	r7, r0
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	4614      	mov	r4, r2
 800d2d2:	f7ff ffdb 	bl	800d28c <__mcmp>
 800d2d6:	1e06      	subs	r6, r0, #0
 800d2d8:	d111      	bne.n	800d2fe <__mdiff+0x3a>
 800d2da:	4631      	mov	r1, r6
 800d2dc:	4638      	mov	r0, r7
 800d2de:	f7ff fd5b 	bl	800cd98 <_Balloc>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	b928      	cbnz	r0, 800d2f2 <__mdiff+0x2e>
 800d2e6:	f240 2137 	movw	r1, #567	; 0x237
 800d2ea:	4b3a      	ldr	r3, [pc, #232]	; (800d3d4 <__mdiff+0x110>)
 800d2ec:	483a      	ldr	r0, [pc, #232]	; (800d3d8 <__mdiff+0x114>)
 800d2ee:	f000 f983 	bl	800d5f8 <__assert_func>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fe:	bfa4      	itt	ge
 800d300:	4623      	movge	r3, r4
 800d302:	462c      	movge	r4, r5
 800d304:	4638      	mov	r0, r7
 800d306:	6861      	ldr	r1, [r4, #4]
 800d308:	bfa6      	itte	ge
 800d30a:	461d      	movge	r5, r3
 800d30c:	2600      	movge	r6, #0
 800d30e:	2601      	movlt	r6, #1
 800d310:	f7ff fd42 	bl	800cd98 <_Balloc>
 800d314:	4602      	mov	r2, r0
 800d316:	b918      	cbnz	r0, 800d320 <__mdiff+0x5c>
 800d318:	f240 2145 	movw	r1, #581	; 0x245
 800d31c:	4b2d      	ldr	r3, [pc, #180]	; (800d3d4 <__mdiff+0x110>)
 800d31e:	e7e5      	b.n	800d2ec <__mdiff+0x28>
 800d320:	f102 0814 	add.w	r8, r2, #20
 800d324:	46c2      	mov	sl, r8
 800d326:	f04f 0c00 	mov.w	ip, #0
 800d32a:	6927      	ldr	r7, [r4, #16]
 800d32c:	60c6      	str	r6, [r0, #12]
 800d32e:	692e      	ldr	r6, [r5, #16]
 800d330:	f104 0014 	add.w	r0, r4, #20
 800d334:	f105 0914 	add.w	r9, r5, #20
 800d338:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d33c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d340:	3410      	adds	r4, #16
 800d342:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d346:	f859 3b04 	ldr.w	r3, [r9], #4
 800d34a:	fa1f f18b 	uxth.w	r1, fp
 800d34e:	4461      	add	r1, ip
 800d350:	fa1f fc83 	uxth.w	ip, r3
 800d354:	0c1b      	lsrs	r3, r3, #16
 800d356:	eba1 010c 	sub.w	r1, r1, ip
 800d35a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d35e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d362:	b289      	uxth	r1, r1
 800d364:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d368:	454e      	cmp	r6, r9
 800d36a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d36e:	f84a 1b04 	str.w	r1, [sl], #4
 800d372:	d8e6      	bhi.n	800d342 <__mdiff+0x7e>
 800d374:	1b73      	subs	r3, r6, r5
 800d376:	3b15      	subs	r3, #21
 800d378:	f023 0303 	bic.w	r3, r3, #3
 800d37c:	3515      	adds	r5, #21
 800d37e:	3304      	adds	r3, #4
 800d380:	42ae      	cmp	r6, r5
 800d382:	bf38      	it	cc
 800d384:	2304      	movcc	r3, #4
 800d386:	4418      	add	r0, r3
 800d388:	4443      	add	r3, r8
 800d38a:	461e      	mov	r6, r3
 800d38c:	4605      	mov	r5, r0
 800d38e:	4575      	cmp	r5, lr
 800d390:	d30e      	bcc.n	800d3b0 <__mdiff+0xec>
 800d392:	f10e 0103 	add.w	r1, lr, #3
 800d396:	1a09      	subs	r1, r1, r0
 800d398:	f021 0103 	bic.w	r1, r1, #3
 800d39c:	3803      	subs	r0, #3
 800d39e:	4586      	cmp	lr, r0
 800d3a0:	bf38      	it	cc
 800d3a2:	2100      	movcc	r1, #0
 800d3a4:	440b      	add	r3, r1
 800d3a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3aa:	b189      	cbz	r1, 800d3d0 <__mdiff+0x10c>
 800d3ac:	6117      	str	r7, [r2, #16]
 800d3ae:	e7a3      	b.n	800d2f8 <__mdiff+0x34>
 800d3b0:	f855 8b04 	ldr.w	r8, [r5], #4
 800d3b4:	fa1f f188 	uxth.w	r1, r8
 800d3b8:	4461      	add	r1, ip
 800d3ba:	140c      	asrs	r4, r1, #16
 800d3bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d3c0:	b289      	uxth	r1, r1
 800d3c2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d3c6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d3ca:	f846 1b04 	str.w	r1, [r6], #4
 800d3ce:	e7de      	b.n	800d38e <__mdiff+0xca>
 800d3d0:	3f01      	subs	r7, #1
 800d3d2:	e7e8      	b.n	800d3a6 <__mdiff+0xe2>
 800d3d4:	0800e514 	.word	0x0800e514
 800d3d8:	0800e525 	.word	0x0800e525

0800d3dc <__d2b>:
 800d3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3de:	2101      	movs	r1, #1
 800d3e0:	4617      	mov	r7, r2
 800d3e2:	461c      	mov	r4, r3
 800d3e4:	9e08      	ldr	r6, [sp, #32]
 800d3e6:	f7ff fcd7 	bl	800cd98 <_Balloc>
 800d3ea:	4605      	mov	r5, r0
 800d3ec:	b930      	cbnz	r0, 800d3fc <__d2b+0x20>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	f240 310f 	movw	r1, #783	; 0x30f
 800d3f4:	4b22      	ldr	r3, [pc, #136]	; (800d480 <__d2b+0xa4>)
 800d3f6:	4823      	ldr	r0, [pc, #140]	; (800d484 <__d2b+0xa8>)
 800d3f8:	f000 f8fe 	bl	800d5f8 <__assert_func>
 800d3fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d400:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d404:	bb24      	cbnz	r4, 800d450 <__d2b+0x74>
 800d406:	2f00      	cmp	r7, #0
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	d026      	beq.n	800d45a <__d2b+0x7e>
 800d40c:	4668      	mov	r0, sp
 800d40e:	9700      	str	r7, [sp, #0]
 800d410:	f7ff fd8a 	bl	800cf28 <__lo0bits>
 800d414:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d418:	b1e8      	cbz	r0, 800d456 <__d2b+0x7a>
 800d41a:	f1c0 0320 	rsb	r3, r0, #32
 800d41e:	fa02 f303 	lsl.w	r3, r2, r3
 800d422:	430b      	orrs	r3, r1
 800d424:	40c2      	lsrs	r2, r0
 800d426:	616b      	str	r3, [r5, #20]
 800d428:	9201      	str	r2, [sp, #4]
 800d42a:	9b01      	ldr	r3, [sp, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	bf14      	ite	ne
 800d430:	2102      	movne	r1, #2
 800d432:	2101      	moveq	r1, #1
 800d434:	61ab      	str	r3, [r5, #24]
 800d436:	6129      	str	r1, [r5, #16]
 800d438:	b1bc      	cbz	r4, 800d46a <__d2b+0x8e>
 800d43a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d43e:	4404      	add	r4, r0
 800d440:	6034      	str	r4, [r6, #0]
 800d442:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d448:	6018      	str	r0, [r3, #0]
 800d44a:	4628      	mov	r0, r5
 800d44c:	b003      	add	sp, #12
 800d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d454:	e7d7      	b.n	800d406 <__d2b+0x2a>
 800d456:	6169      	str	r1, [r5, #20]
 800d458:	e7e7      	b.n	800d42a <__d2b+0x4e>
 800d45a:	a801      	add	r0, sp, #4
 800d45c:	f7ff fd64 	bl	800cf28 <__lo0bits>
 800d460:	9b01      	ldr	r3, [sp, #4]
 800d462:	2101      	movs	r1, #1
 800d464:	616b      	str	r3, [r5, #20]
 800d466:	3020      	adds	r0, #32
 800d468:	e7e5      	b.n	800d436 <__d2b+0x5a>
 800d46a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d46e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800d472:	6030      	str	r0, [r6, #0]
 800d474:	6918      	ldr	r0, [r3, #16]
 800d476:	f7ff fd37 	bl	800cee8 <__hi0bits>
 800d47a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d47e:	e7e2      	b.n	800d446 <__d2b+0x6a>
 800d480:	0800e514 	.word	0x0800e514
 800d484:	0800e525 	.word	0x0800e525

0800d488 <__sflush_r>:
 800d488:	898a      	ldrh	r2, [r1, #12]
 800d48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48c:	4605      	mov	r5, r0
 800d48e:	0710      	lsls	r0, r2, #28
 800d490:	460c      	mov	r4, r1
 800d492:	d457      	bmi.n	800d544 <__sflush_r+0xbc>
 800d494:	684b      	ldr	r3, [r1, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	dc04      	bgt.n	800d4a4 <__sflush_r+0x1c>
 800d49a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	dc01      	bgt.n	800d4a4 <__sflush_r+0x1c>
 800d4a0:	2000      	movs	r0, #0
 800d4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	d0fa      	beq.n	800d4a0 <__sflush_r+0x18>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4b0:	682f      	ldr	r7, [r5, #0]
 800d4b2:	6a21      	ldr	r1, [r4, #32]
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	d032      	beq.n	800d51e <__sflush_r+0x96>
 800d4b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	075a      	lsls	r2, r3, #29
 800d4be:	d505      	bpl.n	800d4cc <__sflush_r+0x44>
 800d4c0:	6863      	ldr	r3, [r4, #4]
 800d4c2:	1ac0      	subs	r0, r0, r3
 800d4c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4c6:	b10b      	cbz	r3, 800d4cc <__sflush_r+0x44>
 800d4c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4ca:	1ac0      	subs	r0, r0, r3
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	6a21      	ldr	r1, [r4, #32]
 800d4d6:	47b0      	blx	r6
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	d106      	bne.n	800d4ec <__sflush_r+0x64>
 800d4de:	6829      	ldr	r1, [r5, #0]
 800d4e0:	291d      	cmp	r1, #29
 800d4e2:	d82b      	bhi.n	800d53c <__sflush_r+0xb4>
 800d4e4:	4a28      	ldr	r2, [pc, #160]	; (800d588 <__sflush_r+0x100>)
 800d4e6:	410a      	asrs	r2, r1
 800d4e8:	07d6      	lsls	r6, r2, #31
 800d4ea:	d427      	bmi.n	800d53c <__sflush_r+0xb4>
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	6062      	str	r2, [r4, #4]
 800d4f0:	6922      	ldr	r2, [r4, #16]
 800d4f2:	04d9      	lsls	r1, r3, #19
 800d4f4:	6022      	str	r2, [r4, #0]
 800d4f6:	d504      	bpl.n	800d502 <__sflush_r+0x7a>
 800d4f8:	1c42      	adds	r2, r0, #1
 800d4fa:	d101      	bne.n	800d500 <__sflush_r+0x78>
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	b903      	cbnz	r3, 800d502 <__sflush_r+0x7a>
 800d500:	6560      	str	r0, [r4, #84]	; 0x54
 800d502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d504:	602f      	str	r7, [r5, #0]
 800d506:	2900      	cmp	r1, #0
 800d508:	d0ca      	beq.n	800d4a0 <__sflush_r+0x18>
 800d50a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d50e:	4299      	cmp	r1, r3
 800d510:	d002      	beq.n	800d518 <__sflush_r+0x90>
 800d512:	4628      	mov	r0, r5
 800d514:	f7ff fbf8 	bl	800cd08 <_free_r>
 800d518:	2000      	movs	r0, #0
 800d51a:	6360      	str	r0, [r4, #52]	; 0x34
 800d51c:	e7c1      	b.n	800d4a2 <__sflush_r+0x1a>
 800d51e:	2301      	movs	r3, #1
 800d520:	4628      	mov	r0, r5
 800d522:	47b0      	blx	r6
 800d524:	1c41      	adds	r1, r0, #1
 800d526:	d1c8      	bne.n	800d4ba <__sflush_r+0x32>
 800d528:	682b      	ldr	r3, [r5, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d0c5      	beq.n	800d4ba <__sflush_r+0x32>
 800d52e:	2b1d      	cmp	r3, #29
 800d530:	d001      	beq.n	800d536 <__sflush_r+0xae>
 800d532:	2b16      	cmp	r3, #22
 800d534:	d101      	bne.n	800d53a <__sflush_r+0xb2>
 800d536:	602f      	str	r7, [r5, #0]
 800d538:	e7b2      	b.n	800d4a0 <__sflush_r+0x18>
 800d53a:	89a3      	ldrh	r3, [r4, #12]
 800d53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	e7ae      	b.n	800d4a2 <__sflush_r+0x1a>
 800d544:	690f      	ldr	r7, [r1, #16]
 800d546:	2f00      	cmp	r7, #0
 800d548:	d0aa      	beq.n	800d4a0 <__sflush_r+0x18>
 800d54a:	0793      	lsls	r3, r2, #30
 800d54c:	bf18      	it	ne
 800d54e:	2300      	movne	r3, #0
 800d550:	680e      	ldr	r6, [r1, #0]
 800d552:	bf08      	it	eq
 800d554:	694b      	ldreq	r3, [r1, #20]
 800d556:	1bf6      	subs	r6, r6, r7
 800d558:	600f      	str	r7, [r1, #0]
 800d55a:	608b      	str	r3, [r1, #8]
 800d55c:	2e00      	cmp	r6, #0
 800d55e:	dd9f      	ble.n	800d4a0 <__sflush_r+0x18>
 800d560:	4633      	mov	r3, r6
 800d562:	463a      	mov	r2, r7
 800d564:	4628      	mov	r0, r5
 800d566:	6a21      	ldr	r1, [r4, #32]
 800d568:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d56c:	47e0      	blx	ip
 800d56e:	2800      	cmp	r0, #0
 800d570:	dc06      	bgt.n	800d580 <__sflush_r+0xf8>
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	f04f 30ff 	mov.w	r0, #4294967295
 800d578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d57c:	81a3      	strh	r3, [r4, #12]
 800d57e:	e790      	b.n	800d4a2 <__sflush_r+0x1a>
 800d580:	4407      	add	r7, r0
 800d582:	1a36      	subs	r6, r6, r0
 800d584:	e7ea      	b.n	800d55c <__sflush_r+0xd4>
 800d586:	bf00      	nop
 800d588:	dfbffffe 	.word	0xdfbffffe

0800d58c <_fflush_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	690b      	ldr	r3, [r1, #16]
 800d590:	4605      	mov	r5, r0
 800d592:	460c      	mov	r4, r1
 800d594:	b913      	cbnz	r3, 800d59c <_fflush_r+0x10>
 800d596:	2500      	movs	r5, #0
 800d598:	4628      	mov	r0, r5
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	b118      	cbz	r0, 800d5a6 <_fflush_r+0x1a>
 800d59e:	6a03      	ldr	r3, [r0, #32]
 800d5a0:	b90b      	cbnz	r3, 800d5a6 <_fflush_r+0x1a>
 800d5a2:	f7fe fc2d 	bl	800be00 <__sinit>
 800d5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d0f3      	beq.n	800d596 <_fflush_r+0xa>
 800d5ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5b0:	07d0      	lsls	r0, r2, #31
 800d5b2:	d404      	bmi.n	800d5be <_fflush_r+0x32>
 800d5b4:	0599      	lsls	r1, r3, #22
 800d5b6:	d402      	bmi.n	800d5be <_fflush_r+0x32>
 800d5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5ba:	f7fe fd28 	bl	800c00e <__retarget_lock_acquire_recursive>
 800d5be:	4628      	mov	r0, r5
 800d5c0:	4621      	mov	r1, r4
 800d5c2:	f7ff ff61 	bl	800d488 <__sflush_r>
 800d5c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	07da      	lsls	r2, r3, #31
 800d5cc:	d4e4      	bmi.n	800d598 <_fflush_r+0xc>
 800d5ce:	89a3      	ldrh	r3, [r4, #12]
 800d5d0:	059b      	lsls	r3, r3, #22
 800d5d2:	d4e1      	bmi.n	800d598 <_fflush_r+0xc>
 800d5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5d6:	f7fe fd1b 	bl	800c010 <__retarget_lock_release_recursive>
 800d5da:	e7dd      	b.n	800d598 <_fflush_r+0xc>

0800d5dc <memcpy>:
 800d5dc:	440a      	add	r2, r1
 800d5de:	4291      	cmp	r1, r2
 800d5e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5e4:	d100      	bne.n	800d5e8 <memcpy+0xc>
 800d5e6:	4770      	bx	lr
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5ee:	4291      	cmp	r1, r2
 800d5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5f4:	d1f9      	bne.n	800d5ea <memcpy+0xe>
 800d5f6:	bd10      	pop	{r4, pc}

0800d5f8 <__assert_func>:
 800d5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5fa:	4614      	mov	r4, r2
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	4b09      	ldr	r3, [pc, #36]	; (800d624 <__assert_func+0x2c>)
 800d600:	4605      	mov	r5, r0
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68d8      	ldr	r0, [r3, #12]
 800d606:	b14c      	cbz	r4, 800d61c <__assert_func+0x24>
 800d608:	4b07      	ldr	r3, [pc, #28]	; (800d628 <__assert_func+0x30>)
 800d60a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d60e:	9100      	str	r1, [sp, #0]
 800d610:	462b      	mov	r3, r5
 800d612:	4906      	ldr	r1, [pc, #24]	; (800d62c <__assert_func+0x34>)
 800d614:	f000 f842 	bl	800d69c <fiprintf>
 800d618:	f000 f852 	bl	800d6c0 <abort>
 800d61c:	4b04      	ldr	r3, [pc, #16]	; (800d630 <__assert_func+0x38>)
 800d61e:	461c      	mov	r4, r3
 800d620:	e7f3      	b.n	800d60a <__assert_func+0x12>
 800d622:	bf00      	nop
 800d624:	20000220 	.word	0x20000220
 800d628:	0800e686 	.word	0x0800e686
 800d62c:	0800e693 	.word	0x0800e693
 800d630:	0800e6c1 	.word	0x0800e6c1

0800d634 <_calloc_r>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	fba1 5402 	umull	r5, r4, r1, r2
 800d63a:	b934      	cbnz	r4, 800d64a <_calloc_r+0x16>
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7fd fe69 	bl	800b314 <_malloc_r>
 800d642:	4606      	mov	r6, r0
 800d644:	b928      	cbnz	r0, 800d652 <_calloc_r+0x1e>
 800d646:	4630      	mov	r0, r6
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	220c      	movs	r2, #12
 800d64c:	2600      	movs	r6, #0
 800d64e:	6002      	str	r2, [r0, #0]
 800d650:	e7f9      	b.n	800d646 <_calloc_r+0x12>
 800d652:	462a      	mov	r2, r5
 800d654:	4621      	mov	r1, r4
 800d656:	f7fe fc4c 	bl	800bef2 <memset>
 800d65a:	e7f4      	b.n	800d646 <_calloc_r+0x12>

0800d65c <__ascii_mbtowc>:
 800d65c:	b082      	sub	sp, #8
 800d65e:	b901      	cbnz	r1, 800d662 <__ascii_mbtowc+0x6>
 800d660:	a901      	add	r1, sp, #4
 800d662:	b142      	cbz	r2, 800d676 <__ascii_mbtowc+0x1a>
 800d664:	b14b      	cbz	r3, 800d67a <__ascii_mbtowc+0x1e>
 800d666:	7813      	ldrb	r3, [r2, #0]
 800d668:	600b      	str	r3, [r1, #0]
 800d66a:	7812      	ldrb	r2, [r2, #0]
 800d66c:	1e10      	subs	r0, r2, #0
 800d66e:	bf18      	it	ne
 800d670:	2001      	movne	r0, #1
 800d672:	b002      	add	sp, #8
 800d674:	4770      	bx	lr
 800d676:	4610      	mov	r0, r2
 800d678:	e7fb      	b.n	800d672 <__ascii_mbtowc+0x16>
 800d67a:	f06f 0001 	mvn.w	r0, #1
 800d67e:	e7f8      	b.n	800d672 <__ascii_mbtowc+0x16>

0800d680 <__ascii_wctomb>:
 800d680:	4603      	mov	r3, r0
 800d682:	4608      	mov	r0, r1
 800d684:	b141      	cbz	r1, 800d698 <__ascii_wctomb+0x18>
 800d686:	2aff      	cmp	r2, #255	; 0xff
 800d688:	d904      	bls.n	800d694 <__ascii_wctomb+0x14>
 800d68a:	228a      	movs	r2, #138	; 0x8a
 800d68c:	f04f 30ff 	mov.w	r0, #4294967295
 800d690:	601a      	str	r2, [r3, #0]
 800d692:	4770      	bx	lr
 800d694:	2001      	movs	r0, #1
 800d696:	700a      	strb	r2, [r1, #0]
 800d698:	4770      	bx	lr
	...

0800d69c <fiprintf>:
 800d69c:	b40e      	push	{r1, r2, r3}
 800d69e:	b503      	push	{r0, r1, lr}
 800d6a0:	4601      	mov	r1, r0
 800d6a2:	ab03      	add	r3, sp, #12
 800d6a4:	4805      	ldr	r0, [pc, #20]	; (800d6bc <fiprintf+0x20>)
 800d6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6aa:	6800      	ldr	r0, [r0, #0]
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	f000 f835 	bl	800d71c <_vfiprintf_r>
 800d6b2:	b002      	add	sp, #8
 800d6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6b8:	b003      	add	sp, #12
 800d6ba:	4770      	bx	lr
 800d6bc:	20000220 	.word	0x20000220

0800d6c0 <abort>:
 800d6c0:	2006      	movs	r0, #6
 800d6c2:	b508      	push	{r3, lr}
 800d6c4:	f000 fa02 	bl	800dacc <raise>
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	f7f5 fb0a 	bl	8002ce2 <_exit>

0800d6ce <__sfputc_r>:
 800d6ce:	6893      	ldr	r3, [r2, #8]
 800d6d0:	b410      	push	{r4}
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	6093      	str	r3, [r2, #8]
 800d6d8:	da07      	bge.n	800d6ea <__sfputc_r+0x1c>
 800d6da:	6994      	ldr	r4, [r2, #24]
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	db01      	blt.n	800d6e4 <__sfputc_r+0x16>
 800d6e0:	290a      	cmp	r1, #10
 800d6e2:	d102      	bne.n	800d6ea <__sfputc_r+0x1c>
 800d6e4:	bc10      	pop	{r4}
 800d6e6:	f000 b933 	b.w	800d950 <__swbuf_r>
 800d6ea:	6813      	ldr	r3, [r2, #0]
 800d6ec:	1c58      	adds	r0, r3, #1
 800d6ee:	6010      	str	r0, [r2, #0]
 800d6f0:	7019      	strb	r1, [r3, #0]
 800d6f2:	4608      	mov	r0, r1
 800d6f4:	bc10      	pop	{r4}
 800d6f6:	4770      	bx	lr

0800d6f8 <__sfputs_r>:
 800d6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	460f      	mov	r7, r1
 800d6fe:	4614      	mov	r4, r2
 800d700:	18d5      	adds	r5, r2, r3
 800d702:	42ac      	cmp	r4, r5
 800d704:	d101      	bne.n	800d70a <__sfputs_r+0x12>
 800d706:	2000      	movs	r0, #0
 800d708:	e007      	b.n	800d71a <__sfputs_r+0x22>
 800d70a:	463a      	mov	r2, r7
 800d70c:	4630      	mov	r0, r6
 800d70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d712:	f7ff ffdc 	bl	800d6ce <__sfputc_r>
 800d716:	1c43      	adds	r3, r0, #1
 800d718:	d1f3      	bne.n	800d702 <__sfputs_r+0xa>
 800d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d71c <_vfiprintf_r>:
 800d71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	460d      	mov	r5, r1
 800d722:	4614      	mov	r4, r2
 800d724:	4698      	mov	r8, r3
 800d726:	4606      	mov	r6, r0
 800d728:	b09d      	sub	sp, #116	; 0x74
 800d72a:	b118      	cbz	r0, 800d734 <_vfiprintf_r+0x18>
 800d72c:	6a03      	ldr	r3, [r0, #32]
 800d72e:	b90b      	cbnz	r3, 800d734 <_vfiprintf_r+0x18>
 800d730:	f7fe fb66 	bl	800be00 <__sinit>
 800d734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d736:	07d9      	lsls	r1, r3, #31
 800d738:	d405      	bmi.n	800d746 <_vfiprintf_r+0x2a>
 800d73a:	89ab      	ldrh	r3, [r5, #12]
 800d73c:	059a      	lsls	r2, r3, #22
 800d73e:	d402      	bmi.n	800d746 <_vfiprintf_r+0x2a>
 800d740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d742:	f7fe fc64 	bl	800c00e <__retarget_lock_acquire_recursive>
 800d746:	89ab      	ldrh	r3, [r5, #12]
 800d748:	071b      	lsls	r3, r3, #28
 800d74a:	d501      	bpl.n	800d750 <_vfiprintf_r+0x34>
 800d74c:	692b      	ldr	r3, [r5, #16]
 800d74e:	b99b      	cbnz	r3, 800d778 <_vfiprintf_r+0x5c>
 800d750:	4629      	mov	r1, r5
 800d752:	4630      	mov	r0, r6
 800d754:	f000 f93a 	bl	800d9cc <__swsetup_r>
 800d758:	b170      	cbz	r0, 800d778 <_vfiprintf_r+0x5c>
 800d75a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d75c:	07dc      	lsls	r4, r3, #31
 800d75e:	d504      	bpl.n	800d76a <_vfiprintf_r+0x4e>
 800d760:	f04f 30ff 	mov.w	r0, #4294967295
 800d764:	b01d      	add	sp, #116	; 0x74
 800d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76a:	89ab      	ldrh	r3, [r5, #12]
 800d76c:	0598      	lsls	r0, r3, #22
 800d76e:	d4f7      	bmi.n	800d760 <_vfiprintf_r+0x44>
 800d770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d772:	f7fe fc4d 	bl	800c010 <__retarget_lock_release_recursive>
 800d776:	e7f3      	b.n	800d760 <_vfiprintf_r+0x44>
 800d778:	2300      	movs	r3, #0
 800d77a:	9309      	str	r3, [sp, #36]	; 0x24
 800d77c:	2320      	movs	r3, #32
 800d77e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d782:	2330      	movs	r3, #48	; 0x30
 800d784:	f04f 0901 	mov.w	r9, #1
 800d788:	f8cd 800c 	str.w	r8, [sp, #12]
 800d78c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d93c <_vfiprintf_r+0x220>
 800d790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d794:	4623      	mov	r3, r4
 800d796:	469a      	mov	sl, r3
 800d798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d79c:	b10a      	cbz	r2, 800d7a2 <_vfiprintf_r+0x86>
 800d79e:	2a25      	cmp	r2, #37	; 0x25
 800d7a0:	d1f9      	bne.n	800d796 <_vfiprintf_r+0x7a>
 800d7a2:	ebba 0b04 	subs.w	fp, sl, r4
 800d7a6:	d00b      	beq.n	800d7c0 <_vfiprintf_r+0xa4>
 800d7a8:	465b      	mov	r3, fp
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	f7ff ffa2 	bl	800d6f8 <__sfputs_r>
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	f000 80a9 	beq.w	800d90c <_vfiprintf_r+0x1f0>
 800d7ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7bc:	445a      	add	r2, fp
 800d7be:	9209      	str	r2, [sp, #36]	; 0x24
 800d7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f000 80a1 	beq.w	800d90c <_vfiprintf_r+0x1f0>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7d4:	f10a 0a01 	add.w	sl, sl, #1
 800d7d8:	9304      	str	r3, [sp, #16]
 800d7da:	9307      	str	r3, [sp, #28]
 800d7dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7e0:	931a      	str	r3, [sp, #104]	; 0x68
 800d7e2:	4654      	mov	r4, sl
 800d7e4:	2205      	movs	r2, #5
 800d7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ea:	4854      	ldr	r0, [pc, #336]	; (800d93c <_vfiprintf_r+0x220>)
 800d7ec:	f7fe fc11 	bl	800c012 <memchr>
 800d7f0:	9a04      	ldr	r2, [sp, #16]
 800d7f2:	b9d8      	cbnz	r0, 800d82c <_vfiprintf_r+0x110>
 800d7f4:	06d1      	lsls	r1, r2, #27
 800d7f6:	bf44      	itt	mi
 800d7f8:	2320      	movmi	r3, #32
 800d7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7fe:	0713      	lsls	r3, r2, #28
 800d800:	bf44      	itt	mi
 800d802:	232b      	movmi	r3, #43	; 0x2b
 800d804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d808:	f89a 3000 	ldrb.w	r3, [sl]
 800d80c:	2b2a      	cmp	r3, #42	; 0x2a
 800d80e:	d015      	beq.n	800d83c <_vfiprintf_r+0x120>
 800d810:	4654      	mov	r4, sl
 800d812:	2000      	movs	r0, #0
 800d814:	f04f 0c0a 	mov.w	ip, #10
 800d818:	9a07      	ldr	r2, [sp, #28]
 800d81a:	4621      	mov	r1, r4
 800d81c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d820:	3b30      	subs	r3, #48	; 0x30
 800d822:	2b09      	cmp	r3, #9
 800d824:	d94d      	bls.n	800d8c2 <_vfiprintf_r+0x1a6>
 800d826:	b1b0      	cbz	r0, 800d856 <_vfiprintf_r+0x13a>
 800d828:	9207      	str	r2, [sp, #28]
 800d82a:	e014      	b.n	800d856 <_vfiprintf_r+0x13a>
 800d82c:	eba0 0308 	sub.w	r3, r0, r8
 800d830:	fa09 f303 	lsl.w	r3, r9, r3
 800d834:	4313      	orrs	r3, r2
 800d836:	46a2      	mov	sl, r4
 800d838:	9304      	str	r3, [sp, #16]
 800d83a:	e7d2      	b.n	800d7e2 <_vfiprintf_r+0xc6>
 800d83c:	9b03      	ldr	r3, [sp, #12]
 800d83e:	1d19      	adds	r1, r3, #4
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	9103      	str	r1, [sp, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	bfbb      	ittet	lt
 800d848:	425b      	neglt	r3, r3
 800d84a:	f042 0202 	orrlt.w	r2, r2, #2
 800d84e:	9307      	strge	r3, [sp, #28]
 800d850:	9307      	strlt	r3, [sp, #28]
 800d852:	bfb8      	it	lt
 800d854:	9204      	strlt	r2, [sp, #16]
 800d856:	7823      	ldrb	r3, [r4, #0]
 800d858:	2b2e      	cmp	r3, #46	; 0x2e
 800d85a:	d10c      	bne.n	800d876 <_vfiprintf_r+0x15a>
 800d85c:	7863      	ldrb	r3, [r4, #1]
 800d85e:	2b2a      	cmp	r3, #42	; 0x2a
 800d860:	d134      	bne.n	800d8cc <_vfiprintf_r+0x1b0>
 800d862:	9b03      	ldr	r3, [sp, #12]
 800d864:	3402      	adds	r4, #2
 800d866:	1d1a      	adds	r2, r3, #4
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	9203      	str	r2, [sp, #12]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	bfb8      	it	lt
 800d870:	f04f 33ff 	movlt.w	r3, #4294967295
 800d874:	9305      	str	r3, [sp, #20]
 800d876:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d940 <_vfiprintf_r+0x224>
 800d87a:	2203      	movs	r2, #3
 800d87c:	4650      	mov	r0, sl
 800d87e:	7821      	ldrb	r1, [r4, #0]
 800d880:	f7fe fbc7 	bl	800c012 <memchr>
 800d884:	b138      	cbz	r0, 800d896 <_vfiprintf_r+0x17a>
 800d886:	2240      	movs	r2, #64	; 0x40
 800d888:	9b04      	ldr	r3, [sp, #16]
 800d88a:	eba0 000a 	sub.w	r0, r0, sl
 800d88e:	4082      	lsls	r2, r0
 800d890:	4313      	orrs	r3, r2
 800d892:	3401      	adds	r4, #1
 800d894:	9304      	str	r3, [sp, #16]
 800d896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d89a:	2206      	movs	r2, #6
 800d89c:	4829      	ldr	r0, [pc, #164]	; (800d944 <_vfiprintf_r+0x228>)
 800d89e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8a2:	f7fe fbb6 	bl	800c012 <memchr>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d03f      	beq.n	800d92a <_vfiprintf_r+0x20e>
 800d8aa:	4b27      	ldr	r3, [pc, #156]	; (800d948 <_vfiprintf_r+0x22c>)
 800d8ac:	bb1b      	cbnz	r3, 800d8f6 <_vfiprintf_r+0x1da>
 800d8ae:	9b03      	ldr	r3, [sp, #12]
 800d8b0:	3307      	adds	r3, #7
 800d8b2:	f023 0307 	bic.w	r3, r3, #7
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	9303      	str	r3, [sp, #12]
 800d8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8bc:	443b      	add	r3, r7
 800d8be:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c0:	e768      	b.n	800d794 <_vfiprintf_r+0x78>
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	2001      	movs	r0, #1
 800d8c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8ca:	e7a6      	b.n	800d81a <_vfiprintf_r+0xfe>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f04f 0c0a 	mov.w	ip, #10
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	3401      	adds	r4, #1
 800d8d6:	9305      	str	r3, [sp, #20]
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8de:	3a30      	subs	r2, #48	; 0x30
 800d8e0:	2a09      	cmp	r2, #9
 800d8e2:	d903      	bls.n	800d8ec <_vfiprintf_r+0x1d0>
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d0c6      	beq.n	800d876 <_vfiprintf_r+0x15a>
 800d8e8:	9105      	str	r1, [sp, #20]
 800d8ea:	e7c4      	b.n	800d876 <_vfiprintf_r+0x15a>
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8f4:	e7f0      	b.n	800d8d8 <_vfiprintf_r+0x1bc>
 800d8f6:	ab03      	add	r3, sp, #12
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	462a      	mov	r2, r5
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4b13      	ldr	r3, [pc, #76]	; (800d94c <_vfiprintf_r+0x230>)
 800d900:	a904      	add	r1, sp, #16
 800d902:	f7fd fe2f 	bl	800b564 <_printf_float>
 800d906:	4607      	mov	r7, r0
 800d908:	1c78      	adds	r0, r7, #1
 800d90a:	d1d6      	bne.n	800d8ba <_vfiprintf_r+0x19e>
 800d90c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d90e:	07d9      	lsls	r1, r3, #31
 800d910:	d405      	bmi.n	800d91e <_vfiprintf_r+0x202>
 800d912:	89ab      	ldrh	r3, [r5, #12]
 800d914:	059a      	lsls	r2, r3, #22
 800d916:	d402      	bmi.n	800d91e <_vfiprintf_r+0x202>
 800d918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d91a:	f7fe fb79 	bl	800c010 <__retarget_lock_release_recursive>
 800d91e:	89ab      	ldrh	r3, [r5, #12]
 800d920:	065b      	lsls	r3, r3, #25
 800d922:	f53f af1d 	bmi.w	800d760 <_vfiprintf_r+0x44>
 800d926:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d928:	e71c      	b.n	800d764 <_vfiprintf_r+0x48>
 800d92a:	ab03      	add	r3, sp, #12
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	462a      	mov	r2, r5
 800d930:	4630      	mov	r0, r6
 800d932:	4b06      	ldr	r3, [pc, #24]	; (800d94c <_vfiprintf_r+0x230>)
 800d934:	a904      	add	r1, sp, #16
 800d936:	f7fe f8b5 	bl	800baa4 <_printf_i>
 800d93a:	e7e4      	b.n	800d906 <_vfiprintf_r+0x1ea>
 800d93c:	0800e7c3 	.word	0x0800e7c3
 800d940:	0800e7c9 	.word	0x0800e7c9
 800d944:	0800e7cd 	.word	0x0800e7cd
 800d948:	0800b565 	.word	0x0800b565
 800d94c:	0800d6f9 	.word	0x0800d6f9

0800d950 <__swbuf_r>:
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d952:	460e      	mov	r6, r1
 800d954:	4614      	mov	r4, r2
 800d956:	4605      	mov	r5, r0
 800d958:	b118      	cbz	r0, 800d962 <__swbuf_r+0x12>
 800d95a:	6a03      	ldr	r3, [r0, #32]
 800d95c:	b90b      	cbnz	r3, 800d962 <__swbuf_r+0x12>
 800d95e:	f7fe fa4f 	bl	800be00 <__sinit>
 800d962:	69a3      	ldr	r3, [r4, #24]
 800d964:	60a3      	str	r3, [r4, #8]
 800d966:	89a3      	ldrh	r3, [r4, #12]
 800d968:	071a      	lsls	r2, r3, #28
 800d96a:	d525      	bpl.n	800d9b8 <__swbuf_r+0x68>
 800d96c:	6923      	ldr	r3, [r4, #16]
 800d96e:	b31b      	cbz	r3, 800d9b8 <__swbuf_r+0x68>
 800d970:	6823      	ldr	r3, [r4, #0]
 800d972:	6922      	ldr	r2, [r4, #16]
 800d974:	b2f6      	uxtb	r6, r6
 800d976:	1a98      	subs	r0, r3, r2
 800d978:	6963      	ldr	r3, [r4, #20]
 800d97a:	4637      	mov	r7, r6
 800d97c:	4283      	cmp	r3, r0
 800d97e:	dc04      	bgt.n	800d98a <__swbuf_r+0x3a>
 800d980:	4621      	mov	r1, r4
 800d982:	4628      	mov	r0, r5
 800d984:	f7ff fe02 	bl	800d58c <_fflush_r>
 800d988:	b9e0      	cbnz	r0, 800d9c4 <__swbuf_r+0x74>
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	60a3      	str	r3, [r4, #8]
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	6022      	str	r2, [r4, #0]
 800d996:	701e      	strb	r6, [r3, #0]
 800d998:	6962      	ldr	r2, [r4, #20]
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d004      	beq.n	800d9aa <__swbuf_r+0x5a>
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	07db      	lsls	r3, r3, #31
 800d9a4:	d506      	bpl.n	800d9b4 <__swbuf_r+0x64>
 800d9a6:	2e0a      	cmp	r6, #10
 800d9a8:	d104      	bne.n	800d9b4 <__swbuf_r+0x64>
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	f7ff fded 	bl	800d58c <_fflush_r>
 800d9b2:	b938      	cbnz	r0, 800d9c4 <__swbuf_r+0x74>
 800d9b4:	4638      	mov	r0, r7
 800d9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	f000 f806 	bl	800d9cc <__swsetup_r>
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	d0d5      	beq.n	800d970 <__swbuf_r+0x20>
 800d9c4:	f04f 37ff 	mov.w	r7, #4294967295
 800d9c8:	e7f4      	b.n	800d9b4 <__swbuf_r+0x64>
	...

0800d9cc <__swsetup_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4b2a      	ldr	r3, [pc, #168]	; (800da78 <__swsetup_r+0xac>)
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	6818      	ldr	r0, [r3, #0]
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	b118      	cbz	r0, 800d9e0 <__swsetup_r+0x14>
 800d9d8:	6a03      	ldr	r3, [r0, #32]
 800d9da:	b90b      	cbnz	r3, 800d9e0 <__swsetup_r+0x14>
 800d9dc:	f7fe fa10 	bl	800be00 <__sinit>
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9e6:	0718      	lsls	r0, r3, #28
 800d9e8:	d422      	bmi.n	800da30 <__swsetup_r+0x64>
 800d9ea:	06d9      	lsls	r1, r3, #27
 800d9ec:	d407      	bmi.n	800d9fe <__swsetup_r+0x32>
 800d9ee:	2309      	movs	r3, #9
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9fa:	81a3      	strh	r3, [r4, #12]
 800d9fc:	e034      	b.n	800da68 <__swsetup_r+0x9c>
 800d9fe:	0758      	lsls	r0, r3, #29
 800da00:	d512      	bpl.n	800da28 <__swsetup_r+0x5c>
 800da02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da04:	b141      	cbz	r1, 800da18 <__swsetup_r+0x4c>
 800da06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da0a:	4299      	cmp	r1, r3
 800da0c:	d002      	beq.n	800da14 <__swsetup_r+0x48>
 800da0e:	4628      	mov	r0, r5
 800da10:	f7ff f97a 	bl	800cd08 <_free_r>
 800da14:	2300      	movs	r3, #0
 800da16:	6363      	str	r3, [r4, #52]	; 0x34
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da1e:	81a3      	strh	r3, [r4, #12]
 800da20:	2300      	movs	r3, #0
 800da22:	6063      	str	r3, [r4, #4]
 800da24:	6923      	ldr	r3, [r4, #16]
 800da26:	6023      	str	r3, [r4, #0]
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f043 0308 	orr.w	r3, r3, #8
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	b94b      	cbnz	r3, 800da48 <__swsetup_r+0x7c>
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da3e:	d003      	beq.n	800da48 <__swsetup_r+0x7c>
 800da40:	4621      	mov	r1, r4
 800da42:	4628      	mov	r0, r5
 800da44:	f000 f883 	bl	800db4e <__smakebuf_r>
 800da48:	89a0      	ldrh	r0, [r4, #12]
 800da4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da4e:	f010 0301 	ands.w	r3, r0, #1
 800da52:	d00a      	beq.n	800da6a <__swsetup_r+0x9e>
 800da54:	2300      	movs	r3, #0
 800da56:	60a3      	str	r3, [r4, #8]
 800da58:	6963      	ldr	r3, [r4, #20]
 800da5a:	425b      	negs	r3, r3
 800da5c:	61a3      	str	r3, [r4, #24]
 800da5e:	6923      	ldr	r3, [r4, #16]
 800da60:	b943      	cbnz	r3, 800da74 <__swsetup_r+0xa8>
 800da62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da66:	d1c4      	bne.n	800d9f2 <__swsetup_r+0x26>
 800da68:	bd38      	pop	{r3, r4, r5, pc}
 800da6a:	0781      	lsls	r1, r0, #30
 800da6c:	bf58      	it	pl
 800da6e:	6963      	ldrpl	r3, [r4, #20]
 800da70:	60a3      	str	r3, [r4, #8]
 800da72:	e7f4      	b.n	800da5e <__swsetup_r+0x92>
 800da74:	2000      	movs	r0, #0
 800da76:	e7f7      	b.n	800da68 <__swsetup_r+0x9c>
 800da78:	20000220 	.word	0x20000220

0800da7c <_raise_r>:
 800da7c:	291f      	cmp	r1, #31
 800da7e:	b538      	push	{r3, r4, r5, lr}
 800da80:	4604      	mov	r4, r0
 800da82:	460d      	mov	r5, r1
 800da84:	d904      	bls.n	800da90 <_raise_r+0x14>
 800da86:	2316      	movs	r3, #22
 800da88:	6003      	str	r3, [r0, #0]
 800da8a:	f04f 30ff 	mov.w	r0, #4294967295
 800da8e:	bd38      	pop	{r3, r4, r5, pc}
 800da90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800da92:	b112      	cbz	r2, 800da9a <_raise_r+0x1e>
 800da94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da98:	b94b      	cbnz	r3, 800daae <_raise_r+0x32>
 800da9a:	4620      	mov	r0, r4
 800da9c:	f000 f830 	bl	800db00 <_getpid_r>
 800daa0:	462a      	mov	r2, r5
 800daa2:	4601      	mov	r1, r0
 800daa4:	4620      	mov	r0, r4
 800daa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daaa:	f000 b817 	b.w	800dadc <_kill_r>
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d00a      	beq.n	800dac8 <_raise_r+0x4c>
 800dab2:	1c59      	adds	r1, r3, #1
 800dab4:	d103      	bne.n	800dabe <_raise_r+0x42>
 800dab6:	2316      	movs	r3, #22
 800dab8:	6003      	str	r3, [r0, #0]
 800daba:	2001      	movs	r0, #1
 800dabc:	e7e7      	b.n	800da8e <_raise_r+0x12>
 800dabe:	2400      	movs	r4, #0
 800dac0:	4628      	mov	r0, r5
 800dac2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dac6:	4798      	blx	r3
 800dac8:	2000      	movs	r0, #0
 800daca:	e7e0      	b.n	800da8e <_raise_r+0x12>

0800dacc <raise>:
 800dacc:	4b02      	ldr	r3, [pc, #8]	; (800dad8 <raise+0xc>)
 800dace:	4601      	mov	r1, r0
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	f7ff bfd3 	b.w	800da7c <_raise_r>
 800dad6:	bf00      	nop
 800dad8:	20000220 	.word	0x20000220

0800dadc <_kill_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	2300      	movs	r3, #0
 800dae0:	4d06      	ldr	r5, [pc, #24]	; (800dafc <_kill_r+0x20>)
 800dae2:	4604      	mov	r4, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	4611      	mov	r1, r2
 800dae8:	602b      	str	r3, [r5, #0]
 800daea:	f7f5 f8ea 	bl	8002cc2 <_kill>
 800daee:	1c43      	adds	r3, r0, #1
 800daf0:	d102      	bne.n	800daf8 <_kill_r+0x1c>
 800daf2:	682b      	ldr	r3, [r5, #0]
 800daf4:	b103      	cbz	r3, 800daf8 <_kill_r+0x1c>
 800daf6:	6023      	str	r3, [r4, #0]
 800daf8:	bd38      	pop	{r3, r4, r5, pc}
 800dafa:	bf00      	nop
 800dafc:	20001df4 	.word	0x20001df4

0800db00 <_getpid_r>:
 800db00:	f7f5 b8d8 	b.w	8002cb4 <_getpid>

0800db04 <__swhatbuf_r>:
 800db04:	b570      	push	{r4, r5, r6, lr}
 800db06:	460c      	mov	r4, r1
 800db08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0c:	4615      	mov	r5, r2
 800db0e:	2900      	cmp	r1, #0
 800db10:	461e      	mov	r6, r3
 800db12:	b096      	sub	sp, #88	; 0x58
 800db14:	da0c      	bge.n	800db30 <__swhatbuf_r+0x2c>
 800db16:	89a3      	ldrh	r3, [r4, #12]
 800db18:	2100      	movs	r1, #0
 800db1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db1e:	bf0c      	ite	eq
 800db20:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800db24:	2340      	movne	r3, #64	; 0x40
 800db26:	2000      	movs	r0, #0
 800db28:	6031      	str	r1, [r6, #0]
 800db2a:	602b      	str	r3, [r5, #0]
 800db2c:	b016      	add	sp, #88	; 0x58
 800db2e:	bd70      	pop	{r4, r5, r6, pc}
 800db30:	466a      	mov	r2, sp
 800db32:	f000 f849 	bl	800dbc8 <_fstat_r>
 800db36:	2800      	cmp	r0, #0
 800db38:	dbed      	blt.n	800db16 <__swhatbuf_r+0x12>
 800db3a:	9901      	ldr	r1, [sp, #4]
 800db3c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db40:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db44:	4259      	negs	r1, r3
 800db46:	4159      	adcs	r1, r3
 800db48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db4c:	e7eb      	b.n	800db26 <__swhatbuf_r+0x22>

0800db4e <__smakebuf_r>:
 800db4e:	898b      	ldrh	r3, [r1, #12]
 800db50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db52:	079d      	lsls	r5, r3, #30
 800db54:	4606      	mov	r6, r0
 800db56:	460c      	mov	r4, r1
 800db58:	d507      	bpl.n	800db6a <__smakebuf_r+0x1c>
 800db5a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db5e:	6023      	str	r3, [r4, #0]
 800db60:	6123      	str	r3, [r4, #16]
 800db62:	2301      	movs	r3, #1
 800db64:	6163      	str	r3, [r4, #20]
 800db66:	b002      	add	sp, #8
 800db68:	bd70      	pop	{r4, r5, r6, pc}
 800db6a:	466a      	mov	r2, sp
 800db6c:	ab01      	add	r3, sp, #4
 800db6e:	f7ff ffc9 	bl	800db04 <__swhatbuf_r>
 800db72:	9900      	ldr	r1, [sp, #0]
 800db74:	4605      	mov	r5, r0
 800db76:	4630      	mov	r0, r6
 800db78:	f7fd fbcc 	bl	800b314 <_malloc_r>
 800db7c:	b948      	cbnz	r0, 800db92 <__smakebuf_r+0x44>
 800db7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db82:	059a      	lsls	r2, r3, #22
 800db84:	d4ef      	bmi.n	800db66 <__smakebuf_r+0x18>
 800db86:	f023 0303 	bic.w	r3, r3, #3
 800db8a:	f043 0302 	orr.w	r3, r3, #2
 800db8e:	81a3      	strh	r3, [r4, #12]
 800db90:	e7e3      	b.n	800db5a <__smakebuf_r+0xc>
 800db92:	89a3      	ldrh	r3, [r4, #12]
 800db94:	6020      	str	r0, [r4, #0]
 800db96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db9a:	81a3      	strh	r3, [r4, #12]
 800db9c:	9b00      	ldr	r3, [sp, #0]
 800db9e:	6120      	str	r0, [r4, #16]
 800dba0:	6163      	str	r3, [r4, #20]
 800dba2:	9b01      	ldr	r3, [sp, #4]
 800dba4:	b15b      	cbz	r3, 800dbbe <__smakebuf_r+0x70>
 800dba6:	4630      	mov	r0, r6
 800dba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbac:	f000 f81e 	bl	800dbec <_isatty_r>
 800dbb0:	b128      	cbz	r0, 800dbbe <__smakebuf_r+0x70>
 800dbb2:	89a3      	ldrh	r3, [r4, #12]
 800dbb4:	f023 0303 	bic.w	r3, r3, #3
 800dbb8:	f043 0301 	orr.w	r3, r3, #1
 800dbbc:	81a3      	strh	r3, [r4, #12]
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	431d      	orrs	r5, r3
 800dbc2:	81a5      	strh	r5, [r4, #12]
 800dbc4:	e7cf      	b.n	800db66 <__smakebuf_r+0x18>
	...

0800dbc8 <_fstat_r>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	2300      	movs	r3, #0
 800dbcc:	4d06      	ldr	r5, [pc, #24]	; (800dbe8 <_fstat_r+0x20>)
 800dbce:	4604      	mov	r4, r0
 800dbd0:	4608      	mov	r0, r1
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	602b      	str	r3, [r5, #0]
 800dbd6:	f7f5 f8d2 	bl	8002d7e <_fstat>
 800dbda:	1c43      	adds	r3, r0, #1
 800dbdc:	d102      	bne.n	800dbe4 <_fstat_r+0x1c>
 800dbde:	682b      	ldr	r3, [r5, #0]
 800dbe0:	b103      	cbz	r3, 800dbe4 <_fstat_r+0x1c>
 800dbe2:	6023      	str	r3, [r4, #0]
 800dbe4:	bd38      	pop	{r3, r4, r5, pc}
 800dbe6:	bf00      	nop
 800dbe8:	20001df4 	.word	0x20001df4

0800dbec <_isatty_r>:
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	2300      	movs	r3, #0
 800dbf0:	4d05      	ldr	r5, [pc, #20]	; (800dc08 <_isatty_r+0x1c>)
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	4608      	mov	r0, r1
 800dbf6:	602b      	str	r3, [r5, #0]
 800dbf8:	f7f5 f8d0 	bl	8002d9c <_isatty>
 800dbfc:	1c43      	adds	r3, r0, #1
 800dbfe:	d102      	bne.n	800dc06 <_isatty_r+0x1a>
 800dc00:	682b      	ldr	r3, [r5, #0]
 800dc02:	b103      	cbz	r3, 800dc06 <_isatty_r+0x1a>
 800dc04:	6023      	str	r3, [r4, #0]
 800dc06:	bd38      	pop	{r3, r4, r5, pc}
 800dc08:	20001df4 	.word	0x20001df4

0800dc0c <log>:
 800dc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0e:	4604      	mov	r4, r0
 800dc10:	460d      	mov	r5, r1
 800dc12:	f000 f835 	bl	800dc80 <__ieee754_log>
 800dc16:	4622      	mov	r2, r4
 800dc18:	4606      	mov	r6, r0
 800dc1a:	460f      	mov	r7, r1
 800dc1c:	462b      	mov	r3, r5
 800dc1e:	4620      	mov	r0, r4
 800dc20:	4629      	mov	r1, r5
 800dc22:	f7f2 ff2f 	bl	8000a84 <__aeabi_dcmpun>
 800dc26:	b998      	cbnz	r0, 800dc50 <log+0x44>
 800dc28:	2200      	movs	r2, #0
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	4629      	mov	r1, r5
 800dc30:	f7f2 ff1e 	bl	8000a70 <__aeabi_dcmpgt>
 800dc34:	b960      	cbnz	r0, 800dc50 <log+0x44>
 800dc36:	2200      	movs	r2, #0
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	f7f2 feef 	bl	8000a20 <__aeabi_dcmpeq>
 800dc42:	b140      	cbz	r0, 800dc56 <log+0x4a>
 800dc44:	f7fe f9b8 	bl	800bfb8 <__errno>
 800dc48:	2322      	movs	r3, #34	; 0x22
 800dc4a:	2600      	movs	r6, #0
 800dc4c:	4f06      	ldr	r7, [pc, #24]	; (800dc68 <log+0x5c>)
 800dc4e:	6003      	str	r3, [r0, #0]
 800dc50:	4630      	mov	r0, r6
 800dc52:	4639      	mov	r1, r7
 800dc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc56:	f7fe f9af 	bl	800bfb8 <__errno>
 800dc5a:	2321      	movs	r3, #33	; 0x21
 800dc5c:	6003      	str	r3, [r0, #0]
 800dc5e:	4803      	ldr	r0, [pc, #12]	; (800dc6c <log+0x60>)
 800dc60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc64:	f000 b804 	b.w	800dc70 <nan>
 800dc68:	fff00000 	.word	0xfff00000
 800dc6c:	0800e6c1 	.word	0x0800e6c1

0800dc70 <nan>:
 800dc70:	2000      	movs	r0, #0
 800dc72:	4901      	ldr	r1, [pc, #4]	; (800dc78 <nan+0x8>)
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	7ff80000 	.word	0x7ff80000
 800dc7c:	00000000 	.word	0x00000000

0800dc80 <__ieee754_log>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	460d      	mov	r5, r1
 800dc8e:	b087      	sub	sp, #28
 800dc90:	da24      	bge.n	800dcdc <__ieee754_log+0x5c>
 800dc92:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800dc96:	4304      	orrs	r4, r0
 800dc98:	d108      	bne.n	800dcac <__ieee754_log+0x2c>
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	2000      	movs	r0, #0
 800dca0:	49cb      	ldr	r1, [pc, #812]	; (800dfd0 <__ieee754_log+0x350>)
 800dca2:	f7f2 fd7f 	bl	80007a4 <__aeabi_ddiv>
 800dca6:	b007      	add	sp, #28
 800dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcac:	2900      	cmp	r1, #0
 800dcae:	da04      	bge.n	800dcba <__ieee754_log+0x3a>
 800dcb0:	f7f2 fa96 	bl	80001e0 <__aeabi_dsub>
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e7f3      	b.n	800dca2 <__ieee754_log+0x22>
 800dcba:	2200      	movs	r2, #0
 800dcbc:	4bc5      	ldr	r3, [pc, #788]	; (800dfd4 <__ieee754_log+0x354>)
 800dcbe:	f7f2 fc47 	bl	8000550 <__aeabi_dmul>
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	460d      	mov	r5, r1
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800dccc:	48c2      	ldr	r0, [pc, #776]	; (800dfd8 <__ieee754_log+0x358>)
 800dcce:	4285      	cmp	r5, r0
 800dcd0:	dd06      	ble.n	800dce0 <__ieee754_log+0x60>
 800dcd2:	4610      	mov	r0, r2
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	f7f2 fa85 	bl	80001e4 <__adddf3>
 800dcda:	e7e4      	b.n	800dca6 <__ieee754_log+0x26>
 800dcdc:	2100      	movs	r1, #0
 800dcde:	e7f5      	b.n	800dccc <__ieee754_log+0x4c>
 800dce0:	152c      	asrs	r4, r5, #20
 800dce2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dce6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dcea:	440c      	add	r4, r1
 800dcec:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800dcf0:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800dcf4:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800dcf8:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800dcfc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800dd00:	ea41 0305 	orr.w	r3, r1, r5
 800dd04:	4610      	mov	r0, r2
 800dd06:	4619      	mov	r1, r3
 800dd08:	2200      	movs	r2, #0
 800dd0a:	4bb4      	ldr	r3, [pc, #720]	; (800dfdc <__ieee754_log+0x35c>)
 800dd0c:	f7f2 fa68 	bl	80001e0 <__aeabi_dsub>
 800dd10:	1cab      	adds	r3, r5, #2
 800dd12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	4682      	mov	sl, r0
 800dd1a:	468b      	mov	fp, r1
 800dd1c:	f04f 0200 	mov.w	r2, #0
 800dd20:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800dd24:	dc53      	bgt.n	800ddce <__ieee754_log+0x14e>
 800dd26:	2300      	movs	r3, #0
 800dd28:	f7f2 fe7a 	bl	8000a20 <__aeabi_dcmpeq>
 800dd2c:	b1d0      	cbz	r0, 800dd64 <__ieee754_log+0xe4>
 800dd2e:	2c00      	cmp	r4, #0
 800dd30:	f000 8122 	beq.w	800df78 <__ieee754_log+0x2f8>
 800dd34:	4620      	mov	r0, r4
 800dd36:	f7f2 fba1 	bl	800047c <__aeabi_i2d>
 800dd3a:	a391      	add	r3, pc, #580	; (adr r3, 800df80 <__ieee754_log+0x300>)
 800dd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd40:	4606      	mov	r6, r0
 800dd42:	460f      	mov	r7, r1
 800dd44:	f7f2 fc04 	bl	8000550 <__aeabi_dmul>
 800dd48:	a38f      	add	r3, pc, #572	; (adr r3, 800df88 <__ieee754_log+0x308>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	4604      	mov	r4, r0
 800dd50:	460d      	mov	r5, r1
 800dd52:	4630      	mov	r0, r6
 800dd54:	4639      	mov	r1, r7
 800dd56:	f7f2 fbfb 	bl	8000550 <__aeabi_dmul>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	4620      	mov	r0, r4
 800dd60:	4629      	mov	r1, r5
 800dd62:	e7b8      	b.n	800dcd6 <__ieee754_log+0x56>
 800dd64:	a38a      	add	r3, pc, #552	; (adr r3, 800df90 <__ieee754_log+0x310>)
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	4650      	mov	r0, sl
 800dd6c:	4659      	mov	r1, fp
 800dd6e:	f7f2 fbef 	bl	8000550 <__aeabi_dmul>
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	2000      	movs	r0, #0
 800dd78:	4999      	ldr	r1, [pc, #612]	; (800dfe0 <__ieee754_log+0x360>)
 800dd7a:	f7f2 fa31 	bl	80001e0 <__aeabi_dsub>
 800dd7e:	4652      	mov	r2, sl
 800dd80:	4606      	mov	r6, r0
 800dd82:	460f      	mov	r7, r1
 800dd84:	465b      	mov	r3, fp
 800dd86:	4650      	mov	r0, sl
 800dd88:	4659      	mov	r1, fp
 800dd8a:	f7f2 fbe1 	bl	8000550 <__aeabi_dmul>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	4630      	mov	r0, r6
 800dd94:	4639      	mov	r1, r7
 800dd96:	f7f2 fbdb 	bl	8000550 <__aeabi_dmul>
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	b914      	cbnz	r4, 800dda6 <__ieee754_log+0x126>
 800dda0:	4632      	mov	r2, r6
 800dda2:	463b      	mov	r3, r7
 800dda4:	e0a2      	b.n	800deec <__ieee754_log+0x26c>
 800dda6:	4620      	mov	r0, r4
 800dda8:	f7f2 fb68 	bl	800047c <__aeabi_i2d>
 800ddac:	a374      	add	r3, pc, #464	; (adr r3, 800df80 <__ieee754_log+0x300>)
 800ddae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb2:	4680      	mov	r8, r0
 800ddb4:	4689      	mov	r9, r1
 800ddb6:	f7f2 fbcb 	bl	8000550 <__aeabi_dmul>
 800ddba:	a373      	add	r3, pc, #460	; (adr r3, 800df88 <__ieee754_log+0x308>)
 800ddbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	4640      	mov	r0, r8
 800ddc6:	4649      	mov	r1, r9
 800ddc8:	f7f2 fbc2 	bl	8000550 <__aeabi_dmul>
 800ddcc:	e0a7      	b.n	800df1e <__ieee754_log+0x29e>
 800ddce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ddd2:	f7f2 fa07 	bl	80001e4 <__adddf3>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4650      	mov	r0, sl
 800dddc:	4659      	mov	r1, fp
 800ddde:	f7f2 fce1 	bl	80007a4 <__aeabi_ddiv>
 800dde2:	e9cd 0100 	strd	r0, r1, [sp]
 800dde6:	4620      	mov	r0, r4
 800dde8:	f7f2 fb48 	bl	800047c <__aeabi_i2d>
 800ddec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	f7f2 fbaa 	bl	8000550 <__aeabi_dmul>
 800ddfc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800de00:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800de04:	4602      	mov	r2, r0
 800de06:	9305      	str	r3, [sp, #20]
 800de08:	460b      	mov	r3, r1
 800de0a:	4606      	mov	r6, r0
 800de0c:	460f      	mov	r7, r1
 800de0e:	f7f2 fb9f 	bl	8000550 <__aeabi_dmul>
 800de12:	a361      	add	r3, pc, #388	; (adr r3, 800df98 <__ieee754_log+0x318>)
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	4680      	mov	r8, r0
 800de1a:	4689      	mov	r9, r1
 800de1c:	f7f2 fb98 	bl	8000550 <__aeabi_dmul>
 800de20:	a35f      	add	r3, pc, #380	; (adr r3, 800dfa0 <__ieee754_log+0x320>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f7f2 f9dd 	bl	80001e4 <__adddf3>
 800de2a:	4642      	mov	r2, r8
 800de2c:	464b      	mov	r3, r9
 800de2e:	f7f2 fb8f 	bl	8000550 <__aeabi_dmul>
 800de32:	a35d      	add	r3, pc, #372	; (adr r3, 800dfa8 <__ieee754_log+0x328>)
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f7f2 f9d4 	bl	80001e4 <__adddf3>
 800de3c:	4642      	mov	r2, r8
 800de3e:	464b      	mov	r3, r9
 800de40:	f7f2 fb86 	bl	8000550 <__aeabi_dmul>
 800de44:	a35a      	add	r3, pc, #360	; (adr r3, 800dfb0 <__ieee754_log+0x330>)
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 f9cb 	bl	80001e4 <__adddf3>
 800de4e:	4632      	mov	r2, r6
 800de50:	463b      	mov	r3, r7
 800de52:	f7f2 fb7d 	bl	8000550 <__aeabi_dmul>
 800de56:	a358      	add	r3, pc, #352	; (adr r3, 800dfb8 <__ieee754_log+0x338>)
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	4606      	mov	r6, r0
 800de5e:	460f      	mov	r7, r1
 800de60:	4640      	mov	r0, r8
 800de62:	4649      	mov	r1, r9
 800de64:	f7f2 fb74 	bl	8000550 <__aeabi_dmul>
 800de68:	a355      	add	r3, pc, #340	; (adr r3, 800dfc0 <__ieee754_log+0x340>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	f7f2 f9b9 	bl	80001e4 <__adddf3>
 800de72:	4642      	mov	r2, r8
 800de74:	464b      	mov	r3, r9
 800de76:	f7f2 fb6b 	bl	8000550 <__aeabi_dmul>
 800de7a:	a353      	add	r3, pc, #332	; (adr r3, 800dfc8 <__ieee754_log+0x348>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f7f2 f9b0 	bl	80001e4 <__adddf3>
 800de84:	4642      	mov	r2, r8
 800de86:	464b      	mov	r3, r9
 800de88:	f7f2 fb62 	bl	8000550 <__aeabi_dmul>
 800de8c:	460b      	mov	r3, r1
 800de8e:	4602      	mov	r2, r0
 800de90:	4639      	mov	r1, r7
 800de92:	4630      	mov	r0, r6
 800de94:	f7f2 f9a6 	bl	80001e4 <__adddf3>
 800de98:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800de9c:	9b05      	ldr	r3, [sp, #20]
 800de9e:	3551      	adds	r5, #81	; 0x51
 800dea0:	431d      	orrs	r5, r3
 800dea2:	2d00      	cmp	r5, #0
 800dea4:	4680      	mov	r8, r0
 800dea6:	4689      	mov	r9, r1
 800dea8:	dd48      	ble.n	800df3c <__ieee754_log+0x2bc>
 800deaa:	2200      	movs	r2, #0
 800deac:	4b4c      	ldr	r3, [pc, #304]	; (800dfe0 <__ieee754_log+0x360>)
 800deae:	4650      	mov	r0, sl
 800deb0:	4659      	mov	r1, fp
 800deb2:	f7f2 fb4d 	bl	8000550 <__aeabi_dmul>
 800deb6:	4652      	mov	r2, sl
 800deb8:	465b      	mov	r3, fp
 800deba:	f7f2 fb49 	bl	8000550 <__aeabi_dmul>
 800debe:	4602      	mov	r2, r0
 800dec0:	460b      	mov	r3, r1
 800dec2:	4606      	mov	r6, r0
 800dec4:	460f      	mov	r7, r1
 800dec6:	4640      	mov	r0, r8
 800dec8:	4649      	mov	r1, r9
 800deca:	f7f2 f98b 	bl	80001e4 <__adddf3>
 800dece:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ded2:	f7f2 fb3d 	bl	8000550 <__aeabi_dmul>
 800ded6:	4680      	mov	r8, r0
 800ded8:	4689      	mov	r9, r1
 800deda:	b964      	cbnz	r4, 800def6 <__ieee754_log+0x276>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4630      	mov	r0, r6
 800dee2:	4639      	mov	r1, r7
 800dee4:	f7f2 f97c 	bl	80001e0 <__aeabi_dsub>
 800dee8:	4602      	mov	r2, r0
 800deea:	460b      	mov	r3, r1
 800deec:	4650      	mov	r0, sl
 800deee:	4659      	mov	r1, fp
 800def0:	f7f2 f976 	bl	80001e0 <__aeabi_dsub>
 800def4:	e6d7      	b.n	800dca6 <__ieee754_log+0x26>
 800def6:	a322      	add	r3, pc, #136	; (adr r3, 800df80 <__ieee754_log+0x300>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df00:	f7f2 fb26 	bl	8000550 <__aeabi_dmul>
 800df04:	a320      	add	r3, pc, #128	; (adr r3, 800df88 <__ieee754_log+0x308>)
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	4604      	mov	r4, r0
 800df0c:	460d      	mov	r5, r1
 800df0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df12:	f7f2 fb1d 	bl	8000550 <__aeabi_dmul>
 800df16:	4642      	mov	r2, r8
 800df18:	464b      	mov	r3, r9
 800df1a:	f7f2 f963 	bl	80001e4 <__adddf3>
 800df1e:	4602      	mov	r2, r0
 800df20:	460b      	mov	r3, r1
 800df22:	4630      	mov	r0, r6
 800df24:	4639      	mov	r1, r7
 800df26:	f7f2 f95b 	bl	80001e0 <__aeabi_dsub>
 800df2a:	4652      	mov	r2, sl
 800df2c:	465b      	mov	r3, fp
 800df2e:	f7f2 f957 	bl	80001e0 <__aeabi_dsub>
 800df32:	4602      	mov	r2, r0
 800df34:	460b      	mov	r3, r1
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	e7d9      	b.n	800def0 <__ieee754_log+0x270>
 800df3c:	4602      	mov	r2, r0
 800df3e:	460b      	mov	r3, r1
 800df40:	4650      	mov	r0, sl
 800df42:	4659      	mov	r1, fp
 800df44:	f7f2 f94c 	bl	80001e0 <__aeabi_dsub>
 800df48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df4c:	f7f2 fb00 	bl	8000550 <__aeabi_dmul>
 800df50:	4606      	mov	r6, r0
 800df52:	460f      	mov	r7, r1
 800df54:	2c00      	cmp	r4, #0
 800df56:	f43f af23 	beq.w	800dda0 <__ieee754_log+0x120>
 800df5a:	a309      	add	r3, pc, #36	; (adr r3, 800df80 <__ieee754_log+0x300>)
 800df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df64:	f7f2 faf4 	bl	8000550 <__aeabi_dmul>
 800df68:	a307      	add	r3, pc, #28	; (adr r3, 800df88 <__ieee754_log+0x308>)
 800df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6e:	4604      	mov	r4, r0
 800df70:	460d      	mov	r5, r1
 800df72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df76:	e727      	b.n	800ddc8 <__ieee754_log+0x148>
 800df78:	2000      	movs	r0, #0
 800df7a:	2100      	movs	r1, #0
 800df7c:	e693      	b.n	800dca6 <__ieee754_log+0x26>
 800df7e:	bf00      	nop
 800df80:	fee00000 	.word	0xfee00000
 800df84:	3fe62e42 	.word	0x3fe62e42
 800df88:	35793c76 	.word	0x35793c76
 800df8c:	3dea39ef 	.word	0x3dea39ef
 800df90:	55555555 	.word	0x55555555
 800df94:	3fd55555 	.word	0x3fd55555
 800df98:	df3e5244 	.word	0xdf3e5244
 800df9c:	3fc2f112 	.word	0x3fc2f112
 800dfa0:	96cb03de 	.word	0x96cb03de
 800dfa4:	3fc74664 	.word	0x3fc74664
 800dfa8:	94229359 	.word	0x94229359
 800dfac:	3fd24924 	.word	0x3fd24924
 800dfb0:	55555593 	.word	0x55555593
 800dfb4:	3fe55555 	.word	0x3fe55555
 800dfb8:	d078c69f 	.word	0xd078c69f
 800dfbc:	3fc39a09 	.word	0x3fc39a09
 800dfc0:	1d8e78af 	.word	0x1d8e78af
 800dfc4:	3fcc71c5 	.word	0x3fcc71c5
 800dfc8:	9997fa04 	.word	0x9997fa04
 800dfcc:	3fd99999 	.word	0x3fd99999
 800dfd0:	c3500000 	.word	0xc3500000
 800dfd4:	43500000 	.word	0x43500000
 800dfd8:	7fefffff 	.word	0x7fefffff
 800dfdc:	3ff00000 	.word	0x3ff00000
 800dfe0:	3fe00000 	.word	0x3fe00000

0800dfe4 <_init>:
 800dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe6:	bf00      	nop
 800dfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfea:	bc08      	pop	{r3}
 800dfec:	469e      	mov	lr, r3
 800dfee:	4770      	bx	lr

0800dff0 <_fini>:
 800dff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff2:	bf00      	nop
 800dff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dff6:	bc08      	pop	{r3}
 800dff8:	469e      	mov	lr, r3
 800dffa:	4770      	bx	lr
