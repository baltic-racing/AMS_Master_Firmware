
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d92c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800dab8  0800dab8  0001dab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e28c  0800e28c  00020378  2**0
                  CONTENTS
  4 .ARM          00000008  0800e28c  0800e28c  0001e28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e294  0800e294  00020378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e294  0800e294  0001e294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e298  0800e298  0001e298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000378  20000000  0800e29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001580  20000378  0800e614  00020378  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200018f8  0800e614  000218f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a2a3  00000000  00000000  000203e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049cc  00000000  00000000  0003a687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003f058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001191  00000000  00000000  00040780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024001  00000000  00000000  00041911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e50b  00000000  00000000  00065912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c551b  00000000  00000000  00083e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000704c  00000000  00000000  00149338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00150384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000378 	.word	0x20000378
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800da9c 	.word	0x0800da9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000037c 	.word	0x2000037c
 80001c4:	0800da9c 	.word	0x0800da9c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14c      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d967      	bls.n	8000c56 <__udivmoddi4+0xe6>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b153      	cbz	r3, 8000ba2 <__udivmoddi4+0x32>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fbbe f1f7 	udiv	r1, lr, r7
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fb07 ee11 	mls	lr, r7, r1, lr
 8000bb2:	fb01 f005 	mul.w	r0, r1, r5
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x66>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000bc8:	f080 8119 	bcs.w	8000dfe <__udivmoddi4+0x28e>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8116 	bls.w	8000dfe <__udivmoddi4+0x28e>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000be0:	fb00 f505 	mul.w	r5, r0, r5
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8104 	bcs.w	8000e02 <__udivmoddi4+0x292>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8101 	bls.w	8000e02 <__udivmoddi4+0x292>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	1b64      	subs	r4, r4, r5
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xc0>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ea 	beq.w	8000df8 <__udivmoddi4+0x288>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d148      	bne.n	8000cca <__udivmoddi4+0x15a>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xd2>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4696      	mov	lr, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c50:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xea>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 808e 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c64:	1a88      	subs	r0, r1, r2
 8000c66:	2101      	movs	r1, #1
 8000c68:	0c17      	lsrs	r7, r2, #16
 8000c6a:	fa1f fe82 	uxth.w	lr, r2
 8000c6e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000c72:	fb07 0015 	mls	r0, r7, r5, r0
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7c:	fb0e f005 	mul.w	r0, lr, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x126>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x124>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 80cc 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c94:	4645      	mov	r5, r8
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	b2a4      	uxth	r4, r4
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x150>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14e>
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	f200 80b4 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	eba4 040e 	sub.w	r4, r4, lr
 8000cc4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc8:	e7a0      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cca:	f1c1 0720 	rsb	r7, r1, #32
 8000cce:	408b      	lsls	r3, r1
 8000cd0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd8:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	fbba f8f9 	udiv	r8, sl, r9
 8000ce4:	408d      	lsls	r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	432b      	orrs	r3, r5
 8000cf4:	fa00 f501 	lsl.w	r5, r0, r1
 8000cf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cfc:	0c1c      	lsrs	r4, r3, #16
 8000cfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	fa02 f201 	lsl.w	r2, r2, r1
 8000d08:	d90b      	bls.n	8000d22 <__udivmoddi4+0x1b2>
 8000d0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d12:	f080 8086 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	f240 8083 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1c:	f1a8 0802 	sub.w	r8, r8, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1a24      	subs	r4, r4, r0
 8000d24:	b298      	uxth	r0, r3
 8000d26:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2a:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d32:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x1dc>
 8000d3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d42:	d26a      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d968      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d50:	fba0 9302 	umull	r9, r3, r0, r2
 8000d54:	eba4 040e 	sub.w	r4, r4, lr
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	46c8      	mov	r8, r9
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	d354      	bcc.n	8000e0a <__udivmoddi4+0x29a>
 8000d60:	d051      	beq.n	8000e06 <__udivmoddi4+0x296>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d067      	beq.n	8000e36 <__udivmoddi4+0x2c6>
 8000d66:	ebb5 0308 	subs.w	r3, r5, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	40cb      	lsrs	r3, r1
 8000d70:	fa04 f707 	lsl.w	r7, r4, r7
 8000d74:	431f      	orrs	r7, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0020 	rsb	r0, r3, #32
 8000d88:	40c1      	lsrs	r1, r0
 8000d8a:	409d      	lsls	r5, r3
 8000d8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	4328      	orrs	r0, r5
 8000d96:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9a:	fb07 1115 	mls	r1, r7, r5, r1
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	0c02      	lsrs	r2, r0, #16
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dac:	4291      	cmp	r1, r2
 8000dae:	fa04 f403 	lsl.w	r4, r4, r3
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	4291      	cmp	r1, r2
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	fbb2 f1f7 	udiv	r1, r2, r7
 8000dcc:	fb07 2211 	mls	r2, r7, r1, r2
 8000dd0:	b280      	uxth	r0, r0
 8000dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dd6:	fb01 f20e 	mul.w	r2, r1, lr
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x280>
 8000dde:	eb1c 0000 	adds.w	r0, ip, r0
 8000de2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000de6:	d216      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	d914      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dec:	3902      	subs	r1, #2
 8000dee:	4460      	add	r0, ip
 8000df0:	1a80      	subs	r0, r0, r2
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	e73a      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e70b      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000dfe:	4671      	mov	r1, lr
 8000e00:	e6e9      	b.n	8000bd6 <__udivmoddi4+0x66>
 8000e02:	4610      	mov	r0, r2
 8000e04:	e6fe      	b.n	8000c04 <__udivmoddi4+0x94>
 8000e06:	454d      	cmp	r5, r9
 8000e08:	d2ab      	bcs.n	8000d62 <__udivmoddi4+0x1f2>
 8000e0a:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a5      	b.n	8000d62 <__udivmoddi4+0x1f2>
 8000e16:	4641      	mov	r1, r8
 8000e18:	e7ea      	b.n	8000df0 <__udivmoddi4+0x280>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e796      	b.n	8000d4c <__udivmoddi4+0x1dc>
 8000e1e:	4645      	mov	r5, r8
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	46d0      	mov	r8, sl
 8000e24:	e77d      	b.n	8000d22 <__udivmoddi4+0x1b2>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e749      	b.n	8000cc0 <__udivmoddi4+0x150>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e731      	b.n	8000c96 <__udivmoddi4+0x126>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xdc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e6ed      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <spi_write_array+0x24>)
 8000e58:	f005 fa6f 	bl	800633a <HAL_SPI_Transmit>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000538 	.word	0x20000538

08000e68 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <spi_write_read+0x3c>)
 8000e88:	f005 fa57 	bl	800633a <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <spi_write_read+0x3c>)
 8000e98:	f005 fb92 	bl	80065c0 <HAL_SPI_Receive>

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000538 	.word	0x20000538

08000ea8 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f81f 	bl	8000efc <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <wakeup_idle>:

void wakeup_idle()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ed0:	f003 fb38 	bl	8004544 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <wakeup_idle+0x30>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <wakeup_idle+0x34>)
 8000edc:	f005 fa2d 	bl	800633a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ee8:	f003 fb2c 	bl	8004544 <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	2000039a 	.word	0x2000039a
 8000ef8:	20000538 	.word	0x20000538

08000efc <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000efc:	b490      	push	{r4, r7}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	717b      	strb	r3, [r7, #5]
 8000f16:	4613      	mov	r3, r2
 8000f18:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	105b      	asrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <set_adc+0x94>)
 8000f30:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <set_adc+0x94>)
 8000f52:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <set_adc+0x98>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <set_adc+0x98>)
 8000f82:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc90      	pop	{r4, r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000394 	.word	0x20000394
 8000f94:	20000398 	.word	0x20000398

08000f98 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <LTC6811_adcv+0x74>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <LTC6811_adcv+0x74>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000faa:	4918      	ldr	r1, [pc, #96]	; (800100c <LTC6811_adcv+0x74>)
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 fb0d 	bl	80015cc <pec15_calc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fc6:	f7ff ff7d 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <LTC6811_adcv+0x78>)
 8000fd2:	f003 fab7 	bl	8004544 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f7ff ff30 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <LTC6811_adcv+0x78>)
 8000fe8:	f003 faac 	bl	8004544 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fec:	2301      	movs	r3, #1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <LTC6811_adcv+0x80>)
 8000ff4:	f005 f9a1 	bl	800633a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <LTC6811_adcv+0x80>)
 8001000:	f005 f99b 	bl	800633a <HAL_SPI_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000394 	.word	0x20000394
 8001010:	40020000 	.word	0x40020000
 8001014:	2000039a 	.word	0x2000039a
 8001018:	20000538 	.word	0x20000538

0800101c <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <LTC6811_adax+0x74>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <LTC6811_adax+0x74>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <LTC6811_adax+0x74>)
 8001030:	2002      	movs	r0, #2
 8001032:	f000 facb 	bl	80015cc <pec15_calc>
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 800104a:	f7ff ff3b 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <LTC6811_adax+0x78>)
 8001056:	f003 fa75 	bl	8004544 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff feee 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <LTC6811_adax+0x78>)
 800106c:	f003 fa6a 	bl	8004544 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001070:	2301      	movs	r3, #1
 8001072:	2201      	movs	r2, #1
 8001074:	4908      	ldr	r1, [pc, #32]	; (8001098 <LTC6811_adax+0x7c>)
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <LTC6811_adax+0x80>)
 8001078:	f005 f95f 	bl	800633a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	2201      	movs	r2, #1
 8001080:	4905      	ldr	r1, [pc, #20]	; (8001098 <LTC6811_adax+0x7c>)
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <LTC6811_adax+0x80>)
 8001084:	f005 f959 	bl	800633a <HAL_SPI_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000398 	.word	0x20000398
 8001094:	40020000 	.word	0x40020000
 8001098:	2000039a 	.word	0x2000039a
 800109c:	20000538 	.word	0x20000538

080010a0 <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 fe53 	bl	800ad6c <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e03f      	b.n	8001150 <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	757b      	strb	r3, [r7, #21]
 80010d4:	e013      	b.n	80010fe <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	1899      	adds	r1, r3, r2
 80010e6:	7d7a      	ldrb	r2, [r7, #21]
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	4403      	add	r3, r0
 80010ee:	5c8a      	ldrb	r2, [r1, r2]
 80010f0:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7a      	ldrb	r2, [r7, #21]
 8001100:	7d3b      	ldrb	r3, [r7, #20]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3e7      	bcc.n	80010d6 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 8001106:	7dfa      	ldrb	r2, [r7, #23]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	7d3b      	ldrb	r3, [r7, #20]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa55 	bl	80015cc <pec15_calc>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	3301      	adds	r3, #1
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	897a      	ldrh	r2, [r7, #10]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	3302      	adds	r3, #2
 8001148:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3bb      	bcc.n	80010d0 <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001158:	f7ff feb4 	bl	8000ec4 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	e045      	b.n	80011ee <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3b80      	subs	r3, #128	; 0x80
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	2002      	movs	r0, #2
 800117c:	f000 fa26 	bl	80015cc <pec15_calc>
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3302      	adds	r3, #2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3303      	adds	r3, #3
 8001196:	897a      	ldrh	r2, [r7, #10]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011a4:	f003 f9ce 	bl	8004544 <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff fe48 	bl	8000e40 <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	3304      	adds	r3, #4
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	2008      	movs	r0, #8
 80011c0:	f7ff fe3e 	bl	8000e40 <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011cc:	f003 f9ba 	bl	8004544 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011d0:	2301      	movs	r3, #1
 80011d2:	2201      	movs	r2, #1
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011d8:	f005 f8af 	bl	800633a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011dc:	2301      	movs	r3, #1
 80011de:	2201      	movs	r2, #1
 80011e0:	4909      	ldr	r1, [pc, #36]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011e4:	f005 f8a9 	bl	800633a <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3301      	adds	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	7dfa      	ldrb	r2, [r7, #23]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3b5      	bcc.n	8001162 <LTC6811_wrcfg+0xc2>

	}

	free(WRCFG);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f009 fdc0 	bl	800ad7c <free>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000
 8001208:	2000039a 	.word	0x2000039a
 800120c:	20000538 	.word	0x20000538

08001210 <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	460b      	mov	r3, r1
 800121e:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001224:	2306      	movs	r3, #6
 8001226:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001228:	2303      	movs	r3, #3
 800122a:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001234:	7ebb      	ldrb	r3, [r7, #26]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f009 fd95 	bl	800ad6c <malloc>
 8001242:	4603      	mov	r3, r0
 8001244:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001246:	2301      	movs	r3, #1
 8001248:	777b      	strb	r3, [r7, #29]
 800124a:	e068      	b.n	800131e <LTC6811_rdcv+0x10e>
	{
		data_counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 8001250:	79b9      	ldrb	r1, [r7, #6]
 8001252:	7f7b      	ldrb	r3, [r7, #29]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f86c 	bl	8001334 <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800125c:	2300      	movs	r3, #0
 800125e:	773b      	strb	r3, [r7, #28]
 8001260:	e056      	b.n	8001310 <LTC6811_rdcv+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001262:	2300      	movs	r3, #0
 8001264:	76fb      	strb	r3, [r7, #27]
 8001266:	e026      	b.n	80012b6 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	3301      	adds	r3, #1
 8001276:	6979      	ldr	r1, [r7, #20]
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001286:	7f3a      	ldrb	r2, [r7, #28]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4413      	add	r3, r2
 8001296:	7ef9      	ldrb	r1, [r7, #27]
 8001298:	7f7a      	ldrb	r2, [r7, #29]
 800129a:	3a01      	subs	r2, #1
 800129c:	7e38      	ldrb	r0, [r7, #24]
 800129e:	fb00 f202 	mul.w	r2, r0, r2
 80012a2:	440a      	add	r2, r1
 80012a4:	89f9      	ldrh	r1, [r7, #14]
 80012a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	3302      	adds	r3, #2
 80012ae:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 80012b0:	7efb      	ldrb	r3, [r7, #27]
 80012b2:	3301      	adds	r3, #1
 80012b4:	76fb      	strb	r3, [r7, #27]
 80012b6:	7efa      	ldrb	r2, [r7, #27]
 80012b8:	7e3b      	ldrb	r3, [r7, #24]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3d4      	bcc.n	8001268 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	7fbb      	ldrb	r3, [r7, #30]
 80012ce:	3301      	adds	r3, #1
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012dc:	7f3b      	ldrb	r3, [r7, #28]
 80012de:	7eba      	ldrb	r2, [r7, #26]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	441a      	add	r2, r3
 80012ea:	7e7b      	ldrb	r3, [r7, #25]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f96c 	bl	80015cc <pec15_calc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012f8:	8a7a      	ldrh	r2, [r7, #18]
 80012fa:	8a3b      	ldrh	r3, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <LTC6811_rdcv+0xf4>
			{
			  pec_error = -1;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 8001304:	7fbb      	ldrb	r3, [r7, #30]
 8001306:	3302      	adds	r3, #2
 8001308:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800130a:	7f3b      	ldrb	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	773b      	strb	r3, [r7, #28]
 8001310:	7f3a      	ldrb	r2, [r7, #28]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3a4      	bcc.n	8001262 <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001318:	7f7b      	ldrb	r3, [r7, #29]
 800131a:	3301      	adds	r3, #1
 800131c:	777b      	strb	r3, [r7, #29]
 800131e:	7f7b      	ldrb	r3, [r7, #29]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d993      	bls.n	800124c <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f009 fd29 	bl	800ad7c <free>
	return(pec_error);
 800132a:	7ffb      	ldrb	r3, [r7, #31]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3b01      	subs	r3, #1
 8001348:	2b03      	cmp	r3, #3
 800134a:	d817      	bhi.n	800137c <LTC6811_rdcv_reg+0x48>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <LTC6811_rdcv_reg+0x20>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	0800136b 	.word	0x0800136b
 800135c:	08001371 	.word	0x08001371
 8001360:	08001377 	.word	0x08001377
		case 1: RDCV[1] = 0x04; break;
 8001364:	2304      	movs	r3, #4
 8001366:	727b      	strb	r3, [r7, #9]
 8001368:	e008      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 800136a:	2306      	movs	r3, #6
 800136c:	727b      	strb	r3, [r7, #9]
 800136e:	e005      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001370:	2308      	movs	r3, #8
 8001372:	727b      	strb	r3, [r7, #9]
 8001374:	e002      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 8001376:	230a      	movs	r3, #10
 8001378:	727b      	strb	r3, [r7, #9]
 800137a:	bf00      	nop
	}

	wakeup_idle();
 800137c:	f7ff fda2 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e02f      	b.n	80013e6 <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b80      	subs	r3, #128	; 0x80
 800138e:	b2db      	uxtb	r3, r3
 8001390:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	2002      	movs	r0, #2
 800139a:	f000 f917 	bl	80015cc <pec15_calc>
 800139e:	4603      	mov	r3, r0
 80013a0:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013ba:	f003 f8c3 	bl	8004544 <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	441a      	add	r2, r3
 80013c8:	f107 0008 	add.w	r0, r7, #8
 80013cc:	2308      	movs	r3, #8
 80013ce:	2104      	movs	r1, #4
 80013d0:	f7ff fd4a 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013dc:	f003 f8b2 	bl	8004544 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3cb      	bcc.n	8001386 <LTC6811_rdcv_reg+0x52>
    }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020000 	.word	0x40020000

080013fc <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001410:	2306      	movs	r3, #6
 8001412:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 8001414:	2303      	movs	r3, #3
 8001416:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001420:	7ebb      	ldrb	r3, [r7, #26]
 8001422:	79ba      	ldrb	r2, [r7, #6]
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f009 fc9f 	bl	800ad6c <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001432:	2301      	movs	r3, #1
 8001434:	777b      	strb	r3, [r7, #29]
 8001436:	e068      	b.n	800150a <LTC6811_rdaux+0x10e>
	{
		data_counter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 800143c:	79b9      	ldrb	r1, [r7, #6]
 800143e:	7f7b      	ldrb	r3, [r7, #29]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f86e 	bl	8001524 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001448:	2300      	movs	r3, #0
 800144a:	773b      	strb	r3, [r7, #28]
 800144c:	e056      	b.n	80014fc <LTC6811_rdaux+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800144e:	2300      	movs	r3, #0
 8001450:	76fb      	strb	r3, [r7, #27]
 8001452:	e026      	b.n	80014a2 <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b21a      	sxth	r2, r3
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	3301      	adds	r3, #1
 8001462:	6979      	ldr	r1, [r7, #20]
 8001464:	440b      	add	r3, r1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 8001472:	7f3a      	ldrb	r2, [r7, #28]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	7ef9      	ldrb	r1, [r7, #27]
 8001484:	7f7a      	ldrb	r2, [r7, #29]
 8001486:	3a01      	subs	r2, #1
 8001488:	7e38      	ldrb	r0, [r7, #24]
 800148a:	fb00 f202 	mul.w	r2, r0, r2
 800148e:	440a      	add	r2, r1
 8001490:	89f9      	ldrh	r1, [r7, #14]
 8001492:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 8001496:	7fbb      	ldrb	r3, [r7, #30]
 8001498:	3302      	adds	r3, #2
 800149a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800149c:	7efb      	ldrb	r3, [r7, #27]
 800149e:	3301      	adds	r3, #1
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	7efa      	ldrb	r2, [r7, #27]
 80014a4:	7e3b      	ldrb	r3, [r7, #24]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3d4      	bcc.n	8001454 <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 80014aa:	7fbb      	ldrb	r3, [r7, #30]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	7fbb      	ldrb	r3, [r7, #30]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	440b      	add	r3, r1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014c8:	7f3b      	ldrb	r3, [r7, #28]
 80014ca:	7eba      	ldrb	r2, [r7, #26]
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	441a      	add	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f876 	bl	80015cc <pec15_calc>
 80014e0:	4603      	mov	r3, r0
 80014e2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014e4:	8a7a      	ldrh	r2, [r7, #18]
 80014e6:	8a3b      	ldrh	r3, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <LTC6811_rdaux+0xf4>
			{
			  pec_error = -1;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014f0:	7fbb      	ldrb	r3, [r7, #30]
 80014f2:	3302      	adds	r3, #2
 80014f4:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014f6:	7f3b      	ldrb	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	773b      	strb	r3, [r7, #28]
 80014fc:	7f3a      	ldrb	r2, [r7, #28]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3a4      	bcc.n	800144e <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	3301      	adds	r3, #1
 8001508:	777b      	strb	r3, [r7, #29]
 800150a:	7f7a      	ldrb	r2, [r7, #29]
 800150c:	7e3b      	ldrb	r3, [r7, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	d392      	bcc.n	8001438 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f009 fc32 	bl	800ad7c <free>
	return(pec_error);
 8001518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	603a      	str	r2, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	460b      	mov	r3, r1
 8001532:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <LTC6811_rdaux_reg+0x1c>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <LTC6811_rdaux_reg+0x22>
 800153e:	e005      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001540:	230c      	movs	r3, #12
 8001542:	727b      	strb	r3, [r7, #9]
 8001544:	e002      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
 800154a:	bf00      	nop
	}

	wakeup_idle();
 800154c:	f7ff fcba 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e02f      	b.n	80015b6 <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3b80      	subs	r3, #128	; 0x80
 800155e:	b2db      	uxtb	r3, r3
 8001560:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f000 f82f 	bl	80015cc <pec15_calc>
 800156e:	4603      	mov	r3, r0
 8001570:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001572:	89bb      	ldrh	r3, [r7, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 800158a:	f002 ffdb 	bl	8004544 <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	461a      	mov	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	441a      	add	r2, r3
 8001598:	f107 0008 	add.w	r0, r7, #8
 800159c:	2308      	movs	r3, #8
 800159e:	2104      	movs	r1, #4
 80015a0:	f7ff fc62 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 80015ac:	f002 ffca 	bl	8004544 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3cb      	bcc.n	8001556 <LTC6811_rdaux_reg+0x32>
    }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020000 	.word	0x40020000

080015cc <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015d8:	2310      	movs	r3, #16
 80015da:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e018      	b.n	8001614 <pec15_calc+0x48>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015e2:	8afb      	ldrh	r3, [r7, #22]
 80015e4:	09db      	lsrs	r3, r3, #7
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4053      	eors	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b29a      	uxth	r2, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <pec15_calc+0x60>)
 8001604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4053      	eors	r3, r2
 800160c:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3301      	adds	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbe2      	blt.n	80015e2 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800161c:	8afb      	ldrh	r3, [r7, #22]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b29b      	uxth	r3, r3
 }
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	0800db0c 	.word	0x0800db0c

08001630 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <MX_ADC1_Init+0x9c>)
 8001646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_ADC1_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_ADC1_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_ADC1_Init+0x98>)
 800166a:	2200      	movs	r2, #0
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <MX_ADC1_Init+0xa0>)
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_ADC1_Init+0x98>)
 800167c:	2201      	movs	r2, #1
 800167e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_ADC1_Init+0x98>)
 800168a:	2201      	movs	r2, #1
 800168c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001690:	f001 fb58 	bl	8002d44 <HAL_ADC_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800169a:	f001 f85c 	bl	8002756 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800169e:	230a      	movs	r3, #10
 80016a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_ADC1_Init+0x98>)
 80016b0:	f001 fcfe 	bl	80030b0 <HAL_ADC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016ba:	f001 f84c 	bl	8002756 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000039c 	.word	0x2000039c
 80016cc:	40012000 	.word	0x40012000
 80016d0:	0f000001 	.word	0x0f000001

080016d4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_ADC2_Init+0x98>)
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <MX_ADC2_Init+0x9c>)
 80016ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_ADC2_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_ADC2_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_ADC2_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_ADC2_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_ADC2_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_ADC2_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_ADC2_Init+0x98>)
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <MX_ADC2_Init+0xa0>)
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_ADC2_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_ADC2_Init+0x98>)
 8001720:	2201      	movs	r2, #1
 8001722:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_ADC2_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_ADC2_Init+0x98>)
 800172e:	2201      	movs	r2, #1
 8001730:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001732:	480e      	ldr	r0, [pc, #56]	; (800176c <MX_ADC2_Init+0x98>)
 8001734:	f001 fb06 	bl	8002d44 <HAL_ADC_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800173e:	f001 f80a 	bl	8002756 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001742:	230b      	movs	r3, #11
 8001744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_ADC2_Init+0x98>)
 8001754:	f001 fcac 	bl	80030b0 <HAL_ADC_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800175e:	f000 fffa 	bl	8002756 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003e4 	.word	0x200003e4
 8001770:	40012100 	.word	0x40012100
 8001774:	0f000001 	.word	0x0f000001

08001778 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2e      	ldr	r2, [pc, #184]	; (8001850 <HAL_ADC_MspInit+0xd8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d128      	bne.n	80017ec <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <HAL_ADC_MspInit+0xe0>)
 80017e6:	f002 fd0f 	bl	8004208 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80017ea:	e02c      	b.n	8001846 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_ADC_MspInit+0xe4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d127      	bne.n	8001846 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_ADC_MspInit+0xe0>)
 8001842:	f002 fce1 	bl	8004208 <HAL_GPIO_Init>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40012000 	.word	0x40012000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020800 	.word	0x40020800
 800185c:	40012100 	.word	0x40012100

08001860 <ADC_TS_Voltage>:
uint16_t adc_vehic_volt;
uint16_t diff_volt;
uint8_t pre = 0;

uint8_t ADC_TS_Voltage(uint16_t MAX_TS_VOLTAGE, uint16_t MIN_TS_VOLTAGE)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	80fb      	strh	r3, [r7, #6]
 800186c:	4613      	mov	r3, r2
 800186e:	80bb      	strh	r3, [r7, #4]
	//Vehicle side
	HAL_ADC_Start(&hadc1);
 8001870:	483b      	ldr	r0, [pc, #236]	; (8001960 <ADC_TS_Voltage+0x100>)
 8001872:	f001 faab 	bl	8002dcc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8001876:	2164      	movs	r1, #100	; 0x64
 8001878:	4839      	ldr	r0, [pc, #228]	; (8001960 <ADC_TS_Voltage+0x100>)
 800187a:	f001 fb89 	bl	8002f90 <HAL_ADC_PollForConversion>
	raw_adc_vehic_volt = HAL_ADC_GetValue(&hadc1); // get the adc value
 800187e:	4838      	ldr	r0, [pc, #224]	; (8001960 <ADC_TS_Voltage+0x100>)
 8001880:	f001 fc0a 	bl	8003098 <HAL_ADC_GetValue>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <ADC_TS_Voltage+0x104>)
 800188a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1); // stop adc
 800188c:	4834      	ldr	r0, [pc, #208]	; (8001960 <ADC_TS_Voltage+0x100>)
 800188e:	f001 fb4d 	bl	8002f2c <HAL_ADC_Stop>
	//Accu side
	HAL_ADC_Start(&hadc2);
 8001892:	4835      	ldr	r0, [pc, #212]	; (8001968 <ADC_TS_Voltage+0x108>)
 8001894:	f001 fa9a 	bl	8002dcc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100); // poll for conversion
 8001898:	2164      	movs	r1, #100	; 0x64
 800189a:	4833      	ldr	r0, [pc, #204]	; (8001968 <ADC_TS_Voltage+0x108>)
 800189c:	f001 fb78 	bl	8002f90 <HAL_ADC_PollForConversion>
	raw_adc_accu_volt = HAL_ADC_GetValue(&hadc2); // get the adc value
 80018a0:	4831      	ldr	r0, [pc, #196]	; (8001968 <ADC_TS_Voltage+0x108>)
 80018a2:	f001 fbf9 	bl	8003098 <HAL_ADC_GetValue>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <ADC_TS_Voltage+0x10c>)
 80018ac:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2); // stop adc
 80018ae:	482e      	ldr	r0, [pc, #184]	; (8001968 <ADC_TS_Voltage+0x108>)
 80018b0:	f001 fb3c 	bl	8002f2c <HAL_ADC_Stop>

	adc_accu_volt = (3.3/4095.0)* raw_adc_accu_volt * 175.5;
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <ADC_TS_Voltage+0x10c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fddf 	bl	800047c <__aeabi_i2d>
 80018be:	a324      	add	r3, pc, #144	; (adr r3, 8001950 <ADC_TS_Voltage+0xf0>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fe44 	bl	8000550 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	a321      	add	r3, pc, #132	; (adr r3, 8001958 <ADC_TS_Voltage+0xf8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe3b 	bl	8000550 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f90d 	bl	8000b00 <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <ADC_TS_Voltage+0x110>)
 80018ec:	801a      	strh	r2, [r3, #0]
	adc_vehic_volt = (3.3/4095.0)* raw_adc_vehic_volt * 175.5;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <ADC_TS_Voltage+0x104>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdc2 	bl	800047c <__aeabi_i2d>
 80018f8:	a315      	add	r3, pc, #84	; (adr r3, 8001950 <ADC_TS_Voltage+0xf0>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe27 	bl	8000550 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	a313      	add	r3, pc, #76	; (adr r3, 8001958 <ADC_TS_Voltage+0xf8>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe1e 	bl	8000550 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f8f0 	bl	8000b00 <__aeabi_d2uiz>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <ADC_TS_Voltage+0x114>)
 8001926:	801a      	strh	r2, [r3, #0]
	diff_volt = adc_accu_volt - adc_vehic_volt;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <ADC_TS_Voltage+0x110>)
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <ADC_TS_Voltage+0x114>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <ADC_TS_Voltage+0x118>)
 8001936:	801a      	strh	r2, [r3, #0]
		pre = 1;
	else
		pre = 0;

	*/
	pre = 1;
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <ADC_TS_Voltage+0x11c>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
	return pre;
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <ADC_TS_Voltage+0x11c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w
 8001950:	e734d9b4 	.word	0xe734d9b4
 8001954:	3f4a680c 	.word	0x3f4a680c
 8001958:	00000000 	.word	0x00000000
 800195c:	4065f000 	.word	0x4065f000
 8001960:	2000039c 	.word	0x2000039c
 8001964:	20000430 	.word	0x20000430
 8001968:	200003e4 	.word	0x200003e4
 800196c:	2000042c 	.word	0x2000042c
 8001970:	2000042e 	.word	0x2000042e
 8001974:	20000432 	.word	0x20000432
 8001978:	20000434 	.word	0x20000434
 800197c:	20000436 	.word	0x20000436

08001980 <HAL_TIM_PeriodElapsedCallback>:
 * HLCK 96 MHz
 * APB1 48 MHz
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

CAN_interrupt();
 8001988:	f000 fa2a 	bl	8001de0 <CAN_interrupt>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af06      	add	r7, sp, #24
 800199a:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 800199c:	4e08      	ldr	r6, [pc, #32]	; (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800199e:	466d      	mov	r5, sp
 80019a0:	f106 0410 	add.w	r4, r6, #16
 80019a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80019b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019b4:	f000 fbaa 	bl	800210c <CAN_RX>
   }
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c0:	200004e0 	.word	0x200004e0

080019c4 <BMS_init>:


void BMS_init()
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 80019c8:	f7ff fa6e 	bl	8000ea8 <LTC6811_initialize>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	//uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
	//uint16_t VUV = (MIN_VOLTAGE/16)-1;

	//precharge = 1 when complete and 0 when still charging
	precharge = ADC_TS_Voltage(MAX_TS_VOLTAGE, MIN_TS_VOLTAGE);
 80019da:	f240 1157 	movw	r1, #343	; 0x157
 80019de:	f240 202a 	movw	r0, #554	; 0x22a
 80019e2:	f7ff ff3d 	bl	8001860 <ADC_TS_Voltage>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <BMS+0x220>)
 80019ec:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NUM_STACK; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e0b2      	b.n	8001b5a <BMS+0x18a>
		cfg[i][4] = 0x00 | OV_flag[i];
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);

*/
		//Balancing without flags
		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 80019f4:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <BMS+0x224>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	b2d8      	uxtb	r0, r3
 8001a06:	497c      	ldr	r1, [pc, #496]	; (8001bf8 <BMS+0x228>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	440b      	add	r3, r1
 8001a12:	4602      	mov	r2, r0
 8001a14:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	4977      	ldr	r1, [pc, #476]	; (8001bf8 <BMS+0x228>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	440b      	add	r3, r1
 8001a24:	3301      	adds	r3, #1
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 8001a2a:	79fa      	ldrb	r2, [r7, #7]
 8001a2c:	4972      	ldr	r1, [pc, #456]	; (8001bf8 <BMS+0x228>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	440b      	add	r3, r1
 8001a38:	3302      	adds	r3, #2
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	496d      	ldr	r1, [pc, #436]	; (8001bf8 <BMS+0x228>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3303      	adds	r3, #3
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 8001a52:	79fa      	ldrb	r2, [r7, #7]
 8001a54:	4968      	ldr	r1, [pc, #416]	; (8001bf8 <BMS+0x228>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	440b      	add	r3, r1
 8001a60:	3304      	adds	r3, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 8001a66:	79fa      	ldrb	r2, [r7, #7]
 8001a68:	4963      	ldr	r1, [pc, #396]	; (8001bf8 <BMS+0x228>)
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	440b      	add	r3, r1
 8001a74:	3305      	adds	r3, #5
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001a7a:	4b60      	ldr	r3, [pc, #384]	; (8001bfc <BMS+0x22c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d068      	beq.n	8001b54 <BMS+0x184>
		{
			if(selTemp < 3)
 8001a82:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <BMS+0x224>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d864      	bhi.n	8001b54 <BMS+0x184>
			{
				for(uint8_t j = 0; j < 8; j++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71bb      	strb	r3, [r7, #6]
 8001a8e:	e02b      	b.n	8001ae8 <BMS+0x118>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	79bb      	ldrb	r3, [r7, #6]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <BMS+0x230>)
 8001a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a9c:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8001aa0:	3b58      	subs	r3, #88	; 0x58
 8001aa2:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <BMS+0x234>)
 8001aa4:	8812      	ldrh	r2, [r2, #0]
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	dd1b      	ble.n	8001ae2 <BMS+0x112>
 8001aaa:	79fa      	ldrb	r2, [r7, #7]
 8001aac:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <BMS+0x228>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3304      	adds	r3, #4
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b25a      	sxtb	r2, r3
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	79fa      	ldrb	r2, [r7, #7]
 8001ace:	b2d8      	uxtb	r0, r3
 8001ad0:	4949      	ldr	r1, [pc, #292]	; (8001bf8 <BMS+0x228>)
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	440b      	add	r3, r1
 8001adc:	3304      	adds	r3, #4
 8001ade:	4602      	mov	r2, r0
 8001ae0:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	71bb      	strb	r3, [r7, #6]
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	2b07      	cmp	r3, #7
 8001aec:	d9d0      	bls.n	8001a90 <BMS+0xc0>
				}
				for(uint8_t j = 0; j < 3; j++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	717b      	strb	r3, [r7, #5]
 8001af2:	e02c      	b.n	8001b4e <BMS+0x17e>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	797b      	ldrb	r3, [r7, #5]
 8001af8:	4413      	add	r3, r2
 8001afa:	3308      	adds	r3, #8
 8001afc:	4a40      	ldr	r2, [pc, #256]	; (8001c00 <BMS+0x230>)
 8001afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b02:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8001b06:	3b58      	subs	r3, #88	; 0x58
 8001b08:	4a3e      	ldr	r2, [pc, #248]	; (8001c04 <BMS+0x234>)
 8001b0a:	8812      	ldrh	r2, [r2, #0]
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	dd1b      	ble.n	8001b48 <BMS+0x178>
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <BMS+0x228>)
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3305      	adds	r3, #5
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b25a      	sxtb	r2, r3
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	b2d8      	uxtb	r0, r3
 8001b36:	4930      	ldr	r1, [pc, #192]	; (8001bf8 <BMS+0x228>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	440b      	add	r3, r1
 8001b42:	3305      	adds	r3, #5
 8001b44:	4602      	mov	r2, r0
 8001b46:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 8001b48:	797b      	ldrb	r3, [r7, #5]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	717b      	strb	r3, [r7, #5]
 8001b4e:	797b      	ldrb	r3, [r7, #5]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d9cf      	bls.n	8001af4 <BMS+0x124>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	3301      	adds	r3, #1
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f43f af49 	beq.w	80019f4 <BMS+0x24>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 8001b62:	4925      	ldr	r1, [pc, #148]	; (8001bf8 <BMS+0x228>)
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7ff fa9b 	bl	80010a0 <LTC6811_wrcfg>
	HAL_Delay(3);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f001 f8c6 	bl	8002cfc <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 8001b70:	f7ff fa12 	bl	8000f98 <LTC6811_adcv>
	HAL_Delay(3);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f001 f8c1 	bl	8002cfc <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <BMS+0x230>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fb46 	bl	8001210 <LTC6811_rdcv>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	793b      	ldrb	r3, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f001 f8b4 	bl	8002cfc <HAL_Delay>

	LTC6811_adax();										// measure 3 celltemp
 8001b94:	f7ff fa42 	bl	800101c <LTC6811_adax>
	HAL_Delay(3);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f001 f8af 	bl	8002cfc <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <BMS+0x238>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fc2a 	bl	80013fc <LTC6811_rdaux>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	793b      	ldrb	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	f001 f8a2 	bl	8002cfc <HAL_Delay>

	//pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
	//HAL_Delay(3);


	convertVoltage();
 8001bb8:	f000 f828 	bl	8001c0c <convertVoltage>

	convertTemperature(selTemp);
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <BMS+0x224>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f975 	bl	8001eb0 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <BMS+0x224>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d806      	bhi.n	8001bdc <BMS+0x20c>
	{
		selTemp++;
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <BMS+0x224>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <BMS+0x224>)
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e002      	b.n	8001be2 <BMS+0x212>
		//CAN_interrupt();
	}


	else
		selTemp = 0;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <BMS+0x224>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]


	send_usb();
 8001be2:	f000 fa35 	bl	8002050 <send_usb>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000437 	.word	0x20000437
 8001bf4:	200004d8 	.word	0x200004d8
 8001bf8:	20000454 	.word	0x20000454
 8001bfc:	20000438 	.word	0x20000438
 8001c00:	2000043c 	.word	0x2000043c
 8001c04:	20000000 	.word	0x20000000
 8001c08:	2000045c 	.word	0x2000045c

08001c0c <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
	//double voltage[NUM_CELLS];


	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	71fb      	strb	r3, [r7, #7]
 8001c16:	e00f      	b.n	8001c38 <convertVoltage+0x2c>
	{
		usb_voltages[i] = cellVoltages[i]/1000;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4a3a      	ldr	r2, [pc, #232]	; (8001d04 <convertVoltage+0xf8>)
 8001c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c20:	4a39      	ldr	r2, [pc, #228]	; (8001d08 <convertVoltage+0xfc>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	b2d1      	uxtb	r1, r2
 8001c2e:	4a37      	ldr	r2, [pc, #220]	; (8001d0c <convertVoltage+0x100>)
 8001c30:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	3301      	adds	r3, #1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b0b      	cmp	r3, #11
 8001c3c:	d9ec      	bls.n	8001c18 <convertVoltage+0xc>
	}

	//uint16_t cell_max = 42890;
	//uint16_t cell_min = 37789;

	uint16_t cell_max = cellVoltages[0];
 8001c3e:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <convertVoltage+0xf8>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	80bb      	strh	r3, [r7, #4]
	uint16_t cell_min = cellVoltages[0];
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <convertVoltage+0xf8>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	807b      	strh	r3, [r7, #2]
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	707b      	strb	r3, [r7, #1]
 8001c4e:	e03c      	b.n	8001cca <convertVoltage+0xbe>
	{
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	703b      	strb	r3, [r7, #0]
 8001c54:	e033      	b.n	8001cbe <convertVoltage+0xb2>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 8001c56:	7839      	ldrb	r1, [r7, #0]
 8001c58:	787a      	ldrb	r2, [r7, #1]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <convertVoltage+0xf8>)
 8001c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c6a:	88ba      	ldrh	r2, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d20b      	bcs.n	8001c88 <convertVoltage+0x7c>
 8001c70:	7839      	ldrb	r1, [r7, #0]
 8001c72:	787a      	ldrb	r2, [r7, #1]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <convertVoltage+0xf8>)
 8001c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c84:	80bb      	strh	r3, [r7, #4]
 8001c86:	e017      	b.n	8001cb8 <convertVoltage+0xac>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 8001c88:	7839      	ldrb	r1, [r7, #0]
 8001c8a:	787a      	ldrb	r2, [r7, #1]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <convertVoltage+0xf8>)
 8001c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c9c:	887a      	ldrh	r2, [r7, #2]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d90a      	bls.n	8001cb8 <convertVoltage+0xac>
 8001ca2:	7839      	ldrb	r1, [r7, #0]
 8001ca4:	787a      	ldrb	r2, [r7, #1]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <convertVoltage+0xf8>)
 8001cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb6:	807b      	strh	r3, [r7, #2]
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001cb8:	783b      	ldrb	r3, [r7, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	703b      	strb	r3, [r7, #0]
 8001cbe:	783b      	ldrb	r3, [r7, #0]
 8001cc0:	2b0b      	cmp	r3, #11
 8001cc2:	d9c8      	bls.n	8001c56 <convertVoltage+0x4a>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	707b      	strb	r3, [r7, #1]
 8001cca:	787b      	ldrb	r3, [r7, #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0bf      	beq.n	8001c50 <convertVoltage+0x44>
			//voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
			//printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
		}
	}

	AMS1_databytes[0] = cell_min;
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <convertVoltage+0x104>)
 8001cd6:	701a      	strb	r2, [r3, #0]
	AMS1_databytes[1] = (cell_min >> 8);
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <convertVoltage+0x104>)
 8001ce2:	705a      	strb	r2, [r3, #1]
	AMS1_databytes[2] = cell_max;
 8001ce4:	88bb      	ldrh	r3, [r7, #4]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <convertVoltage+0x104>)
 8001cea:	709a      	strb	r2, [r3, #2]
	AMS1_databytes[3] = (cell_max >> 8);
 8001cec:	88bb      	ldrh	r3, [r7, #4]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <convertVoltage+0x104>)
 8001cf6:	70da      	strb	r2, [r3, #3]



}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2000043c 	.word	0x2000043c
 8001d08:	10624dd3 	.word	0x10624dd3
 8001d0c:	2000049c 	.word	0x2000049c
 8001d10:	200004bc 	.word	0x200004bc
 8001d14:	00000000 	.word	0x00000000

08001d18 <calculateTemperature>:


uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	80fb      	strh	r3, [r7, #6]
 8001d24:	4613      	mov	r3, r2
 8001d26:	80bb      	strh	r3, [r7, #4]
	if(referenceCode - voltageCode != 0)
 8001d28:	88ba      	ldrh	r2, [r7, #4]
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d03e      	beq.n	8001dae <calculateTemperature+0x96>
	{
		uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <calculateTemperature+0xc0>)
 8001d34:	fb03 f202 	mul.w	r2, r3, r2
 8001d38:	88b9      	ldrh	r1, [r7, #4]
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	1acb      	subs	r3, r1, r3
 8001d3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d42:	60fb      	str	r3, [r7, #12]
		return 1000.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 273150.0;
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7fe fb89 	bl	800045c <__aeabi_ui2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	a11a      	add	r1, pc, #104	; (adr r1, 8001db8 <calculateTemperature+0xa0>)
 8001d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d54:	f7fe fd26 	bl	80007a4 <__aeabi_ddiv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f00b fcb0 	bl	800d6c4 <log>
 8001d64:	a316      	add	r3, pc, #88	; (adr r3, 8001dc0 <calculateTemperature+0xa8>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe fd1b 	bl	80007a4 <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	a115      	add	r1, pc, #84	; (adr r1, 8001dc8 <calculateTemperature+0xb0>)
 8001d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d78:	f7fe fa32 	bl	80001e0 <__aeabi_dsub>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	f04f 0000 	mov.w	r0, #0
 8001d84:	4915      	ldr	r1, [pc, #84]	; (8001ddc <calculateTemperature+0xc4>)
 8001d86:	f7fe fd0d 	bl	80007a4 <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	a30f      	add	r3, pc, #60	; (adr r3, 8001dd0 <calculateTemperature+0xb8>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fa22 	bl	80001e0 <__aeabi_dsub>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe feac 	bl	8000b00 <__aeabi_d2uiz>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	e000      	b.n	8001db0 <calculateTemperature+0x98>
	}
	else
		return 0x00;
 8001dae:	2300      	movs	r3, #0


}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40c38800 	.word	0x40c38800
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40aad600 	.word	0x40aad600
 8001dc8:	dcb5db83 	.word	0xdcb5db83
 8001dcc:	3f6b79e1 	.word	0x3f6b79e1
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	4110abf8 	.word	0x4110abf8
 8001dd8:	000186a0 	.word	0x000186a0
 8001ddc:	408f4000 	.word	0x408f4000

08001de0 <CAN_interrupt>:

void CAN_interrupt()
{
 8001de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0

	if (HAL_GetTick()>= last10 + 10)
 8001de8:	f000 ff7e 	bl	8002ce8 <HAL_GetTick>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2200      	movs	r2, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	617a      	str	r2, [r7, #20]
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <CAN_interrupt+0xb4>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f112 080a 	adds.w	r8, r2, #10
 8001dfe:	f143 0900 	adc.w	r9, r3, #0
 8001e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4541      	cmp	r1, r8
 8001e0a:	eb73 0309 	sbcs.w	r3, r3, r9
 8001e0e:	d313      	bcc.n	8001e38 <CAN_interrupt+0x58>
	{

		AMS0_databytes[6] = (precharge << 4);
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <CAN_interrupt+0xb8>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <CAN_interrupt+0xbc>)
 8001e1a:	719a      	strb	r2, [r3, #6]

		CAN_100(AMS0_databytes);
 8001e1c:	481f      	ldr	r0, [pc, #124]	; (8001e9c <CAN_interrupt+0xbc>)
 8001e1e:	f000 f9ab 	bl	8002178 <CAN_100>
		last10 = HAL_GetTick();
 8001e22:	f000 ff61 	bl	8002ce8 <HAL_GetTick>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	60fa      	str	r2, [r7, #12]
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <CAN_interrupt+0xb4>)
 8001e30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001e34:	e9c3 1200 	strd	r1, r2, [r3]

	}
	if (HAL_GetTick()>= last100 + 100)
 8001e38:	f000 ff56 	bl	8002ce8 <HAL_GetTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	469a      	mov	sl, r3
 8001e42:	4693      	mov	fp, r2
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <CAN_interrupt+0xc0>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 8001e4e:	f143 0500 	adc.w	r5, r3, #0
 8001e52:	45a2      	cmp	sl, r4
 8001e54:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001e58:	d316      	bcc.n	8001e88 <CAN_interrupt+0xa8>
	{
		CAN_10(AMS1_databytes);
 8001e5a:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <CAN_interrupt+0xc4>)
 8001e5c:	f000 f9b2 	bl	80021c4 <CAN_10>

		HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 8001e60:	2110      	movs	r1, #16
 8001e62:	4811      	ldr	r0, [pc, #68]	; (8001ea8 <CAN_interrupt+0xc8>)
 8001e64:	f002 fb86 	bl	8004574 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6c:	480f      	ldr	r0, [pc, #60]	; (8001eac <CAN_interrupt+0xcc>)
 8001e6e:	f002 fb81 	bl	8004574 <HAL_GPIO_TogglePin>
		last100 = HAL_GetTick();
 8001e72:	f000 ff39 	bl	8002ce8 <HAL_GetTick>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2200      	movs	r2, #0
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <CAN_interrupt+0xc0>)
 8001e80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e84:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	200004c8 	.word	0x200004c8
 8001e98:	20000437 	.word	0x20000437
 8001e9c:	200004b4 	.word	0x200004b4
 8001ea0:	200004d0 	.word	0x200004d0
 8001ea4:	200004bc 	.word	0x200004bc
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020800 	.word	0x40020800

08001eb0 <convertTemperature>:


void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]

	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001eba:	4a5f      	ldr	r2, [pc, #380]	; (8002038 <convertTemperature+0x188>)
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	77fb      	strb	r3, [r7, #31]
 8001eca:	e037      	b.n	8001f3c <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	77bb      	strb	r3, [r7, #30]
 8001ed0:	e02e      	b.n	8001f30 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001ed2:	7fb9      	ldrb	r1, [r7, #30]
 8001ed4:	7ffa      	ldrb	r2, [r7, #31]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	440b      	add	r3, r1
 8001ee0:	4a56      	ldr	r2, [pc, #344]	; (800203c <convertTemperature+0x18c>)
 8001ee2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001ee6:	7ffa      	ldrb	r2, [r7, #31]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	3305      	adds	r3, #5
 8001ef2:	4a52      	ldr	r2, [pc, #328]	; (800203c <convertTemperature+0x18c>)
 8001ef4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001ef8:	7ffa      	ldrb	r2, [r7, #31]
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	461c      	mov	r4, r3
 8001f04:	7fb9      	ldrb	r1, [r7, #30]
 8001f06:	79fa      	ldrb	r2, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3320      	adds	r3, #32
 8001f12:	443b      	add	r3, r7
 8001f14:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f18:	441c      	add	r4, r3
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7ff fefc 	bl	8001d18 <calculateTemperature>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <convertTemperature+0x190>)
 8001f26:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001f2a:	7fbb      	ldrb	r3, [r7, #30]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	77bb      	strb	r3, [r7, #30]
 8001f30:	7fbb      	ldrb	r3, [r7, #30]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d9cd      	bls.n	8001ed2 <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	77fb      	strb	r3, [r7, #31]
 8001f3c:	7ffb      	ldrb	r3, [r7, #31]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0c4      	beq.n	8001ecc <convertTemperature+0x1c>
				}
			}
			*/
		//USB STUFF

	if(selTemp == 3)
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d172      	bne.n	800202e <convertTemperature+0x17e>
	{
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	777b      	strb	r3, [r7, #29]
 8001f4c:	e00f      	b.n	8001f6e <convertTemperature+0xbe>
		{
			usb_temperatures[i] = temperature[i]/1000;
 8001f4e:	7f7b      	ldrb	r3, [r7, #29]
 8001f50:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <convertTemperature+0x190>)
 8001f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <convertTemperature+0x194>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	7f7b      	ldrb	r3, [r7, #29]
 8001f62:	b2d1      	uxtb	r1, r2
 8001f64:	4a38      	ldr	r2, [pc, #224]	; (8002048 <convertTemperature+0x198>)
 8001f66:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001f68:	7f7b      	ldrb	r3, [r7, #29]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	777b      	strb	r3, [r7, #29]
 8001f6e:	7f7b      	ldrb	r3, [r7, #29]
 8001f70:	2b0b      	cmp	r3, #11
 8001f72:	d9ec      	bls.n	8001f4e <convertTemperature+0x9e>
		}

		//CAN stuff


		uint16_t temp_min = temperature[0];
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <convertTemperature+0x190>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	837b      	strh	r3, [r7, #26]
			uint16_t temp_max = temperature[0];
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <convertTemperature+0x190>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	833b      	strh	r3, [r7, #24]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
 8001f84:	e050      	b.n	8002028 <convertTemperature+0x178>
			{
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	75bb      	strb	r3, [r7, #22]
 8001f8a:	e033      	b.n	8001ff4 <convertTemperature+0x144>
				{
					if(temperature[i + k * 12] > temp_max) temp_max = temperature[i + k * 12];
 8001f8c:	7db9      	ldrb	r1, [r7, #22]
 8001f8e:	7dfa      	ldrb	r2, [r7, #23]
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	4a29      	ldr	r2, [pc, #164]	; (8002040 <convertTemperature+0x190>)
 8001f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fa0:	8b3a      	ldrh	r2, [r7, #24]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d20b      	bcs.n	8001fbe <convertTemperature+0x10e>
 8001fa6:	7db9      	ldrb	r1, [r7, #22]
 8001fa8:	7dfa      	ldrb	r2, [r7, #23]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <convertTemperature+0x190>)
 8001fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fba:	833b      	strh	r3, [r7, #24]
 8001fbc:	e017      	b.n	8001fee <convertTemperature+0x13e>
					else if(temperature[i + k * 12] < temp_min) temp_min = temperature[i + k * 12];
 8001fbe:	7db9      	ldrb	r1, [r7, #22]
 8001fc0:	7dfa      	ldrb	r2, [r7, #23]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <convertTemperature+0x190>)
 8001fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fd2:	8b7a      	ldrh	r2, [r7, #26]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d90a      	bls.n	8001fee <convertTemperature+0x13e>
 8001fd8:	7db9      	ldrb	r1, [r7, #22]
 8001fda:	7dfa      	ldrb	r2, [r7, #23]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <convertTemperature+0x190>)
 8001fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fec:	837b      	strh	r3, [r7, #26]
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001fee:	7dbb      	ldrb	r3, [r7, #22]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	75bb      	strb	r3, [r7, #22]
 8001ff4:	7dbb      	ldrb	r3, [r7, #22]
 8001ff6:	2b0b      	cmp	r3, #11
 8001ff8:	d9c8      	bls.n	8001f8c <convertTemperature+0xdc>
				}

				AMS1_databytes[4] = temp_min;
 8001ffa:	8b7b      	ldrh	r3, [r7, #26]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <convertTemperature+0x19c>)
 8002000:	711a      	strb	r2, [r3, #4]
				AMS1_databytes[5] = (temp_min >> 8);
 8002002:	8b7b      	ldrh	r3, [r7, #26]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29b      	uxth	r3, r3
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <convertTemperature+0x19c>)
 800200c:	715a      	strb	r2, [r3, #5]
				AMS1_databytes[6] = temp_max;
 800200e:	8b3b      	ldrh	r3, [r7, #24]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <convertTemperature+0x19c>)
 8002014:	719a      	strb	r2, [r3, #6]
				AMS1_databytes[7] = (temp_max >> 8);
 8002016:	8b3b      	ldrh	r3, [r7, #24]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b29b      	uxth	r3, r3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <convertTemperature+0x19c>)
 8002020:	71da      	strb	r2, [r3, #7]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	3301      	adds	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ab      	beq.n	8001f86 <convertTemperature+0xd6>
			}
	}
}
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bdb0      	pop	{r4, r5, r7, pc}
 8002036:	bf00      	nop
 8002038:	0800dab8 	.word	0x0800dab8
 800203c:	2000045c 	.word	0x2000045c
 8002040:	20000468 	.word	0x20000468
 8002044:	10624dd3 	.word	0x10624dd3
 8002048:	200004a8 	.word	0x200004a8
 800204c:	200004bc 	.word	0x200004bc

08002050 <send_usb>:

void send_usb()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	usb_data[NUM_CELLS * 2] = 0xff;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <send_usb+0x48>)
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	761a      	strb	r2, [r3, #24]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	e00f      	b.n	8002082 <send_usb+0x32>
	{
		usb_data[i] = usb_voltages[i];
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	490d      	ldr	r1, [pc, #52]	; (800209c <send_usb+0x4c>)
 8002068:	5c89      	ldrb	r1, [r1, r2]
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <send_usb+0x48>)
 800206c:	54d1      	strb	r1, [r2, r3]
		usb_data[NUM_CELLS + i] = usb_temperatures[i];
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	330c      	adds	r3, #12
 8002074:	490a      	ldr	r1, [pc, #40]	; (80020a0 <send_usb+0x50>)
 8002076:	5c89      	ldrb	r1, [r1, r2]
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <send_usb+0x48>)
 800207a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	3301      	adds	r3, #1
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b0b      	cmp	r3, #11
 8002086:	d9ec      	bls.n	8002062 <send_usb+0x12>

	}

	CDC_Transmit_FS(usb_data, NUM_CELLS * 2 + 1);
 8002088:	2119      	movs	r1, #25
 800208a:	4803      	ldr	r0, [pc, #12]	; (8002098 <send_usb+0x48>)
 800208c:	f008 fa2e 	bl	800a4ec <CDC_Transmit_FS>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000480 	.word	0x20000480
 800209c:	2000049c 	.word	0x2000049c
 80020a0:	200004a8 	.word	0x200004a8

080020a4 <CAN_TX>:

uint32_t RxFifo;

	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 80020a4:	b084      	sub	sp, #16
 80020a6:	b5b0      	push	{r4, r5, r7, lr}
 80020a8:	b090      	sub	sp, #64	; 0x40
 80020aa:	af0e      	add	r7, sp, #56	; 0x38
 80020ac:	f107 0418 	add.w	r4, r7, #24
 80020b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80020ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020bc:	f107 0018 	add.w	r0, r7, #24
 80020c0:	f001 fb5b 	bl	800377a <HAL_CAN_AddTxMessage>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d018      	beq.n	80020fc <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 80020ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020cc:	930c      	str	r3, [sp, #48]	; 0x30
 80020ce:	ad06      	add	r5, sp, #24
 80020d0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80020d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e0:	466d      	mov	r5, sp
 80020e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f8:	f7ff ffd4 	bl	80020a4 <CAN_TX>
	}
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002106:	b004      	add	sp, #16
 8002108:	4770      	bx	lr
	...

0800210c <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 800210c:	b084      	sub	sp, #16
 800210e:	b580      	push	{r7, lr}
 8002110:	b08a      	sub	sp, #40	; 0x28
 8002112:	af00      	add	r7, sp, #0
 8002114:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8002118:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <CAN_RX+0x60>)
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	f107 020c 	add.w	r2, r7, #12
 8002126:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800212a:	f001 fbf5 	bl	8003918 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002134:	d112      	bne.n	800215c <CAN_RX+0x50>
	{


		AIR_Logic(RxData[0], ts_ready, RxData[1]);
 8002136:	793b      	ldrb	r3, [r7, #4]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <CAN_RX+0x64>)
 800213a:	7811      	ldrb	r1, [r2, #0]
 800213c:	797a      	ldrb	r2, [r7, #5]
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f994 	bl	800246c <AIR_Logic>
		AMS0_databytes[6]|= (ts_ready << 3);
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <CAN_RX+0x68>)
 8002146:	799b      	ldrb	r3, [r3, #6]
 8002148:	b25a      	sxtb	r2, r3
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <CAN_RX+0x64>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	b25b      	sxtb	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b25b      	sxtb	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <CAN_RX+0x68>)
 800215a:	719a      	strb	r2, [r3, #6]

	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002166:	b004      	add	sp, #16
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200004dc 	.word	0x200004dc
 8002170:	200004d9 	.word	0x200004d9
 8002174:	200004b4 	.word	0x200004b4

08002178 <CAN_100>:


void CAN_100(uint8_t precharge_data[])		// CAN Messages transmitted with 100 Hz
{
 8002178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217a:	b091      	sub	sp, #68	; 0x44
 800217c:	af0e      	add	r7, sp, #56	; 0x38
 800217e:	6078      	str	r0, [r7, #4]

	CAN_TX(hcan1, AMS0_header, precharge_data);
 8002180:	4e0e      	ldr	r6, [pc, #56]	; (80021bc <CAN_100+0x44>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	930c      	str	r3, [sp, #48]	; 0x30
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <CAN_100+0x48>)
 8002188:	ac06      	add	r4, sp, #24
 800218a:	461d      	mov	r5, r3
 800218c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002194:	e884 0003 	stmia.w	r4, {r0, r1}
 8002198:	466d      	mov	r5, sp
 800219a:	f106 0410 	add.w	r4, r6, #16
 800219e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021ae:	f7ff ff79 	bl	80020a4 <CAN_TX>
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200004e0 	.word	0x200004e0
 80021c0:	20000004 	.word	0x20000004

080021c4 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	b091      	sub	sp, #68	; 0x44
 80021c8:	af0e      	add	r7, sp, #56	; 0x38
 80021ca:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, bms_data);
 80021cc:	4e0e      	ldr	r6, [pc, #56]	; (8002208 <CAN_10+0x44>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	930c      	str	r3, [sp, #48]	; 0x30
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <CAN_10+0x48>)
 80021d4:	ac06      	add	r4, sp, #24
 80021d6:	461d      	mov	r5, r3
 80021d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80021e4:	466d      	mov	r5, sp
 80021e6:	f106 0410 	add.w	r4, r6, #16
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021fa:	f7ff ff53 	bl	80020a4 <CAN_TX>
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002206:	bf00      	nop
 8002208:	200004e0 	.word	0x200004e0
 800220c:	2000001c 	.word	0x2000001c

08002210 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MX_CAN1_Init+0x78>)
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <MX_CAN1_Init+0x7c>)
 8002218:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_CAN1_Init+0x78>)
 800221c:	2204      	movs	r2, #4
 800221e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <MX_CAN1_Init+0x78>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_CAN1_Init+0x78>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_CAN1_Init+0x78>)
 800222e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002232:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_CAN1_Init+0x78>)
 8002236:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800223a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_CAN1_Init+0x78>)
 800223e:	2200      	movs	r2, #0
 8002240:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_CAN1_Init+0x78>)
 8002244:	2200      	movs	r2, #0
 8002246:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_CAN1_Init+0x78>)
 800224a:	2200      	movs	r2, #0
 800224c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_CAN1_Init+0x78>)
 8002250:	2200      	movs	r2, #0
 8002252:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_CAN1_Init+0x78>)
 8002256:	2200      	movs	r2, #0
 8002258:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_CAN1_Init+0x78>)
 800225c:	2200      	movs	r2, #0
 800225e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <MX_CAN1_Init+0x78>)
 8002262:	f001 f94b 	bl	80034fc <HAL_CAN_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800226c:	f000 fa73 	bl	8002756 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002270:	2102      	movs	r1, #2
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_CAN1_Init+0x78>)
 8002274:	f001 fc71 	bl	8003b5a <HAL_CAN_ActivateNotification>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_CAN1_Init+0x72>
    {
  	  Error_Handler();
 800227e:	f000 fa6a 	bl	8002756 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200004e0 	.word	0x200004e0
 800228c:	40006400 	.word	0x40006400

08002290 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <MX_CAN2_Init+0x64>)
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <MX_CAN2_Init+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_CAN2_Init+0x64>)
 800229c:	2204      	movs	r2, #4
 800229e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022b2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022dc:	2200      	movs	r2, #0
 80022de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_CAN2_Init+0x64>)
 80022e2:	f001 f90b 	bl	80034fc <HAL_CAN_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80022ec:	f000 fa33 	bl	8002756 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000508 	.word	0x20000508
 80022f8:	40006800 	.word	0x40006800

080022fc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a4f      	ldr	r2, [pc, #316]	; (8002458 <HAL_CAN_MspInit+0x15c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d146      	bne.n	80023ac <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800231e:	4b4f      	ldr	r3, [pc, #316]	; (800245c <HAL_CAN_MspInit+0x160>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_CAN_MspInit+0x160>)
 8002326:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002328:	4b4c      	ldr	r3, [pc, #304]	; (800245c <HAL_CAN_MspInit+0x160>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10d      	bne.n	800234c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_CAN_MspInit+0x164>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	4a49      	ldr	r2, [pc, #292]	; (8002460 <HAL_CAN_MspInit+0x164>)
 800233a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233e:	6413      	str	r3, [r2, #64]	; 0x40
 8002340:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_CAN_MspInit+0x164>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	4b43      	ldr	r3, [pc, #268]	; (8002460 <HAL_CAN_MspInit+0x164>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	4a42      	ldr	r2, [pc, #264]	; (8002460 <HAL_CAN_MspInit+0x164>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6313      	str	r3, [r2, #48]	; 0x30
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <HAL_CAN_MspInit+0x164>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002368:	f44f 7340 	mov.w	r3, #768	; 0x300
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800237a:	2309      	movs	r3, #9
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	4837      	ldr	r0, [pc, #220]	; (8002464 <HAL_CAN_MspInit+0x168>)
 8002386:	f001 ff3f 	bl	8004208 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2013      	movs	r0, #19
 8002390:	f001 ff03 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002394:	2013      	movs	r0, #19
 8002396:	f001 ff1c 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2014      	movs	r0, #20
 80023a0:	f001 fefb 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023a4:	2014      	movs	r0, #20
 80023a6:	f001 ff14 	bl	80041d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80023aa:	e050      	b.n	800244e <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2d      	ldr	r2, [pc, #180]	; (8002468 <HAL_CAN_MspInit+0x16c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d14b      	bne.n	800244e <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_CAN_MspInit+0x164>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a28      	ldr	r2, [pc, #160]	; (8002460 <HAL_CAN_MspInit+0x164>)
 80023c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_CAN_MspInit+0x164>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <HAL_CAN_MspInit+0x160>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3301      	adds	r3, #1
 80023d8:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_CAN_MspInit+0x160>)
 80023da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_CAN_MspInit+0x160>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10d      	bne.n	8002400 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_CAN_MspInit+0x164>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <HAL_CAN_MspInit+0x164>)
 80023ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f2:	6413      	str	r3, [r2, #64]	; 0x40
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_CAN_MspInit+0x164>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <HAL_CAN_MspInit+0x164>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a15      	ldr	r2, [pc, #84]	; (8002460 <HAL_CAN_MspInit+0x164>)
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_CAN_MspInit+0x164>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800241c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800242e:	2309      	movs	r3, #9
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	480a      	ldr	r0, [pc, #40]	; (8002464 <HAL_CAN_MspInit+0x168>)
 800243a:	f001 fee5 	bl	8004208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2040      	movs	r0, #64	; 0x40
 8002444:	f001 fea9 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002448:	2040      	movs	r0, #64	; 0x40
 800244a:	f001 fec2 	bl	80041d2 <HAL_NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3730      	adds	r7, #48	; 0x30
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40006400 	.word	0x40006400
 800245c:	20000530 	.word	0x20000530
 8002460:	40023800 	.word	0x40023800
 8002464:	40020400 	.word	0x40020400
 8002468:	40006800 	.word	0x40006800

0800246c <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
}

void AIR_Logic(uint8_t ts_on, uint8_t ts_ready, uint8_t ts_start)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	460b      	mov	r3, r1
 8002478:	71bb      	strb	r3, [r7, #6]
 800247a:	4613      	mov	r3, r2
 800247c:	717b      	strb	r3, [r7, #5]

	 if (error == 0)
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <AIR_Logic+0x4c>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <AIR_Logic+0x42>
	 {
		 if (ts_on>= 1)
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <AIR_Logic+0x30>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 800248c:	2201      	movs	r2, #1
 800248e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002492:	480a      	ldr	r0, [pc, #40]	; (80024bc <AIR_Logic+0x50>)
 8002494:	f002 f856 	bl	8004544 <HAL_GPIO_WritePin>
			 ts_ready = 1;
 8002498:	2301      	movs	r3, #1
 800249a:	71bb      	strb	r3, [r7, #6]

		 }

		 if (ts_start>= 1)
 800249c:	797b      	ldrb	r3, [r7, #5]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <AIR_Logic+0x42>
		 {
			 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <AIR_Logic+0x54>)
 80024aa:	f002 f84b 	bl	8004544 <HAL_GPIO_WritePin>
		 }
	}
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000534 	.word	0x20000534
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020800 	.word	0x40020800

080024c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b5e      	ldr	r3, [pc, #376]	; (8002658 <MX_GPIO_Init+0x194>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a5d      	ldr	r2, [pc, #372]	; (8002658 <MX_GPIO_Init+0x194>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <MX_GPIO_Init+0x194>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b57      	ldr	r3, [pc, #348]	; (8002658 <MX_GPIO_Init+0x194>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a56      	ldr	r2, [pc, #344]	; (8002658 <MX_GPIO_Init+0x194>)
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b54      	ldr	r3, [pc, #336]	; (8002658 <MX_GPIO_Init+0x194>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4b50      	ldr	r3, [pc, #320]	; (8002658 <MX_GPIO_Init+0x194>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a4f      	ldr	r2, [pc, #316]	; (8002658 <MX_GPIO_Init+0x194>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <MX_GPIO_Init+0x194>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <MX_GPIO_Init+0x194>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a48      	ldr	r2, [pc, #288]	; (8002658 <MX_GPIO_Init+0x194>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <MX_GPIO_Init+0x194>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <MX_GPIO_Init+0x194>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a41      	ldr	r2, [pc, #260]	; (8002658 <MX_GPIO_Init+0x194>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <MX_GPIO_Init+0x194>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800256c:	483b      	ldr	r0, [pc, #236]	; (800265c <MX_GPIO_Init+0x198>)
 800256e:	f001 ffe9 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	f248 0110 	movw	r1, #32784	; 0x8010
 8002578:	4839      	ldr	r0, [pc, #228]	; (8002660 <MX_GPIO_Init+0x19c>)
 800257a:	f001 ffe3 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 800257e:	2201      	movs	r2, #1
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	4837      	ldr	r0, [pc, #220]	; (8002660 <MX_GPIO_Init+0x19c>)
 8002584:	f001 ffde 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800258e:	4835      	ldr	r0, [pc, #212]	; (8002664 <MX_GPIO_Init+0x1a0>)
 8002590:	f001 ffd8 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 8002594:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	482b      	ldr	r0, [pc, #172]	; (800265c <MX_GPIO_Init+0x198>)
 80025ae:	f001 fe2b 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 80025b2:	2368      	movs	r3, #104	; 0x68
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4826      	ldr	r0, [pc, #152]	; (8002660 <MX_GPIO_Init+0x19c>)
 80025c6:	f001 fe1f 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 80025ca:	f248 0390 	movw	r3, #32912	; 0x8090
 80025ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d0:	2301      	movs	r3, #1
 80025d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4619      	mov	r1, r3
 80025e2:	481f      	ldr	r0, [pc, #124]	; (8002660 <MX_GPIO_Init+0x19c>)
 80025e4:	f001 fe10 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SC_CLOSING_Pin|SC_STATE_Pin|AIR_N_ACT_Pin|AIR_N_INT_Pin;
 80025e8:	23f0      	movs	r3, #240	; 0xf0
 80025ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	4818      	ldr	r0, [pc, #96]	; (800265c <MX_GPIO_Init+0x198>)
 80025fc:	f001 fe04 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 8002600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002606:	2301      	movs	r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4812      	ldr	r0, [pc, #72]	; (8002664 <MX_GPIO_Init+0x1a0>)
 800261a:	f001 fdf5 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 800261e:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4619      	mov	r1, r3
 8002632:	480c      	ldr	r0, [pc, #48]	; (8002664 <MX_GPIO_Init+0x1a0>)
 8002634:	f001 fde8 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 8002638:	2304      	movs	r3, #4
 800263a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	4807      	ldr	r0, [pc, #28]	; (8002668 <MX_GPIO_Init+0x1a4>)
 800264c:	f001 fddc 	bl	8004208 <HAL_GPIO_Init>

}
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	40020800 	.word	0x40020800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020c00 	.word	0x40020c00

0800266c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002670:	f000 fad6 	bl	8002c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002674:	f000 f828 	bl	80026c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002678:	f7ff ff24 	bl	80024c4 <MX_GPIO_Init>
  MX_SPI3_Init();
 800267c:	f000 f870 	bl	8002760 <MX_SPI3_Init>
  MX_TIM2_Init();
 8002680:	f000 fa32 	bl	8002ae8 <MX_TIM2_Init>
  MX_CAN1_Init();
 8002684:	f7ff fdc4 	bl	8002210 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002688:	f7ff fe02 	bl	8002290 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 800268c:	f007 fe70 	bl	800a370 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002690:	f7fe ffce 	bl	8001630 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002694:	f7ff f81e 	bl	80016d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 8002698:	4809      	ldr	r0, [pc, #36]	; (80026c0 <main+0x54>)
 800269a:	f004 fb83 	bl	8006da4 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 800269e:	4809      	ldr	r0, [pc, #36]	; (80026c4 <main+0x58>)
 80026a0:	f001 f827 	bl	80036f2 <HAL_CAN_Start>
  BMS_init();
 80026a4:	f7ff f98e 	bl	80019c4 <BMS_init>

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80026a8:	2102      	movs	r1, #2
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <main+0x58>)
 80026ac:	f001 fa55 	bl	8003b5a <HAL_CAN_ActivateNotification>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <main+0x4e>
    {
  	  Error_Handler();
 80026b6:	f000 f84e 	bl	8002756 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 80026ba:	f7ff f989 	bl	80019d0 <BMS>
 80026be:	e7fc      	b.n	80026ba <main+0x4e>
 80026c0:	20000594 	.word	0x20000594
 80026c4:	200004e0 	.word	0x200004e0

080026c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b092      	sub	sp, #72	; 0x48
 80026cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ce:	f107 0318 	add.w	r3, r7, #24
 80026d2:	2230      	movs	r2, #48	; 0x30
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f009 f967 	bl	800b9aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026ea:	2302      	movs	r3, #2
 80026ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ee:	2301      	movs	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026f2:	2310      	movs	r3, #16
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f6:	2302      	movs	r3, #2
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026fa:	2300      	movs	r3, #0
 80026fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026fe:	2308      	movs	r3, #8
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002702:	23c0      	movs	r3, #192	; 0xc0
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002706:	2304      	movs	r3, #4
 8002708:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800270a:	2308      	movs	r3, #8
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800270e:	f107 0318 	add.w	r3, r7, #24
 8002712:	4618      	mov	r0, r3
 8002714:	f003 f978 	bl	8005a08 <HAL_RCC_OscConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800271e:	f000 f81a 	bl	8002756 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002722:	230f      	movs	r3, #15
 8002724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002726:	2302      	movs	r3, #2
 8002728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800272e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002738:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2103      	movs	r1, #3
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fbb6 	bl	8005eb0 <HAL_RCC_ClockConfig>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800274a:	f000 f804 	bl	8002756 <Error_Handler>
  }
}
 800274e:	bf00      	nop
 8002750:	3748      	adds	r7, #72	; 0x48
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800275a:	b672      	cpsid	i
}
 800275c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800275e:	e7fe      	b.n	800275e <Error_Handler+0x8>

08002760 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_SPI3_Init+0x64>)
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <MX_SPI3_Init+0x68>)
 8002768:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_SPI3_Init+0x64>)
 800276c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002770:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_SPI3_Init+0x64>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_SPI3_Init+0x64>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_SPI3_Init+0x64>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_SPI3_Init+0x64>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_SPI3_Init+0x64>)
 800278c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002790:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_SPI3_Init+0x64>)
 8002794:	2220      	movs	r2, #32
 8002796:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <MX_SPI3_Init+0x64>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_SPI3_Init+0x64>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <MX_SPI3_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_SPI3_Init+0x64>)
 80027ac:	220a      	movs	r2, #10
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_SPI3_Init+0x64>)
 80027b2:	f003 fd39 	bl	8006228 <HAL_SPI_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80027bc:	f7ff ffcb 	bl	8002756 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000538 	.word	0x20000538
 80027c8:	40003c00 	.word	0x40003c00

080027cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a19      	ldr	r2, [pc, #100]	; (8002850 <HAL_SPI_MspInit+0x84>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d12c      	bne.n	8002848 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_SPI_MspInit+0x88>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a17      	ldr	r2, [pc, #92]	; (8002854 <HAL_SPI_MspInit+0x88>)
 80027f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_SPI_MspInit+0x88>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_SPI_MspInit+0x88>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a10      	ldr	r2, [pc, #64]	; (8002854 <HAL_SPI_MspInit+0x88>)
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_SPI_MspInit+0x88>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002826:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800282a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002838:	2306      	movs	r3, #6
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	4619      	mov	r1, r3
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <HAL_SPI_MspInit+0x8c>)
 8002844:	f001 fce0 	bl	8004208 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002848:	bf00      	nop
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40003c00 	.word	0x40003c00
 8002854:	40023800 	.word	0x40023800
 8002858:	40020800 	.word	0x40020800

0800285c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_MspInit+0x48>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <HAL_MspInit+0x48>)
 800286c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002870:	6453      	str	r3, [r2, #68]	; 0x44
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_MspInit+0x48>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_MspInit+0x48>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_MspInit+0x48>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_MspInit+0x48>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	40023800 	.word	0x40023800

080028a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028ac:	e7fe      	b.n	80028ac <NMI_Handler+0x4>

080028ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <MemManage_Handler+0x4>

080028ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <BusFault_Handler+0x4>

080028c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <UsageFault_Handler+0x4>

080028c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ee:	f000 f9e9 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <CAN1_TX_IRQHandler+0x10>)
 80028fe:	f001 f951 	bl	8003ba4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200004e0 	.word	0x200004e0

0800290c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <CAN1_RX0_IRQHandler+0x10>)
 8002912:	f001 f947 	bl	8003ba4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200004e0 	.word	0x200004e0

08002920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <TIM2_IRQHandler+0x10>)
 8002926:	f004 faab 	bl	8006e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000594 	.word	0x20000594

08002934 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <CAN2_RX0_IRQHandler+0x10>)
 800293a:	f001 f933 	bl	8003ba4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000508 	.word	0x20000508

08002948 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <OTG_FS_IRQHandler+0x10>)
 800294e:	f001 ff69 	bl	8004824 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200012a8 	.word	0x200012a8

0800295c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return 1;
 8002960:	2301      	movs	r3, #1
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <_kill>:

int _kill(int pid, int sig)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002974:	f009 f87c 	bl	800ba70 <__errno>
 8002978:	4603      	mov	r3, r0
 800297a:	2216      	movs	r2, #22
 800297c:	601a      	str	r2, [r3, #0]
  return -1;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <_exit>:

void _exit (int status)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002992:	f04f 31ff 	mov.w	r1, #4294967295
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffe7 	bl	800296a <_kill>
  while (1) {}    /* Make sure we hang here */
 800299c:	e7fe      	b.n	800299c <_exit+0x12>

0800299e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e00a      	b.n	80029c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b0:	f3af 8000 	nop.w
 80029b4:	4601      	mov	r1, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	60ba      	str	r2, [r7, #8]
 80029bc:	b2ca      	uxtb	r2, r1
 80029be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3301      	adds	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	dbf0      	blt.n	80029b0 <_read+0x12>
  }

  return len;
 80029ce:	687b      	ldr	r3, [r7, #4]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e009      	b.n	80029fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	60ba      	str	r2, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3301      	adds	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	dbf1      	blt.n	80029ea <_write+0x12>
    //ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
  }
  return len;
 8002a06:	687b      	ldr	r3, [r7, #4]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_close>:

int _close(int file)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a36:	605a      	str	r2, [r3, #4]
  return 0;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <_isatty>:

int _isatty(int file)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <_sbrk+0x5c>)
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <_sbrk+0x60>)
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <_sbrk+0x64>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <_sbrk+0x68>)
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d207      	bcs.n	8002ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa0:	f008 ffe6 	bl	800ba70 <__errno>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e009      	b.n	8002ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <_sbrk+0x64>)
 8002ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	2000c000 	.word	0x2000c000
 8002ad0:	00000400 	.word	0x00000400
 8002ad4:	20000590 	.word	0x20000590
 8002ad8:	200018f8 	.word	0x200018f8

08002adc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002afc:	463b      	mov	r3, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b0e:	222f      	movs	r2, #47	; 0x2f
 8002b10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b2c:	4813      	ldr	r0, [pc, #76]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b2e:	f004 f8ea 	bl	8006d06 <HAL_TIM_Base_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b38:	f7ff fe0d 	bl	8002756 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	4619      	mov	r1, r3
 8002b48:	480c      	ldr	r0, [pc, #48]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b4a:	f004 faa1 	bl	8007090 <HAL_TIM_ConfigClockSource>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b54:	f7ff fdff 	bl	8002756 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b60:	463b      	mov	r3, r7
 8002b62:	4619      	mov	r1, r3
 8002b64:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_TIM2_Init+0x94>)
 8002b66:	f004 fcb3 	bl	80074d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b70:	f7ff fdf1 	bl	8002756 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b74:	bf00      	nop
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000594 	.word	0x20000594

08002b80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b90:	d115      	bne.n	8002bbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_TIM_Base_MspInit+0x48>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_TIM_Base_MspInit+0x48>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_TIM_Base_MspInit+0x48>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	201c      	movs	r0, #28
 8002bb4:	f001 faf1 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bb8:	201c      	movs	r0, #28
 8002bba:	f001 fb0a 	bl	80041d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002bd0:	f7ff ff84 	bl	8002adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bd6:	490d      	ldr	r1, [pc, #52]	; (8002c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bec:	4c0a      	ldr	r4, [pc, #40]	; (8002c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bfa:	f008 ff3f 	bl	800ba7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfe:	f7ff fd35 	bl	800266c <main>
  bx  lr    
 8002c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c04:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c0c:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8002c10:	0800e29c 	.word	0x0800e29c
  ldr r2, =_sbss
 8002c14:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8002c18:	200018f8 	.word	0x200018f8

08002c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c1c:	e7fe      	b.n	8002c1c <ADC_IRQHandler>
	...

08002c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_Init+0x40>)
 8002c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_Init+0x40>)
 8002c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_Init+0x40>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f001 fa9b 	bl	8004184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f000 f808 	bl	8002c64 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002c54:	f7ff fe02 	bl	800285c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_InitTick+0x54>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x58>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 fab3 	bl	80041ee <HAL_SYSTICK_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d80a      	bhi.n	8002cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f001 fa7b 	bl	800419a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <HAL_InitTick+0x5c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000034 	.word	0x20000034
 8002cbc:	2000003c 	.word	0x2000003c
 8002cc0:	20000038 	.word	0x20000038

08002cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_IncTick+0x1c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	2000003c 	.word	0x2000003c
 8002ce4:	200005dc 	.word	0x200005dc

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <HAL_GetTick+0x10>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	200005dc 	.word	0x200005dc

08002cfc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff fff0 	bl	8002ce8 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d005      	beq.n	8002d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_Delay+0x44>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d22:	bf00      	nop
 8002d24:	f7ff ffe0 	bl	8002ce8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d8f7      	bhi.n	8002d24 <HAL_Delay+0x28>
  {
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000003c 	.word	0x2000003c

08002d44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e033      	b.n	8002dc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fd08 	bl	8001778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d8a:	f023 0302 	bic.w	r3, r3, #2
 8002d8e:	f043 0202 	orr.w	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 faaa 	bl	80032f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
 8002db2:	e001      	b.n	8002db8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Start+0x1a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e095      	b.n	8002f12 <HAL_ADC_Start+0x146>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d018      	beq.n	8002e2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_ADC_Start+0x150>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a43      	ldr	r2, [pc, #268]	; (8002f20 <HAL_ADC_Start+0x154>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9a      	lsrs	r2, r3, #18
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002e20:	e002      	b.n	8002e28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f9      	bne.n	8002e22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d15d      	bne.n	8002ef8 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	d106      	bne.n	8002e8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f023 0206 	bic.w	r2, r3, #6
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
 8002e88:	e002      	b.n	8002e90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ea0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_ADC_Start+0x158>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d129      	bne.n	8002f10 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	e020      	b.n	8002f10 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <HAL_ADC_Start+0x15c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d11b      	bne.n	8002f10 <HAL_ADC_Start+0x144>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d114      	bne.n	8002f10 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	e00b      	b.n	8002f10 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	20000034 	.word	0x20000034
 8002f20:	431bde83 	.word	0x431bde83
 8002f24:	40012300 	.word	0x40012300
 8002f28:	40012000 	.word	0x40012000

08002f2c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_Stop+0x16>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e021      	b.n	8002f86 <HAL_ADC_Stop+0x5a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fac:	d113      	bne.n	8002fd6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e05c      	b.n	8003090 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002fd6:	f7ff fe87 	bl	8002ce8 <HAL_GetTick>
 8002fda:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fdc:	e01a      	b.n	8003014 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d016      	beq.n	8003014 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_ADC_PollForConversion+0x6c>
 8002fec:	f7ff fe7c 	bl	8002ce8 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d20b      	bcs.n	8003014 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e03d      	b.n	8003090 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d1dd      	bne.n	8002fde <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0212 	mvn.w	r2, #18
 800302a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d123      	bne.n	800308e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d11f      	bne.n	800308e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003066:	2b00      	cmp	r3, #0
 8003068:	d111      	bne.n	800308e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1c>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e103      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x224>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b09      	cmp	r3, #9
 80030da:	d925      	bls.n	8003128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68d9      	ldr	r1, [r3, #12]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	3b1e      	subs	r3, #30
 80030f2:	2207      	movs	r2, #7
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43da      	mvns	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	400a      	ands	r2, r1
 8003100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68d9      	ldr	r1, [r3, #12]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	4618      	mov	r0, r3
 8003114:	4603      	mov	r3, r0
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4403      	add	r3, r0
 800311a:	3b1e      	subs	r3, #30
 800311c:	409a      	lsls	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	e022      	b.n	800316e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6919      	ldr	r1, [r3, #16]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	2207      	movs	r2, #7
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43da      	mvns	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	400a      	ands	r2, r1
 800314a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6919      	ldr	r1, [r3, #16]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	4618      	mov	r0, r3
 800315e:	4603      	mov	r3, r0
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4403      	add	r3, r0
 8003164:	409a      	lsls	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d824      	bhi.n	80031c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	3b05      	subs	r3, #5
 8003188:	221f      	movs	r2, #31
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	400a      	ands	r2, r1
 8003196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4618      	mov	r0, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	3b05      	subs	r3, #5
 80031b2:	fa00 f203 	lsl.w	r2, r0, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
 80031be:	e04c      	b.n	800325a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d824      	bhi.n	8003212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	3b23      	subs	r3, #35	; 0x23
 80031da:	221f      	movs	r2, #31
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43da      	mvns	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	400a      	ands	r2, r1
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	3b23      	subs	r3, #35	; 0x23
 8003204:	fa00 f203 	lsl.w	r2, r0, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
 8003210:	e023      	b.n	800325a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	3b41      	subs	r3, #65	; 0x41
 8003224:	221f      	movs	r2, #31
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	400a      	ands	r2, r1
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	4618      	mov	r0, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b41      	subs	r3, #65	; 0x41
 800324e:	fa00 f203 	lsl.w	r2, r0, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <HAL_ADC_ConfigChannel+0x230>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d109      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x1c8>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b12      	cmp	r3, #18
 800326a:	d105      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_ADC_ConfigChannel+0x234>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_ADC_ConfigChannel+0x234>)
 8003272:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003276:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_ADC_ConfigChannel+0x230>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d123      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x21a>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b10      	cmp	r3, #16
 8003288:	d003      	beq.n	8003292 <HAL_ADC_ConfigChannel+0x1e2>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b11      	cmp	r3, #17
 8003290:	d11b      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <HAL_ADC_ConfigChannel+0x234>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <HAL_ADC_ConfigChannel+0x234>)
 8003298:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800329c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d111      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_ADC_ConfigChannel+0x238>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a10      	ldr	r2, [pc, #64]	; (80032ec <HAL_ADC_ConfigChannel+0x23c>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	0c9a      	lsrs	r2, r3, #18
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80032bc:	e002      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f9      	bne.n	80032be <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40012000 	.word	0x40012000
 80032e4:	40012300 	.word	0x40012300
 80032e8:	20000034 	.word	0x20000034
 80032ec:	431bde83 	.word	0x431bde83

080032f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80032f8:	4b7e      	ldr	r3, [pc, #504]	; (80034f4 <ADC_Init+0x204>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a7d      	ldr	r2, [pc, #500]	; (80034f4 <ADC_Init+0x204>)
 80032fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003302:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003304:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <ADC_Init+0x204>)
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4979      	ldr	r1, [pc, #484]	; (80034f4 <ADC_Init+0x204>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	4a5e      	ldr	r2, [pc, #376]	; (80034f8 <ADC_Init+0x208>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d022      	beq.n	80033ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6899      	ldr	r1, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	e00f      	b.n	80033ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0202 	bic.w	r2, r2, #2
 80033f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
 8003404:	005a      	lsls	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d027      	beq.n	8003468 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003426:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003436:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	3b01      	subs	r3, #1
 800343e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003442:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	fa92 f2a2 	rbit	r2, r2
 800344a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	fab2 f282 	clz	r2, r2
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	fa03 f102 	lsl.w	r1, r3, r2
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	e007      	b.n	8003478 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003476:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	3b01      	subs	r3, #1
 8003494:	051a      	lsls	r2, r3, #20
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6899      	ldr	r1, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ba:	025a      	lsls	r2, r3, #9
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6899      	ldr	r1, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	029a      	lsls	r2, r3, #10
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012300 	.word	0x40012300
 80034f8:	0f000001 	.word	0x0f000001

080034fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0ed      	b.n	80036ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fe feee 	bl	80022fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003530:	f7ff fbda 	bl	8002ce8 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003536:	e012      	b.n	800355e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003538:	f7ff fbd6 	bl	8002ce8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b0a      	cmp	r3, #10
 8003544:	d90b      	bls.n	800355e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2205      	movs	r2, #5
 8003556:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0c5      	b.n	80036ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0e5      	beq.n	8003538 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0202 	bic.w	r2, r2, #2
 800357a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800357c:	f7ff fbb4 	bl	8002ce8 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003582:	e012      	b.n	80035aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003584:	f7ff fbb0 	bl	8002ce8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b0a      	cmp	r3, #10
 8003590:	d90b      	bls.n	80035aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2205      	movs	r2, #5
 80035a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e09f      	b.n	80036ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e5      	bne.n	8003584 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7e1b      	ldrb	r3, [r3, #24]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d108      	bne.n	80035d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e007      	b.n	80035e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7e5b      	ldrb	r3, [r3, #25]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d108      	bne.n	80035fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e007      	b.n	800360c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7e9b      	ldrb	r3, [r3, #26]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d108      	bne.n	8003626 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0220 	orr.w	r2, r2, #32
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e007      	b.n	8003636 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0220 	bic.w	r2, r2, #32
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7edb      	ldrb	r3, [r3, #27]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d108      	bne.n	8003650 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0210 	bic.w	r2, r2, #16
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e007      	b.n	8003660 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0210 	orr.w	r2, r2, #16
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7f1b      	ldrb	r3, [r3, #28]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d108      	bne.n	800367a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e007      	b.n	800368a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0208 	bic.w	r2, r2, #8
 8003688:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	7f5b      	ldrb	r3, [r3, #29]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d108      	bne.n	80036a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0204 	orr.w	r2, r2, #4
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e007      	b.n	80036b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0204 	bic.w	r2, r2, #4
 80036b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	ea42 0103 	orr.w	r1, r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	1e5a      	subs	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d12e      	bne.n	8003764 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800371e:	f7ff fae3 	bl	8002ce8 <HAL_GetTick>
 8003722:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003724:	e012      	b.n	800374c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003726:	f7ff fadf 	bl	8002ce8 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b0a      	cmp	r3, #10
 8003732:	d90b      	bls.n	800374c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2205      	movs	r2, #5
 8003744:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e012      	b.n	8003772 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e006      	b.n	8003772 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800377a:	b480      	push	{r7}
 800377c:	b089      	sub	sp, #36	; 0x24
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003798:	7ffb      	ldrb	r3, [r7, #31]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d003      	beq.n	80037a6 <HAL_CAN_AddTxMessage+0x2c>
 800379e:	7ffb      	ldrb	r3, [r7, #31]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	f040 80ad 	bne.w	8003900 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8095 	beq.w	80038f0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	0e1b      	lsrs	r3, r3, #24
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80037d0:	2201      	movs	r2, #1
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	409a      	lsls	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10d      	bne.n	80037fe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80037ec:	68f9      	ldr	r1, [r7, #12]
 80037ee:	6809      	ldr	r1, [r1, #0]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3318      	adds	r3, #24
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	440b      	add	r3, r1
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e00f      	b.n	800381e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003808:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003812:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3318      	adds	r3, #24
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	440b      	add	r3, r1
 800381c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3318      	adds	r3, #24
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	440b      	add	r3, r1
 800382e:	3304      	adds	r3, #4
 8003830:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	7d1b      	ldrb	r3, [r3, #20]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d111      	bne.n	800385e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	3318      	adds	r3, #24
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	6811      	ldr	r1, [r2, #0]
 800384e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3318      	adds	r3, #24
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	440b      	add	r3, r1
 800385a:	3304      	adds	r3, #4
 800385c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3307      	adds	r3, #7
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	061a      	lsls	r2, r3, #24
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3306      	adds	r3, #6
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3305      	adds	r3, #5
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	4313      	orrs	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	3204      	adds	r2, #4
 800387e:	7812      	ldrb	r2, [r2, #0]
 8003880:	4610      	mov	r0, r2
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	6811      	ldr	r1, [r2, #0]
 8003886:	ea43 0200 	orr.w	r2, r3, r0
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	440b      	add	r3, r1
 8003890:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003894:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3303      	adds	r3, #3
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	061a      	lsls	r2, r3, #24
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3302      	adds	r3, #2
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3301      	adds	r3, #1
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	4313      	orrs	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	4610      	mov	r0, r2
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	6811      	ldr	r1, [r2, #0]
 80038bc:	ea43 0200 	orr.w	r2, r3, r0
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	440b      	add	r3, r1
 80038c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80038ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3318      	adds	r3, #24
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	4413      	add	r3, r2
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6811      	ldr	r1, [r2, #0]
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3318      	adds	r3, #24
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	440b      	add	r3, r1
 80038ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e00e      	b.n	800390e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e006      	b.n	800390e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800392c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800392e:	7dfb      	ldrb	r3, [r7, #23]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d003      	beq.n	800393c <HAL_CAN_GetRxMessage+0x24>
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	2b02      	cmp	r3, #2
 8003938:	f040 8103 	bne.w	8003b42 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10e      	bne.n	8003960 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d116      	bne.n	800397e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0f7      	b.n	8003b50 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d107      	bne.n	800397e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0e8      	b.n	8003b50 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	331b      	adds	r3, #27
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	4413      	add	r3, r2
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0204 	and.w	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10c      	bne.n	80039b6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	331b      	adds	r3, #27
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	4413      	add	r3, r2
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	0d5b      	lsrs	r3, r3, #21
 80039ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e00b      	b.n	80039ce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	331b      	adds	r3, #27
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	4413      	add	r3, r2
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	331b      	adds	r3, #27
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	4413      	add	r3, r2
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0202 	and.w	r2, r3, #2
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	331b      	adds	r3, #27
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2208      	movs	r2, #8
 8003a00:	611a      	str	r2, [r3, #16]
 8003a02:	e00b      	b.n	8003a1c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	331b      	adds	r3, #27
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	4413      	add	r3, r2
 8003a10:	3304      	adds	r3, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	331b      	adds	r3, #27
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0a1b      	lsrs	r3, r3, #8
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	331b      	adds	r3, #27
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	3304      	adds	r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	0a1a      	lsrs	r2, r3, #8
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0c1a      	lsrs	r2, r3, #16
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	3302      	adds	r3, #2
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0e1a      	lsrs	r2, r3, #24
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	3303      	adds	r3, #3
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	0a1a      	lsrs	r2, r3, #8
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	3305      	adds	r3, #5
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	0c1a      	lsrs	r2, r3, #16
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	3306      	adds	r3, #6
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	0e1a      	lsrs	r2, r3, #24
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3307      	adds	r3, #7
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0220 	orr.w	r2, r2, #32
 8003b2a:	60da      	str	r2, [r3, #12]
 8003b2c:	e007      	b.n	8003b3e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0220 	orr.w	r2, r2, #32
 8003b3c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e006      	b.n	8003b50 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d002      	beq.n	8003b78 <HAL_CAN_ActivateNotification+0x1e>
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d109      	bne.n	8003b8c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6959      	ldr	r1, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e006      	b.n	8003b9a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d07c      	beq.n	8003ce4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d023      	beq.n	8003c3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f983 	bl	8003f12 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c0c:	e016      	b.n	8003c3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	e00c      	b.n	8003c3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	e002      	b.n	8003c3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f986 	bl	8003f48 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d024      	beq.n	8003c90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f962 	bl	8003f24 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c60:	e016      	b.n	8003c90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
 8003c74:	e00c      	b.n	8003c90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e002      	b.n	8003c90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f965 	bl	8003f5a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d024      	beq.n	8003ce4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ca2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f941 	bl	8003f36 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cb4:	e016      	b.n	8003ce4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	e00c      	b.n	8003ce4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	e002      	b.n	8003ce4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f944 	bl	8003f6c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00c      	beq.n	8003d08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2210      	movs	r2, #16
 8003d06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d006      	beq.n	8003d2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2208      	movs	r2, #8
 8003d22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f92a 	bl	8003f7e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d009      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fe26 	bl	8001994 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d006      	beq.n	8003d8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2208      	movs	r2, #8
 8003d86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f90a 	bl	8003fa2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8f2 	bl	8003f90 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8f3 	bl	8003fb4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2208      	movs	r2, #8
 8003de8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8eb 	bl	8003fc6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d07b      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d072      	beq.n	8003eea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f043 0302 	orr.w	r3, r3, #2
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d043      	beq.n	8003eea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d03e      	beq.n	8003eea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e72:	2b60      	cmp	r3, #96	; 0x60
 8003e74:	d02b      	beq.n	8003ece <HAL_CAN_IRQHandler+0x32a>
 8003e76:	2b60      	cmp	r3, #96	; 0x60
 8003e78:	d82e      	bhi.n	8003ed8 <HAL_CAN_IRQHandler+0x334>
 8003e7a:	2b50      	cmp	r3, #80	; 0x50
 8003e7c:	d022      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x320>
 8003e7e:	2b50      	cmp	r3, #80	; 0x50
 8003e80:	d82a      	bhi.n	8003ed8 <HAL_CAN_IRQHandler+0x334>
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d019      	beq.n	8003eba <HAL_CAN_IRQHandler+0x316>
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d826      	bhi.n	8003ed8 <HAL_CAN_IRQHandler+0x334>
 8003e8a:	2b30      	cmp	r3, #48	; 0x30
 8003e8c:	d010      	beq.n	8003eb0 <HAL_CAN_IRQHandler+0x30c>
 8003e8e:	2b30      	cmp	r3, #48	; 0x30
 8003e90:	d822      	bhi.n	8003ed8 <HAL_CAN_IRQHandler+0x334>
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d002      	beq.n	8003e9c <HAL_CAN_IRQHandler+0x2f8>
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d005      	beq.n	8003ea6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e9a:	e01d      	b.n	8003ed8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f043 0308 	orr.w	r3, r3, #8
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ea4:	e019      	b.n	8003eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	f043 0310 	orr.w	r3, r3, #16
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eae:	e014      	b.n	8003eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f043 0320 	orr.w	r3, r3, #32
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eb8:	e00f      	b.n	8003eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ec2:	e00a      	b.n	8003eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ecc:	e005      	b.n	8003eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ed6:	e000      	b.n	8003eda <HAL_CAN_IRQHandler+0x336>
            break;
 8003ed8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ee8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2204      	movs	r2, #4
 8003ef0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f867 	bl	8003fd8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	3728      	adds	r7, #40	; 0x28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
	...

08003fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <__NVIC_SetPriorityGrouping+0x44>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004008:	4013      	ands	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401e:	4a04      	ldr	r2, [pc, #16]	; (8004030 <__NVIC_SetPriorityGrouping+0x44>)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	60d3      	str	r3, [r2, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004038:	4b04      	ldr	r3, [pc, #16]	; (800404c <__NVIC_GetPriorityGrouping+0x18>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	f003 0307 	and.w	r3, r3, #7
}
 8004042:	4618      	mov	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800405a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405e:	2b00      	cmp	r3, #0
 8004060:	db0b      	blt.n	800407a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	f003 021f 	and.w	r2, r3, #31
 8004068:	4906      	ldr	r1, [pc, #24]	; (8004084 <__NVIC_EnableIRQ+0x34>)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2001      	movs	r0, #1
 8004072:	fa00 f202 	lsl.w	r2, r0, r2
 8004076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100

08004088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db0a      	blt.n	80040b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	490c      	ldr	r1, [pc, #48]	; (80040d4 <__NVIC_SetPriority+0x4c>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b0:	e00a      	b.n	80040c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4908      	ldr	r1, [pc, #32]	; (80040d8 <__NVIC_SetPriority+0x50>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3b04      	subs	r3, #4
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	761a      	strb	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000e100 	.word	0xe000e100
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf28      	it	cs
 80040fa:	2304      	movcs	r3, #4
 80040fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3304      	adds	r3, #4
 8004102:	2b06      	cmp	r3, #6
 8004104:	d902      	bls.n	800410c <NVIC_EncodePriority+0x30>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b03      	subs	r3, #3
 800410a:	e000      	b.n	800410e <NVIC_EncodePriority+0x32>
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	401a      	ands	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43d9      	mvns	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	4313      	orrs	r3, r2
         );
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004150:	d301      	bcc.n	8004156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004152:	2301      	movs	r3, #1
 8004154:	e00f      	b.n	8004176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <SysTick_Config+0x40>)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3b01      	subs	r3, #1
 800415c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800415e:	210f      	movs	r1, #15
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
 8004164:	f7ff ff90 	bl	8004088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <SysTick_Config+0x40>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800416e:	4b04      	ldr	r3, [pc, #16]	; (8004180 <SysTick_Config+0x40>)
 8004170:	2207      	movs	r2, #7
 8004172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	e000e010 	.word	0xe000e010

08004184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff2d 	bl	8003fec <__NVIC_SetPriorityGrouping>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041ac:	f7ff ff42 	bl	8004034 <__NVIC_GetPriorityGrouping>
 80041b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff ff90 	bl	80040dc <NVIC_EncodePriority>
 80041bc:	4602      	mov	r2, r0
 80041be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff ff5f 	bl	8004088 <__NVIC_SetPriority>
}
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	4603      	mov	r3, r0
 80041da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff35 	bl	8004050 <__NVIC_EnableIRQ>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ffa2 	bl	8004140 <SysTick_Config>
 80041fc:	4603      	mov	r3, r0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004216:	e16f      	b.n	80044f8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	4013      	ands	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8161 	beq.w	80044f2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d005      	beq.n	8004248 <HAL_GPIO_Init+0x40>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d130      	bne.n	80042aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	2203      	movs	r2, #3
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800427e:	2201      	movs	r2, #1
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 0201 	and.w	r2, r3, #1
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d017      	beq.n	80042e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d123      	bne.n	800433a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	08da      	lsrs	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3208      	adds	r2, #8
 80042fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	220f      	movs	r2, #15
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	08da      	lsrs	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3208      	adds	r2, #8
 8004334:	6939      	ldr	r1, [r7, #16]
 8004336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	2203      	movs	r2, #3
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0203 	and.w	r2, r3, #3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80bb 	beq.w	80044f2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	4b64      	ldr	r3, [pc, #400]	; (8004514 <HAL_GPIO_Init+0x30c>)
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	4a63      	ldr	r2, [pc, #396]	; (8004514 <HAL_GPIO_Init+0x30c>)
 8004386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800438a:	6453      	str	r3, [r2, #68]	; 0x44
 800438c:	4b61      	ldr	r3, [pc, #388]	; (8004514 <HAL_GPIO_Init+0x30c>)
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004398:	4a5f      	ldr	r2, [pc, #380]	; (8004518 <HAL_GPIO_Init+0x310>)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	3302      	adds	r3, #2
 80043a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	220f      	movs	r2, #15
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a57      	ldr	r2, [pc, #348]	; (800451c <HAL_GPIO_Init+0x314>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d031      	beq.n	8004428 <HAL_GPIO_Init+0x220>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a56      	ldr	r2, [pc, #344]	; (8004520 <HAL_GPIO_Init+0x318>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d02b      	beq.n	8004424 <HAL_GPIO_Init+0x21c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a55      	ldr	r2, [pc, #340]	; (8004524 <HAL_GPIO_Init+0x31c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d025      	beq.n	8004420 <HAL_GPIO_Init+0x218>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a54      	ldr	r2, [pc, #336]	; (8004528 <HAL_GPIO_Init+0x320>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d01f      	beq.n	800441c <HAL_GPIO_Init+0x214>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a53      	ldr	r2, [pc, #332]	; (800452c <HAL_GPIO_Init+0x324>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d019      	beq.n	8004418 <HAL_GPIO_Init+0x210>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a52      	ldr	r2, [pc, #328]	; (8004530 <HAL_GPIO_Init+0x328>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_GPIO_Init+0x20c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a51      	ldr	r2, [pc, #324]	; (8004534 <HAL_GPIO_Init+0x32c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00d      	beq.n	8004410 <HAL_GPIO_Init+0x208>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a50      	ldr	r2, [pc, #320]	; (8004538 <HAL_GPIO_Init+0x330>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <HAL_GPIO_Init+0x204>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a4f      	ldr	r2, [pc, #316]	; (800453c <HAL_GPIO_Init+0x334>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d101      	bne.n	8004408 <HAL_GPIO_Init+0x200>
 8004404:	2308      	movs	r3, #8
 8004406:	e010      	b.n	800442a <HAL_GPIO_Init+0x222>
 8004408:	2309      	movs	r3, #9
 800440a:	e00e      	b.n	800442a <HAL_GPIO_Init+0x222>
 800440c:	2307      	movs	r3, #7
 800440e:	e00c      	b.n	800442a <HAL_GPIO_Init+0x222>
 8004410:	2306      	movs	r3, #6
 8004412:	e00a      	b.n	800442a <HAL_GPIO_Init+0x222>
 8004414:	2305      	movs	r3, #5
 8004416:	e008      	b.n	800442a <HAL_GPIO_Init+0x222>
 8004418:	2304      	movs	r3, #4
 800441a:	e006      	b.n	800442a <HAL_GPIO_Init+0x222>
 800441c:	2303      	movs	r3, #3
 800441e:	e004      	b.n	800442a <HAL_GPIO_Init+0x222>
 8004420:	2302      	movs	r3, #2
 8004422:	e002      	b.n	800442a <HAL_GPIO_Init+0x222>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_GPIO_Init+0x222>
 8004428:	2300      	movs	r3, #0
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	f002 0203 	and.w	r2, r2, #3
 8004430:	0092      	lsls	r2, r2, #2
 8004432:	4093      	lsls	r3, r2
 8004434:	461a      	mov	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800443c:	4936      	ldr	r1, [pc, #216]	; (8004518 <HAL_GPIO_Init+0x310>)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	3302      	adds	r3, #2
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800444a:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_GPIO_Init+0x338>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	43db      	mvns	r3, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800446e:	4a34      	ldr	r2, [pc, #208]	; (8004540 <HAL_GPIO_Init+0x338>)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_GPIO_Init+0x338>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	43db      	mvns	r3, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004498:	4a29      	ldr	r2, [pc, #164]	; (8004540 <HAL_GPIO_Init+0x338>)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800449e:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_GPIO_Init+0x338>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80044c2:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <HAL_GPIO_Init+0x338>)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <HAL_GPIO_Init+0x338>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <HAL_GPIO_Init+0x338>)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	3301      	adds	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	f47f ae88 	bne.w	8004218 <HAL_GPIO_Init+0x10>
  }
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	40023800 	.word	0x40023800
 8004518:	40013800 	.word	0x40013800
 800451c:	40020000 	.word	0x40020000
 8004520:	40020400 	.word	0x40020400
 8004524:	40020800 	.word	0x40020800
 8004528:	40020c00 	.word	0x40020c00
 800452c:	40021000 	.word	0x40021000
 8004530:	40021400 	.word	0x40021400
 8004534:	40021800 	.word	0x40021800
 8004538:	40021c00 	.word	0x40021c00
 800453c:	40022000 	.word	0x40022000
 8004540:	40013c00 	.word	0x40013c00

08004544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
 8004550:	4613      	mov	r3, r2
 8004552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004554:	787b      	ldrb	r3, [r7, #1]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004560:	e003      	b.n	800456a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	041a      	lsls	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	619a      	str	r2, [r3, #24]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	041a      	lsls	r2, r3, #16
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	43d9      	mvns	r1, r3
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	400b      	ands	r3, r1
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	619a      	str	r2, [r3, #24]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a8:	b08f      	sub	sp, #60	; 0x3c
 80045aa:	af0a      	add	r7, sp, #40	; 0x28
 80045ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e10f      	b.n	80047d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f006 f8be 	bl	800a754 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2203      	movs	r2, #3
 80045dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f003 f900 	bl	80077fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	687e      	ldr	r6, [r7, #4]
 8004604:	466d      	mov	r5, sp
 8004606:	f106 0410 	add.w	r4, r6, #16
 800460a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800460c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800460e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004612:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004616:	e885 0003 	stmia.w	r5, {r0, r1}
 800461a:	1d33      	adds	r3, r6, #4
 800461c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	f002 ffe2 	bl	80075e8 <USB_CoreInit>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e0d0      	b.n	80047d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f003 f8ed 	bl	800781c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e04a      	b.n	80046de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	333d      	adds	r3, #61	; 0x3d
 8004658:	2201      	movs	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	333c      	adds	r3, #60	; 0x3c
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	b298      	uxth	r0, r3
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3356      	adds	r3, #86	; 0x56
 8004684:	4602      	mov	r2, r0
 8004686:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3340      	adds	r3, #64	; 0x40
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	3344      	adds	r3, #68	; 0x44
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046b0:	7bfa      	ldrb	r2, [r7, #15]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3348      	adds	r3, #72	; 0x48
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	334c      	adds	r3, #76	; 0x4c
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	3301      	adds	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d3af      	bcc.n	8004648 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	73fb      	strb	r3, [r7, #15]
 80046ec:	e044      	b.n	8004778 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004746:	7bfa      	ldrb	r2, [r7, #15]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800475c:	7bfa      	ldrb	r2, [r7, #15]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	3301      	adds	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	429a      	cmp	r2, r3
 8004780:	d3b5      	bcc.n	80046ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	687e      	ldr	r6, [r7, #4]
 800478a:	466d      	mov	r5, sp
 800478c:	f106 0410 	add.w	r4, r6, #16
 8004790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004798:	e894 0003 	ldmia.w	r4, {r0, r1}
 800479c:	e885 0003 	stmia.w	r5, {r0, r1}
 80047a0:	1d33      	adds	r3, r6, #4
 80047a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	f003 f885 	bl	80078b4 <USB_DevInit>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e00d      	b.n	80047d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f004 f8b7 	bl	8008944 <USB_DevDisconnect>

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_PCD_Start+0x16>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e012      	b.n	800481c <HAL_PCD_Start+0x3c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f002 ffea 	bl	80077dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f004 f879 	bl	8008904 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b08d      	sub	sp, #52	; 0x34
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f004 f930 	bl	8008aa0 <USB_GetMode>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 847c 	bne.w	8005140 <HAL_PCD_IRQHandler+0x91c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f004 f899 	bl	8008984 <USB_ReadInterrupts>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8472 	beq.w	800513e <HAL_PCD_IRQHandler+0x91a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f004 f886 	bl	8008984 <USB_ReadInterrupts>
 8004878:	4603      	mov	r3, r0
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d107      	bne.n	8004892 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f002 0202 	and.w	r2, r2, #2
 8004890:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f004 f874 	bl	8008984 <USB_ReadInterrupts>
 800489c:	4603      	mov	r3, r0
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d161      	bne.n	800496a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0210 	bic.w	r2, r2, #16
 80048b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f003 020f 	and.w	r2, r3, #15
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	3304      	adds	r3, #4
 80048d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	0c5b      	lsrs	r3, r3, #17
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d124      	bne.n	800492c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d035      	beq.n	800495a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	6a38      	ldr	r0, [r7, #32]
 8004902:	f003 feb1 	bl	8008668 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004912:	441a      	add	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004924:	441a      	add	r2, r3
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	615a      	str	r2, [r3, #20]
 800492a:	e016      	b.n	800495a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	0c5b      	lsrs	r3, r3, #17
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	2b06      	cmp	r3, #6
 8004936:	d110      	bne.n	800495a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800493e:	2208      	movs	r2, #8
 8004940:	4619      	mov	r1, r3
 8004942:	6a38      	ldr	r0, [r7, #32]
 8004944:	f003 fe90 	bl	8008668 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004954:	441a      	add	r2, r3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0210 	orr.w	r2, r2, #16
 8004968:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f004 f808 	bl	8008984 <USB_ReadInterrupts>
 8004974:	4603      	mov	r3, r0
 8004976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800497a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800497e:	f040 80a7 	bne.w	8004ad0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f004 f80c 	bl	80089a8 <USB_ReadDevAllOutEpInterrupt>
 8004990:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004992:	e099      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 808e 	beq.w	8004abc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f004 f82e 	bl	8008a0c <USB_ReadDevOutEPInterrupt>
 80049b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00c      	beq.n	80049d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	461a      	mov	r2, r3
 80049ca:	2301      	movs	r3, #1
 80049cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80049ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fe95 	bl	8005700 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ec:	461a      	mov	r2, r3
 80049ee:	2308      	movs	r3, #8
 80049f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 ff6b 	bl	80058d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	461a      	mov	r2, r3
 8004a12:	2310      	movs	r3, #16
 8004a14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d030      	beq.n	8004a82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d109      	bne.n	8004a40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	78db      	ldrb	r3, [r3, #3]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d108      	bne.n	8004a70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2200      	movs	r2, #0
 8004a62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f005 ff86 	bl	800a97c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2302      	movs	r3, #2
 8004a80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2320      	movs	r3, #32
 8004a9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	3301      	adds	r3, #1
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f47f af62 	bne.w	8004994 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f003 ff55 	bl	8008984 <USB_ReadInterrupts>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ae4:	f040 80db 	bne.w	8004c9e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f003 ff74 	bl	80089da <USB_ReadDevAllInEpInterrupt>
 8004af2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004af8:	e0cd      	b.n	8004c96 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80c2 	beq.w	8004c8a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 ff98 	bl	8008a46 <USB_ReadDevInEPInterrupt>
 8004b16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d057      	beq.n	8004bd2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2201      	movs	r2, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69f9      	ldr	r1, [r7, #28]
 8004b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b42:	4013      	ands	r3, r2
 8004b44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b52:	461a      	mov	r2, r3
 8004b54:	2301      	movs	r3, #1
 8004b56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d132      	bne.n	8004bc6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3348      	adds	r3, #72	; 0x48
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4403      	add	r3, r0
 8004b80:	3344      	adds	r3, #68	; 0x44
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4419      	add	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4403      	add	r3, r0
 8004b94:	3348      	adds	r3, #72	; 0x48
 8004b96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d113      	bne.n	8004bc6 <HAL_PCD_IRQHandler+0x3a2>
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	334c      	adds	r3, #76	; 0x4c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d108      	bne.n	8004bc6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	f003 ff9d 	bl	8008b00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f005 fe50 	bl	800a872 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	461a      	mov	r2, r3
 8004bea:	2308      	movs	r3, #8
 8004bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	461a      	mov	r2, r3
 8004c06:	2310      	movs	r3, #16
 8004c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	2340      	movs	r3, #64	; 0x40
 8004c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d023      	beq.n	8004c78 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c32:	6a38      	ldr	r0, [r7, #32]
 8004c34:	f002 ff98 	bl	8007b68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	3338      	adds	r3, #56	; 0x38
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	4413      	add	r3, r2
 8004c48:	3304      	adds	r3, #4
 8004c4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	78db      	ldrb	r3, [r3, #3]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d108      	bne.n	8004c66 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2200      	movs	r2, #0
 8004c58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f005 fe9d 	bl	800a9a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	461a      	mov	r2, r3
 8004c74:	2302      	movs	r3, #2
 8004c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fcae 	bl	80055e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f47f af2e 	bne.w	8004afa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f003 fe6e 	bl	8008984 <USB_ReadInterrupts>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb2:	d114      	bne.n	8004cde <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f005 fe49 	bl	800a960 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f003 fe4e 	bl	8008984 <USB_ReadInterrupts>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf2:	d112      	bne.n	8004d1a <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d102      	bne.n	8004d0a <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f005 fe05 	bl	800a914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004d18:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f003 fe30 	bl	8008984 <USB_ReadInterrupts>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2e:	f040 80b7 	bne.w	8004ea0 <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f002 ff0b 	bl	8007b68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d56:	e046      	b.n	8004de6 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	461a      	mov	r2, r3
 8004d66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d6a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	3301      	adds	r3, #1
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d3b3      	bcc.n	8004d58 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004e02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d016      	beq.n	8004e3a <HAL_PCD_IRQHandler+0x616>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1c:	f043 030b 	orr.w	r3, r3, #11
 8004e20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e32:	f043 030b 	orr.w	r3, r3, #11
 8004e36:	6453      	str	r3, [r2, #68]	; 0x44
 8004e38:	e015      	b.n	8004e66 <HAL_PCD_IRQHandler+0x642>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e60:	f043 030b 	orr.w	r3, r3, #11
 8004e64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f003 fe38 	bl	8008b00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 fd6d 	bl	8008984 <USB_ReadInterrupts>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb4:	d124      	bne.n	8004f00 <HAL_PCD_IRQHandler+0x6dc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f003 fdfd 	bl	8008aba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f002 fecb 	bl	8007c60 <USB_GetDevSpeed>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681c      	ldr	r4, [r3, #0]
 8004ed6:	f001 f99d 	bl	8006214 <HAL_RCC_GetHCLKFreq>
 8004eda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f002 fbd7 	bl	8007698 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f005 fce9 	bl	800a8c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f003 fd3d 	bl	8008984 <USB_ReadInterrupts>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d10a      	bne.n	8004f2a <HAL_PCD_IRQHandler+0x706>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f005 fcc6 	bl	800a8a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f002 0208 	and.w	r2, r2, #8
 8004f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f003 fd28 	bl	8008984 <USB_ReadInterrupts>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	2b80      	cmp	r3, #128	; 0x80
 8004f3c:	d122      	bne.n	8004f84 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4e:	e014      	b.n	8004f7a <HAL_PCD_IRQHandler+0x756>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <HAL_PCD_IRQHandler+0x750>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fb08 	bl	8005584 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	3301      	adds	r3, #1
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d3e5      	bcc.n	8004f50 <HAL_PCD_IRQHandler+0x72c>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f003 fcfb 	bl	8008984 <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f98:	d13b      	bne.n	8005012 <HAL_PCD_IRQHandler+0x7ee>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9e:	e02b      	b.n	8004ff8 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3340      	adds	r3, #64	; 0x40
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d115      	bne.n	8004ff2 <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004fc6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	da12      	bge.n	8004ff2 <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	333f      	adds	r3, #63	; 0x3f
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fac9 	bl	8005584 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d3ce      	bcc.n	8004fa0 <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f003 fcb4 	bl	8008984 <USB_ReadInterrupts>
 800501c:	4603      	mov	r3, r0
 800501e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005026:	d155      	bne.n	80050d4 <HAL_PCD_IRQHandler+0x8b0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005028:	2301      	movs	r3, #1
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
 800502c:	e045      	b.n	80050ba <HAL_PCD_IRQHandler+0x896>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d12e      	bne.n	80050b4 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005056:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005058:	2b00      	cmp	r3, #0
 800505a:	da2b      	bge.n	80050b4 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005068:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800506c:	429a      	cmp	r2, r3
 800506e:	d121      	bne.n	80050b4 <HAL_PCD_IRQHandler+0x890>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <HAL_PCD_IRQHandler+0x890>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050b0:	6053      	str	r3, [r2, #4]
            break;
 80050b2:	e007      	b.n	80050c4 <HAL_PCD_IRQHandler+0x8a0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	3301      	adds	r3, #1
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d3b4      	bcc.n	800502e <HAL_PCD_IRQHandler+0x80a>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80050d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f003 fc53 	bl	8008984 <USB_ReadInterrupts>
 80050de:	4603      	mov	r3, r0
 80050e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e8:	d10a      	bne.n	8005100 <HAL_PCD_IRQHandler+0x8dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f005 fc6a 	bl	800a9c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f003 fc3d 	bl	8008984 <USB_ReadInterrupts>
 800510a:	4603      	mov	r3, r0
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b04      	cmp	r3, #4
 8005112:	d115      	bne.n	8005140 <HAL_PCD_IRQHandler+0x91c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_PCD_IRQHandler+0x908>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f005 fc5a 	bl	800a9e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
 800513c:	e000      	b.n	8005140 <HAL_PCD_IRQHandler+0x91c>
      return;
 800513e:	bf00      	nop
    }
  }
}
 8005140:	3734      	adds	r7, #52	; 0x34
 8005142:	46bd      	mov	sp, r7
 8005144:	bd90      	pop	{r4, r7, pc}

08005146 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_PCD_SetAddress+0x1a>
 800515c:	2302      	movs	r3, #2
 800515e:	e013      	b.n	8005188 <HAL_PCD_SetAddress+0x42>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f003 fb9e 	bl	80088ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	4608      	mov	r0, r1
 800519a:	4611      	mov	r1, r2
 800519c:	461a      	mov	r2, r3
 800519e:	4603      	mov	r3, r0
 80051a0:	70fb      	strb	r3, [r7, #3]
 80051a2:	460b      	mov	r3, r1
 80051a4:	803b      	strh	r3, [r7, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	da0f      	bge.n	80051d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	f003 020f 	and.w	r2, r3, #15
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	3338      	adds	r3, #56	; 0x38
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4413      	add	r3, r2
 80051ca:	3304      	adds	r3, #4
 80051cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	705a      	strb	r2, [r3, #1]
 80051d4:	e00f      	b.n	80051f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	f003 020f 	and.w	r2, r3, #15
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	3304      	adds	r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005202:	883a      	ldrh	r2, [r7, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	78ba      	ldrb	r2, [r7, #2]
 800520c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005220:	78bb      	ldrb	r3, [r7, #2]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d102      	bne.n	800522c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_PCD_EP_Open+0xaa>
 8005236:	2302      	movs	r3, #2
 8005238:	e00e      	b.n	8005258 <HAL_PCD_EP_Open+0xc8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	4618      	mov	r0, r3
 800524a:	f002 fd2d 	bl	8007ca8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005256:	7afb      	ldrb	r3, [r7, #11]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800526c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005270:	2b00      	cmp	r3, #0
 8005272:	da0f      	bge.n	8005294 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	3338      	adds	r3, #56	; 0x38
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4413      	add	r3, r2
 8005288:	3304      	adds	r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	705a      	strb	r2, [r3, #1]
 8005292:	e00f      	b.n	80052b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	f003 020f 	and.w	r2, r3, #15
 800529a:	4613      	mov	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	3304      	adds	r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_PCD_EP_Close+0x6e>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e00e      	b.n	80052ec <HAL_PCD_EP_Close+0x8c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	4618      	mov	r0, r3
 80052de:	f002 fd69 	bl	8007db4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	460b      	mov	r3, r1
 8005302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005304:	7afb      	ldrb	r3, [r7, #11]
 8005306:	f003 020f 	and.w	r2, r3, #15
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	3304      	adds	r3, #4
 800531c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	b2da      	uxtb	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d102      	bne.n	8005350 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	f002 fe05 	bl	8007f6c <USB_EPStartXfer>

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	f003 020f 	and.w	r2, r3, #15
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800538e:	681b      	ldr	r3, [r3, #0]
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	460b      	mov	r3, r1
 80053a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053aa:	7afb      	ldrb	r3, [r7, #11]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	3338      	adds	r3, #56	; 0x38
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	3304      	adds	r3, #4
 80053c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2201      	movs	r2, #1
 80053d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d102      	bne.n	80053f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6979      	ldr	r1, [r7, #20]
 8005402:	f002 fdb3 	bl	8007f6c <USB_EPStartXfer>

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	f003 020f 	and.w	r2, r3, #15
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	429a      	cmp	r2, r3
 8005428:	d901      	bls.n	800542e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e050      	b.n	80054d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800542e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005432:	2b00      	cmp	r3, #0
 8005434:	da0f      	bge.n	8005456 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	f003 020f 	and.w	r2, r3, #15
 800543c:	4613      	mov	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	3338      	adds	r3, #56	; 0x38
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	3304      	adds	r3, #4
 800544c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	705a      	strb	r2, [r3, #1]
 8005454:	e00d      	b.n	8005472 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	3304      	adds	r3, #4
 800546a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	b2da      	uxtb	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_PCD_EP_SetStall+0x82>
 800548e:	2302      	movs	r3, #2
 8005490:	e01e      	b.n	80054d0 <HAL_PCD_EP_SetStall+0xc0>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f003 f938 	bl	8008716 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	b2d9      	uxtb	r1, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054c0:	461a      	mov	r2, r3
 80054c2:	f003 fb1d 	bl	8008b00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 020f 	and.w	r2, r3, #15
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d901      	bls.n	80054f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e042      	b.n	800557c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	da0f      	bge.n	800551e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	f003 020f 	and.w	r2, r3, #15
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	3338      	adds	r3, #56	; 0x38
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	3304      	adds	r3, #4
 8005514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	705a      	strb	r2, [r3, #1]
 800551c:	e00f      	b.n	800553e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 020f 	and.w	r2, r3, #15
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4413      	add	r3, r2
 8005534:	3304      	adds	r3, #4
 8005536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	b2da      	uxtb	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_PCD_EP_ClrStall+0x86>
 800555a:	2302      	movs	r3, #2
 800555c:	e00e      	b.n	800557c <HAL_PCD_EP_ClrStall+0xa4>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	4618      	mov	r0, r3
 800556e:	f003 f93f 	bl	80087f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da0c      	bge.n	80055b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 020f 	and.w	r2, r3, #15
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	3338      	adds	r3, #56	; 0x38
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	3304      	adds	r3, #4
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e00c      	b.n	80055cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	f003 020f 	and.w	r2, r3, #15
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	3304      	adds	r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68f9      	ldr	r1, [r7, #12]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f002 ff62 	bl	800849c <USB_EPStopXfer>
 80055d8:	4603      	mov	r3, r0
 80055da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055dc:	7afb      	ldrb	r3, [r7, #11]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b08a      	sub	sp, #40	; 0x28
 80055ea:	af02      	add	r7, sp, #8
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	3338      	adds	r3, #56	; 0x38
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4413      	add	r3, r2
 800560a:	3304      	adds	r3, #4
 800560c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	d901      	bls.n	800561e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e06c      	b.n	80056f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	429a      	cmp	r2, r3
 8005632:	d902      	bls.n	800563a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3303      	adds	r3, #3
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005642:	e02b      	b.n	800569c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	429a      	cmp	r2, r3
 8005658:	d902      	bls.n	8005660 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3303      	adds	r3, #3
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68d9      	ldr	r1, [r3, #12]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005678:	b2db      	uxtb	r3, r3
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	4603      	mov	r3, r0
 800567e:	6978      	ldr	r0, [r7, #20]
 8005680:	f002 ffb5 	bl	80085ee <USB_WritePacket>

    ep->xfer_buff  += len;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	441a      	add	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	441a      	add	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d809      	bhi.n	80056c6 <PCD_WriteEmptyTxFifo+0xe0>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d203      	bcs.n	80056c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1be      	bne.n	8005644 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d811      	bhi.n	80056f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	2201      	movs	r2, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	6939      	ldr	r1, [r7, #16]
 80056ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f2:	4013      	ands	r3, r2
 80056f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	333c      	adds	r3, #60	; 0x3c
 8005718:	3304      	adds	r3, #4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d17b      	bne.n	800582e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4a61      	ldr	r2, [pc, #388]	; (80058c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	f240 80b9 	bls.w	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80b3 	beq.w	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005768:	6093      	str	r3, [r2, #8]
 800576a:	e0a7      	b.n	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	461a      	mov	r2, r3
 8005784:	2320      	movs	r3, #32
 8005786:	6093      	str	r3, [r2, #8]
 8005788:	e098      	b.n	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 8093 	bne.w	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4a4b      	ldr	r2, [pc, #300]	; (80058c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d90f      	bls.n	80057be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	6093      	str	r3, [r2, #8]
 80057bc:	e07e      	b.n	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	0159      	lsls	r1, r3, #5
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	440b      	add	r3, r1
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d114      	bne.n	8005820 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005808:	461a      	mov	r2, r3
 800580a:	2101      	movs	r1, #1
 800580c:	f003 f978 	bl	8008b00 <USB_EP0_OutStart>
 8005810:	e006      	b.n	8005820 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	441a      	add	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f005 f808 	bl	800a83c <HAL_PCD_DataOutStageCallback>
 800582c:	e046      	b.n	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d124      	bne.n	8005880 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005852:	6093      	str	r3, [r2, #8]
 8005854:	e032      	b.n	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	461a      	mov	r2, r3
 800586e:	2320      	movs	r3, #32
 8005870:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f004 ffdf 	bl	800a83c <HAL_PCD_DataOutStageCallback>
 800587e:	e01d      	b.n	80058bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d114      	bne.n	80058b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d108      	bne.n	80058b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058a8:	461a      	mov	r2, r3
 80058aa:	2100      	movs	r1, #0
 80058ac:	f003 f928 	bl	8008b00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f004 ffc0 	bl	800a83c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	4f54300a 	.word	0x4f54300a
 80058cc:	4f54310a 	.word	0x4f54310a

080058d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	333c      	adds	r3, #60	; 0x3c
 80058e8:	3304      	adds	r3, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a15      	ldr	r2, [pc, #84]	; (8005958 <PCD_EP_OutSetupPacket_int+0x88>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d90e      	bls.n	8005924 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005922:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f004 ff77 	bl	800a818 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <PCD_EP_OutSetupPacket_int+0x88>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d90c      	bls.n	800594c <PCD_EP_OutSetupPacket_int+0x7c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d108      	bne.n	800594c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005944:	461a      	mov	r2, r3
 8005946:	2101      	movs	r1, #1
 8005948:	f003 f8da 	bl	8008b00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	4f54300a 	.word	0x4f54300a

0800595c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
 8005968:	4613      	mov	r3, r2
 800596a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d107      	bne.n	800598a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800597a:	883b      	ldrh	r3, [r7, #0]
 800597c:	0419      	lsls	r1, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	430a      	orrs	r2, r1
 8005986:	629a      	str	r2, [r3, #40]	; 0x28
 8005988:	e028      	b.n	80059dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	0c1b      	lsrs	r3, r3, #16
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4413      	add	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]
 800599c:	e00d      	b.n	80059ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	3340      	adds	r3, #64	; 0x40
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	3301      	adds	r3, #1
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	7bfa      	ldrb	r2, [r7, #15]
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	3b01      	subs	r3, #1
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3ec      	bcc.n	800599e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059c4:	883b      	ldrh	r3, [r7, #0]
 80059c6:	0418      	lsls	r0, r3, #16
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	4302      	orrs	r2, r0
 80059d4:	3340      	adds	r3, #64	; 0x40
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	887a      	ldrh	r2, [r7, #2]
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e23b      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d050      	beq.n	8005ac8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a26:	4b9e      	ldr	r3, [pc, #632]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d00c      	beq.n	8005a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a32:	4b9b      	ldr	r3, [pc, #620]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d112      	bne.n	8005a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a3e:	4b98      	ldr	r3, [pc, #608]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a4a:	d10b      	bne.n	8005a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4c:	4b94      	ldr	r3, [pc, #592]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d036      	beq.n	8005ac6 <HAL_RCC_OscConfig+0xbe>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d132      	bne.n	8005ac6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e216      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	4b8e      	ldr	r3, [pc, #568]	; (8005ca4 <HAL_RCC_OscConfig+0x29c>)
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d013      	beq.n	8005a9e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a76:	f7fd f937 	bl	8002ce8 <HAL_GetTick>
 8005a7a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a7e:	f7fd f933 	bl	8002ce8 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e200      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a90:	4b83      	ldr	r3, [pc, #524]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCC_OscConfig+0x76>
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9e:	f7fd f923 	bl	8002ce8 <HAL_GetTick>
 8005aa2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa6:	f7fd f91f 	bl	8002ce8 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b64      	cmp	r3, #100	; 0x64
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e1ec      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab8:	4b79      	ldr	r3, [pc, #484]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x9e>
 8005ac4:	e000      	b.n	8005ac8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d077      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ad4:	4b72      	ldr	r3, [pc, #456]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 030c 	and.w	r3, r3, #12
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ae0:	4b6f      	ldr	r3, [pc, #444]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d126      	bne.n	8005b3a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aec:	4b6c      	ldr	r3, [pc, #432]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d120      	bne.n	8005b3a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005af8:	4b69      	ldr	r3, [pc, #420]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_RCC_OscConfig+0x108>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e1c0      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b10:	4b63      	ldr	r3, [pc, #396]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	21f8      	movs	r1, #248	; 0xf8
 8005b1e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b20:	69b9      	ldr	r1, [r7, #24]
 8005b22:	fa91 f1a1 	rbit	r1, r1
 8005b26:	6179      	str	r1, [r7, #20]
  return result;
 8005b28:	6979      	ldr	r1, [r7, #20]
 8005b2a:	fab1 f181 	clz	r1, r1
 8005b2e:	b2c9      	uxtb	r1, r1
 8005b30:	408b      	lsls	r3, r1
 8005b32:	495b      	ldr	r1, [pc, #364]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b38:	e044      	b.n	8005bc4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d02a      	beq.n	8005b98 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b42:	4b59      	ldr	r3, [pc, #356]	; (8005ca8 <HAL_RCC_OscConfig+0x2a0>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fd f8ce 	bl	8002ce8 <HAL_GetTick>
 8005b4c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b50:	f7fd f8ca 	bl	8002ce8 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e197      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b62:	4b4f      	ldr	r3, [pc, #316]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f0      	beq.n	8005b50 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	21f8      	movs	r1, #248	; 0xf8
 8005b7c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7e:	6939      	ldr	r1, [r7, #16]
 8005b80:	fa91 f1a1 	rbit	r1, r1
 8005b84:	60f9      	str	r1, [r7, #12]
  return result;
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	fab1 f181 	clz	r1, r1
 8005b8c:	b2c9      	uxtb	r1, r1
 8005b8e:	408b      	lsls	r3, r1
 8005b90:	4943      	ldr	r1, [pc, #268]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	600b      	str	r3, [r1, #0]
 8005b96:	e015      	b.n	8005bc4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <HAL_RCC_OscConfig+0x2a0>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9e:	f7fd f8a3 	bl	8002ce8 <HAL_GetTick>
 8005ba2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba6:	f7fd f89f 	bl	8002ce8 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e16c      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb8:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d030      	beq.n	8005c32 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d016      	beq.n	8005c06 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd8:	4b34      	ldr	r3, [pc, #208]	; (8005cac <HAL_RCC_OscConfig+0x2a4>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bde:	f7fd f883 	bl	8002ce8 <HAL_GetTick>
 8005be2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005be6:	f7fd f87f 	bl	8002ce8 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e14c      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bf8:	4b29      	ldr	r3, [pc, #164]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x1de>
 8005c04:	e015      	b.n	8005c32 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c06:	4b29      	ldr	r3, [pc, #164]	; (8005cac <HAL_RCC_OscConfig+0x2a4>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c0c:	f7fd f86c 	bl	8002ce8 <HAL_GetTick>
 8005c10:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c14:	f7fd f868 	bl	8002ce8 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e135      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8087 	beq.w	8005d4e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c46:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d110      	bne.n	8005c74 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	60bb      	str	r3, [r7, #8]
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	4a11      	ldr	r2, [pc, #68]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c60:	6413      	str	r3, [r2, #64]	; 0x40
 8005c62:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <HAL_RCC_OscConfig+0x298>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <HAL_RCC_OscConfig+0x2a8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a0d      	ldr	r2, [pc, #52]	; (8005cb0 <HAL_RCC_OscConfig+0x2a8>)
 8005c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <HAL_RCC_OscConfig+0x2a8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d122      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c8c:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <HAL_RCC_OscConfig+0x2a8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a07      	ldr	r2, [pc, #28]	; (8005cb0 <HAL_RCC_OscConfig+0x2a8>)
 8005c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c98:	f7fd f826 	bl	8002ce8 <HAL_GetTick>
 8005c9c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9e:	e012      	b.n	8005cc6 <HAL_RCC_OscConfig+0x2be>
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	40023802 	.word	0x40023802
 8005ca8:	42470000 	.word	0x42470000
 8005cac:	42470e80 	.word	0x42470e80
 8005cb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb4:	f7fd f818 	bl	8002ce8 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e0e5      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc6:	4b75      	ldr	r3, [pc, #468]	; (8005e9c <HAL_RCC_OscConfig+0x494>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	4b72      	ldr	r3, [pc, #456]	; (8005ea0 <HAL_RCC_OscConfig+0x498>)
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d015      	beq.n	8005d10 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce4:	f7fd f800 	bl	8002ce8 <HAL_GetTick>
 8005ce8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cea:	e00a      	b.n	8005d02 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cec:	f7fc fffc 	bl	8002ce8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e0c7      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d02:	4b68      	ldr	r3, [pc, #416]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0ee      	beq.n	8005cec <HAL_RCC_OscConfig+0x2e4>
 8005d0e:	e014      	b.n	8005d3a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d10:	f7fc ffea 	bl	8002ce8 <HAL_GetTick>
 8005d14:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d16:	e00a      	b.n	8005d2e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d18:	f7fc ffe6 	bl	8002ce8 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e0b1      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2e:	4b5d      	ldr	r3, [pc, #372]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1ee      	bne.n	8005d18 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d105      	bne.n	8005d4e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d42:	4b58      	ldr	r3, [pc, #352]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 809c 	beq.w	8005e90 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d58:	4b52      	ldr	r3, [pc, #328]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 030c 	and.w	r3, r3, #12
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d061      	beq.n	8005e28 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d146      	bne.n	8005dfa <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d6c:	4b4e      	ldr	r3, [pc, #312]	; (8005ea8 <HAL_RCC_OscConfig+0x4a0>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d72:	f7fc ffb9 	bl	8002ce8 <HAL_GetTick>
 8005d76:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d7a:	f7fc ffb5 	bl	8002ce8 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b64      	cmp	r3, #100	; 0x64
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e082      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d8c:	4b45      	ldr	r3, [pc, #276]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f0      	bne.n	8005d7a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d98:	4b42      	ldr	r3, [pc, #264]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4b43      	ldr	r3, [pc, #268]	; (8005eac <HAL_RCC_OscConfig+0x4a4>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	69d1      	ldr	r1, [r2, #28]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6a12      	ldr	r2, [r2, #32]
 8005da8:	4311      	orrs	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dae:	0192      	lsls	r2, r2, #6
 8005db0:	4311      	orrs	r1, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005db6:	0612      	lsls	r2, r2, #24
 8005db8:	4311      	orrs	r1, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005dbe:	0852      	lsrs	r2, r2, #1
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	0412      	lsls	r2, r2, #16
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	4937      	ldr	r1, [pc, #220]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dcc:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <HAL_RCC_OscConfig+0x4a0>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd2:	f7fc ff89 	bl	8002ce8 <HAL_GetTick>
 8005dd6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dda:	f7fc ff85 	bl	8002ce8 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b64      	cmp	r3, #100	; 0x64
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e052      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x3d2>
 8005df8:	e04a      	b.n	8005e90 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <HAL_RCC_OscConfig+0x4a0>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fc ff72 	bl	8002ce8 <HAL_GetTick>
 8005e04:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fc ff6e 	bl	8002ce8 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	; 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e03b      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x400>
 8005e26:	e033      	b.n	8005e90 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e02e      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x49c>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d121      	bne.n	8005e8c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d11a      	bne.n	8005e8c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e62:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d111      	bne.n	8005e8c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	3b01      	subs	r3, #1
 8005e76:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d107      	bne.n	8005e8c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3728      	adds	r7, #40	; 0x28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40007000 	.word	0x40007000
 8005ea0:	40023870 	.word	0x40023870
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	42470060 	.word	0x42470060
 8005eac:	f0bc8000 	.word	0xf0bc8000

08005eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0d2      	b.n	800606a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec4:	4b6b      	ldr	r3, [pc, #428]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d90c      	bls.n	8005eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed2:	4b68      	ldr	r3, [pc, #416]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eda:	4b66      	ldr	r3, [pc, #408]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d001      	beq.n	8005eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0be      	b.n	800606a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d020      	beq.n	8005f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f04:	4b5c      	ldr	r3, [pc, #368]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	4a5b      	ldr	r2, [pc, #364]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005f1c:	4b56      	ldr	r3, [pc, #344]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4a55      	ldr	r2, [pc, #340]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f28:	4b53      	ldr	r3, [pc, #332]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4950      	ldr	r1, [pc, #320]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d040      	beq.n	8005fc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d107      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f4e:	4b4a      	ldr	r3, [pc, #296]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d115      	bne.n	8005f86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e085      	b.n	800606a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d107      	bne.n	8005f76 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f66:	4b44      	ldr	r3, [pc, #272]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e079      	b.n	800606a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f76:	4b40      	ldr	r3, [pc, #256]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e071      	b.n	800606a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f86:	4b3c      	ldr	r3, [pc, #240]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f023 0203 	bic.w	r2, r3, #3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4939      	ldr	r1, [pc, #228]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f98:	f7fc fea6 	bl	8002ce8 <HAL_GetTick>
 8005f9c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa0:	f7fc fea2 	bl	8002ce8 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e059      	b.n	800606a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb6:	4b30      	ldr	r3, [pc, #192]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 020c 	and.w	r2, r3, #12
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d1eb      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc8:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d20c      	bcs.n	8005ff0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd6:	4b27      	ldr	r3, [pc, #156]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d001      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e03c      	b.n	800606a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ffc:	4b1e      	ldr	r3, [pc, #120]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	491b      	ldr	r1, [pc, #108]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 800600a:	4313      	orrs	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800601a:	4b17      	ldr	r3, [pc, #92]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4913      	ldr	r1, [pc, #76]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 800602a:	4313      	orrs	r3, r2
 800602c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800602e:	f000 f82b 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 8006032:	4601      	mov	r1, r0
 8006034:	4b10      	ldr	r3, [pc, #64]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800603c:	22f0      	movs	r2, #240	; 0xf0
 800603e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	fa92 f2a2 	rbit	r2, r2
 8006046:	60fa      	str	r2, [r7, #12]
  return result;
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	fab2 f282 	clz	r2, r2
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	40d3      	lsrs	r3, r2
 8006052:	4a0a      	ldr	r2, [pc, #40]	; (800607c <HAL_RCC_ClockConfig+0x1cc>)
 8006054:	5cd3      	ldrb	r3, [r2, r3]
 8006056:	fa21 f303 	lsr.w	r3, r1, r3
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <HAL_RCC_ClockConfig+0x1d0>)
 800605c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_RCC_ClockConfig+0x1d4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fc fdfe 	bl	8002c64 <HAL_InitTick>

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023c00 	.word	0x40023c00
 8006078:	40023800 	.word	0x40023800
 800607c:	0800df0c 	.word	0x0800df0c
 8006080:	20000034 	.word	0x20000034
 8006084:	20000038 	.word	0x20000038

08006088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800608c:	b090      	sub	sp, #64	; 0x40
 800608e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
 8006094:	2300      	movs	r3, #0
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006098:	2300      	movs	r3, #0
 800609a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060a0:	4b59      	ldr	r3, [pc, #356]	; (8006208 <HAL_RCC_GetSysClockFreq+0x180>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 030c 	and.w	r3, r3, #12
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d00d      	beq.n	80060c8 <HAL_RCC_GetSysClockFreq+0x40>
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	f200 80a2 	bhi.w	80061f6 <HAL_RCC_GetSysClockFreq+0x16e>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_RCC_GetSysClockFreq+0x34>
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d003      	beq.n	80060c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80060ba:	e09c      	b.n	80061f6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060bc:	4b53      	ldr	r3, [pc, #332]	; (800620c <HAL_RCC_GetSysClockFreq+0x184>)
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80060c0:	e09c      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060c2:	4b53      	ldr	r3, [pc, #332]	; (8006210 <HAL_RCC_GetSysClockFreq+0x188>)
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060c6:	e099      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060c8:	4b4f      	ldr	r3, [pc, #316]	; (8006208 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060d2:	4b4d      	ldr	r3, [pc, #308]	; (8006208 <HAL_RCC_GetSysClockFreq+0x180>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d027      	beq.n	800612e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060de:	4b4a      	ldr	r3, [pc, #296]	; (8006208 <HAL_RCC_GetSysClockFreq+0x180>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	099b      	lsrs	r3, r3, #6
 80060e4:	2200      	movs	r2, #0
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	627a      	str	r2, [r7, #36]	; 0x24
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060f0:	2100      	movs	r1, #0
 80060f2:	4b47      	ldr	r3, [pc, #284]	; (8006210 <HAL_RCC_GetSysClockFreq+0x188>)
 80060f4:	fb03 f201 	mul.w	r2, r3, r1
 80060f8:	2300      	movs	r3, #0
 80060fa:	fb00 f303 	mul.w	r3, r0, r3
 80060fe:	4413      	add	r3, r2
 8006100:	4a43      	ldr	r2, [pc, #268]	; (8006210 <HAL_RCC_GetSysClockFreq+0x188>)
 8006102:	fba0 2102 	umull	r2, r1, r0, r2
 8006106:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006108:	62ba      	str	r2, [r7, #40]	; 0x28
 800610a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800610c:	4413      	add	r3, r2
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	2200      	movs	r2, #0
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	61fa      	str	r2, [r7, #28]
 8006118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800611c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006120:	f7fa fd0e 	bl	8000b40 <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4613      	mov	r3, r2
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612c:	e055      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800612e:	4b36      	ldr	r3, [pc, #216]	; (8006208 <HAL_RCC_GetSysClockFreq+0x180>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	099b      	lsrs	r3, r3, #6
 8006134:	2200      	movs	r2, #0
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	617a      	str	r2, [r7, #20]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006140:	f04f 0b00 	mov.w	fp, #0
 8006144:	4652      	mov	r2, sl
 8006146:	465b      	mov	r3, fp
 8006148:	f04f 0000 	mov.w	r0, #0
 800614c:	f04f 0100 	mov.w	r1, #0
 8006150:	0159      	lsls	r1, r3, #5
 8006152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006156:	0150      	lsls	r0, r2, #5
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	ebb2 080a 	subs.w	r8, r2, sl
 8006160:	eb63 090b 	sbc.w	r9, r3, fp
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006170:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006174:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006178:	ebb2 0408 	subs.w	r4, r2, r8
 800617c:	eb63 0509 	sbc.w	r5, r3, r9
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	00eb      	lsls	r3, r5, #3
 800618a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800618e:	00e2      	lsls	r2, r4, #3
 8006190:	4614      	mov	r4, r2
 8006192:	461d      	mov	r5, r3
 8006194:	eb14 030a 	adds.w	r3, r4, sl
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	eb45 030b 	adc.w	r3, r5, fp
 800619e:	607b      	str	r3, [r7, #4]
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ac:	4629      	mov	r1, r5
 80061ae:	028b      	lsls	r3, r1, #10
 80061b0:	4620      	mov	r0, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	4604      	mov	r4, r0
 80061b6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80061ba:	4601      	mov	r1, r0
 80061bc:	028a      	lsls	r2, r1, #10
 80061be:	4610      	mov	r0, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c4:	2200      	movs	r2, #0
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	60fa      	str	r2, [r7, #12]
 80061ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ce:	f7fa fcb7 	bl	8000b40 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4613      	mov	r3, r2
 80061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061da:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <HAL_RCC_GetSysClockFreq+0x180>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	0c1b      	lsrs	r3, r3, #16
 80061e0:	f003 0303 	and.w	r3, r3, #3
 80061e4:	3301      	adds	r3, #1
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80061ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061f4:	e002      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <HAL_RCC_GetSysClockFreq+0x184>)
 80061f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3740      	adds	r7, #64	; 0x40
 8006202:	46bd      	mov	sp, r7
 8006204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006208:	40023800 	.word	0x40023800
 800620c:	00f42400 	.word	0x00f42400
 8006210:	017d7840 	.word	0x017d7840

08006214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006218:	4b02      	ldr	r3, [pc, #8]	; (8006224 <HAL_RCC_GetHCLKFreq+0x10>)
 800621a:	681b      	ldr	r3, [r3, #0]
}
 800621c:	4618      	mov	r0, r3
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr
 8006224:	20000034 	.word	0x20000034

08006228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e07b      	b.n	8006332 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d108      	bne.n	8006254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624a:	d009      	beq.n	8006260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	61da      	str	r2, [r3, #28]
 8006252:	e005      	b.n	8006260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fc faa6 	bl	80027cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006296:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	ea42 0103 	orr.w	r1, r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	f003 0104 	and.w	r1, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f003 0210 	and.w	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006320:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b088      	sub	sp, #32
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_SPI_Transmit+0x22>
 8006358:	2302      	movs	r3, #2
 800635a:	e12d      	b.n	80065b8 <HAL_SPI_Transmit+0x27e>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006364:	f7fc fcc0 	bl	8002ce8 <HAL_GetTick>
 8006368:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b01      	cmp	r3, #1
 8006378:	d002      	beq.n	8006380 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800637a:	2302      	movs	r3, #2
 800637c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800637e:	e116      	b.n	80065ae <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_SPI_Transmit+0x52>
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006390:	e10d      	b.n	80065ae <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2203      	movs	r2, #3
 8006396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	88fa      	ldrh	r2, [r7, #6]
 80063aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d8:	d10f      	bne.n	80063fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	d007      	beq.n	8006418 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006420:	d14f      	bne.n	80064c2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_SPI_Transmit+0xf6>
 800642a:	8afb      	ldrh	r3, [r7, #22]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d142      	bne.n	80064b6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	881a      	ldrh	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	1c9a      	adds	r2, r3, #2
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006454:	e02f      	b.n	80064b6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b02      	cmp	r3, #2
 8006462:	d112      	bne.n	800648a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	881a      	ldrh	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	1c9a      	adds	r2, r3, #2
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	86da      	strh	r2, [r3, #54]	; 0x36
 8006488:	e015      	b.n	80064b6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800648a:	f7fc fc2d 	bl	8002ce8 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d803      	bhi.n	80064a2 <HAL_SPI_Transmit+0x168>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d102      	bne.n	80064a8 <HAL_SPI_Transmit+0x16e>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80064b4:	e07b      	b.n	80065ae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ca      	bne.n	8006456 <HAL_SPI_Transmit+0x11c>
 80064c0:	e050      	b.n	8006564 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_SPI_Transmit+0x196>
 80064ca:	8afb      	ldrh	r3, [r7, #22]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d144      	bne.n	800655a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	330c      	adds	r3, #12
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064f6:	e030      	b.n	800655a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d113      	bne.n	800652e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	330c      	adds	r3, #12
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	86da      	strh	r2, [r3, #54]	; 0x36
 800652c:	e015      	b.n	800655a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800652e:	f7fc fbdb 	bl	8002ce8 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d803      	bhi.n	8006546 <HAL_SPI_Transmit+0x20c>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d102      	bne.n	800654c <HAL_SPI_Transmit+0x212>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006558:	e029      	b.n	80065ae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1c9      	bne.n	80064f8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fbae 	bl	8006cca <SPI_EndRxTxTransaction>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e003      	b.n	80065ae <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d002      	beq.n	80065e6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
 80065e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065e4:	e0fb      	b.n	80067de <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ee:	d112      	bne.n	8006616 <HAL_SPI_Receive+0x56>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10e      	bne.n	8006616 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2204      	movs	r2, #4
 80065fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006600:	88fa      	ldrh	r2, [r7, #6]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f8ef 	bl	80067f0 <HAL_SPI_TransmitReceive>
 8006612:	4603      	mov	r3, r0
 8006614:	e0e8      	b.n	80067e8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_SPI_Receive+0x64>
 8006620:	2302      	movs	r3, #2
 8006622:	e0e1      	b.n	80067e8 <HAL_SPI_Receive+0x228>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800662c:	f7fc fb5c 	bl	8002ce8 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_SPI_Receive+0x7e>
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006642:	e0cc      	b.n	80067de <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2204      	movs	r2, #4
 8006648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	88fa      	ldrh	r2, [r7, #6]
 800665c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	88fa      	ldrh	r2, [r7, #6]
 8006662:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d10f      	bne.n	80066ac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d007      	beq.n	80066ca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d16a      	bne.n	80067a8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066d2:	e032      	b.n	800673a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d115      	bne.n	800670e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f103 020c 	add.w	r2, r3, #12
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	7812      	ldrb	r2, [r2, #0]
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800670c:	e015      	b.n	800673a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800670e:	f7fc faeb 	bl	8002ce8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d803      	bhi.n	8006726 <HAL_SPI_Receive+0x166>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d102      	bne.n	800672c <HAL_SPI_Receive+0x16c>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006738:	e051      	b.n	80067de <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1c7      	bne.n	80066d4 <HAL_SPI_Receive+0x114>
 8006744:	e035      	b.n	80067b2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d113      	bne.n	800677c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	b292      	uxth	r2, r2
 8006760:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	1c9a      	adds	r2, r3, #2
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	87da      	strh	r2, [r3, #62]	; 0x3e
 800677a:	e015      	b.n	80067a8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800677c:	f7fc fab4 	bl	8002ce8 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d803      	bhi.n	8006794 <HAL_SPI_Receive+0x1d4>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d102      	bne.n	800679a <HAL_SPI_Receive+0x1da>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80067a6:	e01a      	b.n	80067de <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1c9      	bne.n	8006746 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fa52 	bl	8006c60 <SPI_EndRxTransaction>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
 80067d4:	e003      	b.n	80067de <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08c      	sub	sp, #48	; 0x30
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067fe:	2301      	movs	r3, #1
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x26>
 8006812:	2302      	movs	r3, #2
 8006814:	e198      	b.n	8006b48 <HAL_SPI_TransmitReceive+0x358>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800681e:	f7fc fa63 	bl	8002ce8 <HAL_GetTick>
 8006822:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006834:	887b      	ldrh	r3, [r7, #2]
 8006836:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800683c:	2b01      	cmp	r3, #1
 800683e:	d00f      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x70>
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006846:	d107      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x68>
 8006850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006854:	2b04      	cmp	r3, #4
 8006856:	d003      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006858:	2302      	movs	r3, #2
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800685e:	e16d      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_SPI_TransmitReceive+0x82>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_SPI_TransmitReceive+0x82>
 800686c:	887b      	ldrh	r3, [r7, #2]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006878:	e160      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b04      	cmp	r3, #4
 8006884:	d003      	beq.n	800688e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2205      	movs	r2, #5
 800688a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	887a      	ldrh	r2, [r7, #2]
 800689e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	887a      	ldrh	r2, [r7, #2]
 80068a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	887a      	ldrh	r2, [r7, #2]
 80068b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d007      	beq.n	80068e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ea:	d17c      	bne.n	80069e6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <HAL_SPI_TransmitReceive+0x10a>
 80068f4:	8b7b      	ldrh	r3, [r7, #26]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d16a      	bne.n	80069d0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	881a      	ldrh	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	1c9a      	adds	r2, r3, #2
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006914:	b29b      	uxth	r3, r3
 8006916:	3b01      	subs	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800691e:	e057      	b.n	80069d0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d11b      	bne.n	8006966 <HAL_SPI_TransmitReceive+0x176>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d016      	beq.n	8006966 <HAL_SPI_TransmitReceive+0x176>
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	2b01      	cmp	r3, #1
 800693c:	d113      	bne.n	8006966 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	881a      	ldrh	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	1c9a      	adds	r2, r3, #2
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b01      	cmp	r3, #1
 8006972:	d119      	bne.n	80069a8 <HAL_SPI_TransmitReceive+0x1b8>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d014      	beq.n	80069a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	b292      	uxth	r2, r2
 800698a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	1c9a      	adds	r2, r3, #2
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069a4:	2301      	movs	r3, #1
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069a8:	f7fc f99e 	bl	8002ce8 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d80b      	bhi.n	80069d0 <HAL_SPI_TransmitReceive+0x1e0>
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069be:	d007      	beq.n	80069d0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80069ce:	e0b5      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1a2      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x130>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d19d      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x130>
 80069e4:	e080      	b.n	8006ae8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_SPI_TransmitReceive+0x204>
 80069ee:	8b7b      	ldrh	r3, [r7, #26]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d16f      	bne.n	8006ad4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a1a:	e05b      	b.n	8006ad4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d11c      	bne.n	8006a64 <HAL_SPI_TransmitReceive+0x274>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d017      	beq.n	8006a64 <HAL_SPI_TransmitReceive+0x274>
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d114      	bne.n	8006a64 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	330c      	adds	r3, #12
 8006a44:	7812      	ldrb	r2, [r2, #0]
 8006a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d119      	bne.n	8006aa6 <HAL_SPI_TransmitReceive+0x2b6>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d014      	beq.n	8006aa6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aa6:	f7fc f91f 	bl	8002ce8 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d803      	bhi.n	8006abe <HAL_SPI_TransmitReceive+0x2ce>
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d102      	bne.n	8006ac4 <HAL_SPI_TransmitReceive+0x2d4>
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d107      	bne.n	8006ad4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006ad2:	e033      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d19e      	bne.n	8006a1c <HAL_SPI_TransmitReceive+0x22c>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d199      	bne.n	8006a1c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f8ec 	bl	8006cca <SPI_EndRxTxTransaction>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d006      	beq.n	8006b06 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b04:	e01a      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b32:	e003      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3730      	adds	r7, #48	; 0x30
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b60:	f7fc f8c2 	bl	8002ce8 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	1a9b      	subs	r3, r3, r2
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b70:	f7fc f8ba 	bl	8002ce8 <HAL_GetTick>
 8006b74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b76:	4b39      	ldr	r3, [pc, #228]	; (8006c5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	015b      	lsls	r3, r3, #5
 8006b7c:	0d1b      	lsrs	r3, r3, #20
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
 8006b84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b86:	e054      	b.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d050      	beq.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b90:	f7fc f8aa 	bl	8002ce8 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d902      	bls.n	8006ba6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d13d      	bne.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bbe:	d111      	bne.n	8006be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc8:	d004      	beq.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd2:	d107      	bne.n	8006be4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bec:	d10f      	bne.n	8006c0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e017      	b.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	bf0c      	ite	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	2300      	movne	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d19b      	bne.n	8006b88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3720      	adds	r7, #32
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000034 	.word	0x20000034

08006c60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c74:	d111      	bne.n	8006c9a <SPI_EndRxTransaction+0x3a>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d004      	beq.n	8006c8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c88:	d107      	bne.n	8006c9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2180      	movs	r1, #128	; 0x80
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff ff53 	bl	8006b50 <SPI_WaitFlagStateUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	f043 0220 	orr.w	r2, r3, #32
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e000      	b.n	8006cc2 <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af02      	add	r7, sp, #8
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff ff35 	bl	8006b50 <SPI_WaitFlagStateUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e000      	b.n	8006cfe <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e041      	b.n	8006d9c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fb ff27 	bl	8002b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4619      	mov	r1, r3
 8006d44:	4610      	mov	r0, r2
 8006d46:	f000 fa8f 	bl	8007268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d001      	beq.n	8006dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e04e      	b.n	8006e5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a22      	ldr	r2, [pc, #136]	; (8006e64 <HAL_TIM_Base_Start_IT+0xc0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d022      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x80>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de6:	d01d      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x80>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d018      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x80>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <HAL_TIM_Base_Start_IT+0xc8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x80>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00e      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x80>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x80>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_TIM_Base_Start_IT+0x80>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a17      	ldr	r2, [pc, #92]	; (8006e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d111      	bne.n	8006e48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d010      	beq.n	8006e58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e46:	e007      	b.n	8006e58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40010400 	.word	0x40010400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40001800 	.word	0x40001800

08006e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d122      	bne.n	8006edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d11b      	bne.n	8006edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0202 	mvn.w	r2, #2
 8006eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f9b4 	bl	8007230 <HAL_TIM_IC_CaptureCallback>
 8006ec8:	e005      	b.n	8006ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9a7 	bl	800721e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f9b6 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d122      	bne.n	8006f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d11b      	bne.n	8006f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0204 	mvn.w	r2, #4
 8006f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f98a 	bl	8007230 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f97d 	bl	800721e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f98c 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d122      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d11b      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0208 	mvn.w	r2, #8
 8006f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f960 	bl	8007230 <HAL_TIM_IC_CaptureCallback>
 8006f70:	e005      	b.n	8006f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f953 	bl	800721e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f962 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d122      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d11b      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0210 	mvn.w	r2, #16
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2208      	movs	r2, #8
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f936 	bl	8007230 <HAL_TIM_IC_CaptureCallback>
 8006fc4:	e005      	b.n	8006fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f929 	bl	800721e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f938 	bl	8007242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d10e      	bne.n	8007004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d107      	bne.n	8007004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0201 	mvn.w	r2, #1
 8006ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fa fcbe 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b80      	cmp	r3, #128	; 0x80
 8007010:	d10e      	bne.n	8007030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701c:	2b80      	cmp	r3, #128	; 0x80
 800701e:	d107      	bne.n	8007030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fad3 	bl	80075d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d10e      	bne.n	800705c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b40      	cmp	r3, #64	; 0x40
 800704a:	d107      	bne.n	800705c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f8fc 	bl	8007254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b20      	cmp	r3, #32
 8007068:	d10e      	bne.n	8007088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b20      	cmp	r3, #32
 8007076:	d107      	bne.n	8007088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0220 	mvn.w	r2, #32
 8007080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa9e 	bl	80075c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_TIM_ConfigClockSource+0x1c>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e0b4      	b.n	8007216 <HAL_TIM_ConfigClockSource+0x186>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e4:	d03e      	beq.n	8007164 <HAL_TIM_ConfigClockSource+0xd4>
 80070e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ea:	f200 8087 	bhi.w	80071fc <HAL_TIM_ConfigClockSource+0x16c>
 80070ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f2:	f000 8086 	beq.w	8007202 <HAL_TIM_ConfigClockSource+0x172>
 80070f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fa:	d87f      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x16c>
 80070fc:	2b70      	cmp	r3, #112	; 0x70
 80070fe:	d01a      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0xa6>
 8007100:	2b70      	cmp	r3, #112	; 0x70
 8007102:	d87b      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x16c>
 8007104:	2b60      	cmp	r3, #96	; 0x60
 8007106:	d050      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x11a>
 8007108:	2b60      	cmp	r3, #96	; 0x60
 800710a:	d877      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x16c>
 800710c:	2b50      	cmp	r3, #80	; 0x50
 800710e:	d03c      	beq.n	800718a <HAL_TIM_ConfigClockSource+0xfa>
 8007110:	2b50      	cmp	r3, #80	; 0x50
 8007112:	d873      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x16c>
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	d058      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x13a>
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d86f      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x16c>
 800711c:	2b30      	cmp	r3, #48	; 0x30
 800711e:	d064      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x15a>
 8007120:	2b30      	cmp	r3, #48	; 0x30
 8007122:	d86b      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x16c>
 8007124:	2b20      	cmp	r3, #32
 8007126:	d060      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x15a>
 8007128:	2b20      	cmp	r3, #32
 800712a:	d867      	bhi.n	80071fc <HAL_TIM_ConfigClockSource+0x16c>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d05c      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x15a>
 8007130:	2b10      	cmp	r3, #16
 8007132:	d05a      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x15a>
 8007134:	e062      	b.n	80071fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007146:	f000 f9a4 	bl	8007492 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	609a      	str	r2, [r3, #8]
      break;
 8007162:	e04f      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007174:	f000 f98d 	bl	8007492 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007186:	609a      	str	r2, [r3, #8]
      break;
 8007188:	e03c      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007196:	461a      	mov	r2, r3
 8007198:	f000 f904 	bl	80073a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2150      	movs	r1, #80	; 0x50
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f95b 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 80071a8:	e02c      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b6:	461a      	mov	r2, r3
 80071b8:	f000 f922 	bl	8007400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2160      	movs	r1, #96	; 0x60
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f94b 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 80071c8:	e01c      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	461a      	mov	r2, r3
 80071d8:	f000 f8e4 	bl	80073a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2140      	movs	r1, #64	; 0x40
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f93b 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 80071e8:	e00c      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f000 f932 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 80071fa:	e003      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007200:	e000      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	bc80      	pop	{r7}
 8007240:	4770      	bx	lr

08007242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr
	...

08007268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <TIM_Base_SetConfig+0x110>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d013      	beq.n	80072a8 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007286:	d00f      	beq.n	80072a8 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a3c      	ldr	r2, [pc, #240]	; (800737c <TIM_Base_SetConfig+0x114>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00b      	beq.n	80072a8 <TIM_Base_SetConfig+0x40>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a3b      	ldr	r2, [pc, #236]	; (8007380 <TIM_Base_SetConfig+0x118>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d007      	beq.n	80072a8 <TIM_Base_SetConfig+0x40>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a3a      	ldr	r2, [pc, #232]	; (8007384 <TIM_Base_SetConfig+0x11c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d003      	beq.n	80072a8 <TIM_Base_SetConfig+0x40>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a39      	ldr	r2, [pc, #228]	; (8007388 <TIM_Base_SetConfig+0x120>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d108      	bne.n	80072ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2e      	ldr	r2, [pc, #184]	; (8007378 <TIM_Base_SetConfig+0x110>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d02b      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c8:	d027      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a2b      	ldr	r2, [pc, #172]	; (800737c <TIM_Base_SetConfig+0x114>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d023      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a2a      	ldr	r2, [pc, #168]	; (8007380 <TIM_Base_SetConfig+0x118>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d01f      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a29      	ldr	r2, [pc, #164]	; (8007384 <TIM_Base_SetConfig+0x11c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d01b      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a28      	ldr	r2, [pc, #160]	; (8007388 <TIM_Base_SetConfig+0x120>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d017      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <TIM_Base_SetConfig+0x124>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d013      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a26      	ldr	r2, [pc, #152]	; (8007390 <TIM_Base_SetConfig+0x128>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00f      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a25      	ldr	r2, [pc, #148]	; (8007394 <TIM_Base_SetConfig+0x12c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00b      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a24      	ldr	r2, [pc, #144]	; (8007398 <TIM_Base_SetConfig+0x130>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d007      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a23      	ldr	r2, [pc, #140]	; (800739c <TIM_Base_SetConfig+0x134>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d003      	beq.n	800731a <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a22      	ldr	r2, [pc, #136]	; (80073a0 <TIM_Base_SetConfig+0x138>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d108      	bne.n	800732c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a09      	ldr	r2, [pc, #36]	; (8007378 <TIM_Base_SetConfig+0x110>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d003      	beq.n	8007360 <TIM_Base_SetConfig+0xf8>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a0b      	ldr	r2, [pc, #44]	; (8007388 <TIM_Base_SetConfig+0x120>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d103      	bne.n	8007368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	615a      	str	r2, [r3, #20]
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr
 8007378:	40010000 	.word	0x40010000
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40000c00 	.word	0x40000c00
 8007388:	40010400 	.word	0x40010400
 800738c:	40014000 	.word	0x40014000
 8007390:	40014400 	.word	0x40014400
 8007394:	40014800 	.word	0x40014800
 8007398:	40001800 	.word	0x40001800
 800739c:	40001c00 	.word	0x40001c00
 80073a0:	40002000 	.word	0x40002000

080073a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f023 0201 	bic.w	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f023 030a 	bic.w	r3, r3, #10
 80073e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f023 0210 	bic.w	r2, r3, #16
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800742a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	031b      	lsls	r3, r3, #12
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800743c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	621a      	str	r2, [r3, #32]
}
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr

0800745e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	f043 0307 	orr.w	r3, r3, #7
 8007480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	609a      	str	r2, [r3, #8]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007492:	b480      	push	{r7}
 8007494:	b087      	sub	sp, #28
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	021a      	lsls	r2, r3, #8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	4313      	orrs	r3, r2
 80074be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	609a      	str	r2, [r3, #8]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e05a      	b.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a20      	ldr	r2, [pc, #128]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d022      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007534:	d01d      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1c      	ldr	r2, [pc, #112]	; (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d018      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1a      	ldr	r2, [pc, #104]	; (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00e      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d009      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a16      	ldr	r2, [pc, #88]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d004      	beq.n	8007572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a14      	ldr	r2, [pc, #80]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d10c      	bne.n	800758c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	4313      	orrs	r3, r2
 8007582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	40010000 	.word	0x40010000
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40000c00 	.word	0x40000c00
 80075b8:	40010400 	.word	0x40010400
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40001800 	.word	0x40001800

080075c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr

080075d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075e8:	b084      	sub	sp, #16
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	f107 001c 	add.w	r0, r7, #28
 80075f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d122      	bne.n	8007646 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762a:	2b01      	cmp	r3, #1
 800762c:	d105      	bne.n	800763a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fabc 	bl	8008bb8 <USB_CoreReset>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]
 8007644:	e010      	b.n	8007668 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 fab0 	bl	8008bb8 <USB_CoreReset>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10b      	bne.n	8007686 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f043 0206 	orr.w	r2, r3, #6
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f043 0220 	orr.w	r2, r3, #32
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007692:	b004      	add	sp, #16
 8007694:	4770      	bx	lr
	...

08007698 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d165      	bne.n	8007778 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4a41      	ldr	r2, [pc, #260]	; (80077b4 <USB_SetTurnaroundTime+0x11c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d906      	bls.n	80076c2 <USB_SetTurnaroundTime+0x2a>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4a40      	ldr	r2, [pc, #256]	; (80077b8 <USB_SetTurnaroundTime+0x120>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d202      	bcs.n	80076c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076bc:	230f      	movs	r3, #15
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e062      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4a3c      	ldr	r2, [pc, #240]	; (80077b8 <USB_SetTurnaroundTime+0x120>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d306      	bcc.n	80076d8 <USB_SetTurnaroundTime+0x40>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4a3b      	ldr	r2, [pc, #236]	; (80077bc <USB_SetTurnaroundTime+0x124>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d202      	bcs.n	80076d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076d2:	230e      	movs	r3, #14
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e057      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4a38      	ldr	r2, [pc, #224]	; (80077bc <USB_SetTurnaroundTime+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d306      	bcc.n	80076ee <USB_SetTurnaroundTime+0x56>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4a37      	ldr	r2, [pc, #220]	; (80077c0 <USB_SetTurnaroundTime+0x128>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d202      	bcs.n	80076ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80076e8:	230d      	movs	r3, #13
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e04c      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4a33      	ldr	r2, [pc, #204]	; (80077c0 <USB_SetTurnaroundTime+0x128>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d306      	bcc.n	8007704 <USB_SetTurnaroundTime+0x6c>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	4a32      	ldr	r2, [pc, #200]	; (80077c4 <USB_SetTurnaroundTime+0x12c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d802      	bhi.n	8007704 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80076fe:	230c      	movs	r3, #12
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e041      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4a2f      	ldr	r2, [pc, #188]	; (80077c4 <USB_SetTurnaroundTime+0x12c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d906      	bls.n	800771a <USB_SetTurnaroundTime+0x82>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4a2e      	ldr	r2, [pc, #184]	; (80077c8 <USB_SetTurnaroundTime+0x130>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d802      	bhi.n	800771a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007714:	230b      	movs	r3, #11
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	e036      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <USB_SetTurnaroundTime+0x130>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d906      	bls.n	8007730 <USB_SetTurnaroundTime+0x98>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4a29      	ldr	r2, [pc, #164]	; (80077cc <USB_SetTurnaroundTime+0x134>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d802      	bhi.n	8007730 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800772a:	230a      	movs	r3, #10
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	e02b      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4a26      	ldr	r2, [pc, #152]	; (80077cc <USB_SetTurnaroundTime+0x134>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d906      	bls.n	8007746 <USB_SetTurnaroundTime+0xae>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <USB_SetTurnaroundTime+0x138>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d202      	bcs.n	8007746 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007740:	2309      	movs	r3, #9
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e020      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	4a21      	ldr	r2, [pc, #132]	; (80077d0 <USB_SetTurnaroundTime+0x138>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d306      	bcc.n	800775c <USB_SetTurnaroundTime+0xc4>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	4a20      	ldr	r2, [pc, #128]	; (80077d4 <USB_SetTurnaroundTime+0x13c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d802      	bhi.n	800775c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007756:	2308      	movs	r3, #8
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e015      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <USB_SetTurnaroundTime+0x13c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d906      	bls.n	8007772 <USB_SetTurnaroundTime+0xda>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <USB_SetTurnaroundTime+0x140>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d202      	bcs.n	8007772 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800776c:	2307      	movs	r3, #7
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e00a      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007772:	2306      	movs	r3, #6
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e007      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800777e:	2309      	movs	r3, #9
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	e001      	b.n	8007788 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007784:	2309      	movs	r3, #9
 8007786:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	029b      	lsls	r3, r3, #10
 800779c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077a0:	431a      	orrs	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	00d8acbf 	.word	0x00d8acbf
 80077b8:	00e4e1c0 	.word	0x00e4e1c0
 80077bc:	00f42400 	.word	0x00f42400
 80077c0:	01067380 	.word	0x01067380
 80077c4:	011a499f 	.word	0x011a499f
 80077c8:	01312cff 	.word	0x01312cff
 80077cc:	014ca43f 	.word	0x014ca43f
 80077d0:	016e3600 	.word	0x016e3600
 80077d4:	01a6ab1f 	.word	0x01a6ab1f
 80077d8:	01e84800 	.word	0x01e84800

080077dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f043 0201 	orr.w	r2, r3, #1
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f023 0201 	bic.w	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d115      	bne.n	800786a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800784a:	2001      	movs	r0, #1
 800784c:	f7fb fa56 	bl	8002cfc <HAL_Delay>
      ms++;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3301      	adds	r3, #1
 8007854:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f922 	bl	8008aa0 <USB_GetMode>
 800785c:	4603      	mov	r3, r0
 800785e:	2b01      	cmp	r3, #1
 8007860:	d01e      	beq.n	80078a0 <USB_SetCurrentMode+0x84>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b31      	cmp	r3, #49	; 0x31
 8007866:	d9f0      	bls.n	800784a <USB_SetCurrentMode+0x2e>
 8007868:	e01a      	b.n	80078a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d115      	bne.n	800789c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800787c:	2001      	movs	r0, #1
 800787e:	f7fb fa3d 	bl	8002cfc <HAL_Delay>
      ms++;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3301      	adds	r3, #1
 8007886:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 f909 	bl	8008aa0 <USB_GetMode>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <USB_SetCurrentMode+0x84>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b31      	cmp	r3, #49	; 0x31
 8007898:	d9f0      	bls.n	800787c <USB_SetCurrentMode+0x60>
 800789a:	e001      	b.n	80078a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e005      	b.n	80078ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b32      	cmp	r3, #50	; 0x32
 80078a4:	d101      	bne.n	80078aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e000      	b.n	80078ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078b4:	b084      	sub	sp, #16
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	e009      	b.n	80078e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	3340      	adds	r3, #64	; 0x40
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	2200      	movs	r2, #0
 80078e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3301      	adds	r3, #1
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b0e      	cmp	r3, #14
 80078ec:	d9f2      	bls.n	80078d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11c      	bne.n	800792e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007902:	f043 0302 	orr.w	r3, r3, #2
 8007906:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	639a      	str	r2, [r3, #56]	; 0x38
 800792c:	e00b      	b.n	8007946 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800794c:	461a      	mov	r2, r3
 800794e:	2300      	movs	r3, #0
 8007950:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	2b01      	cmp	r3, #1
 8007956:	d10c      	bne.n	8007972 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800795e:	2100      	movs	r1, #0
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f965 	bl	8007c30 <USB_SetDevSpeed>
 8007966:	e008      	b.n	800797a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007968:	2101      	movs	r1, #1
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f960 	bl	8007c30 <USB_SetDevSpeed>
 8007970:	e003      	b.n	800797a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007972:	2103      	movs	r1, #3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f95b 	bl	8007c30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800797a:	2110      	movs	r1, #16
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f8f3 	bl	8007b68 <USB_FlushTxFifo>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f91f 	bl	8007bd0 <USB_FlushRxFifo>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a2:	461a      	mov	r2, r3
 80079a4:	2300      	movs	r3, #0
 80079a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ae:	461a      	mov	r2, r3
 80079b0:	2300      	movs	r3, #0
 80079b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	461a      	mov	r2, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	e043      	b.n	8007a4e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079dc:	d118      	bne.n	8007a10 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f0:	461a      	mov	r2, r3
 80079f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	e013      	b.n	8007a22 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a06:	461a      	mov	r2, r3
 8007a08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e008      	b.n	8007a22 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2300      	movs	r3, #0
 8007a32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	461a      	mov	r2, r3
 8007a42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d3b7      	bcc.n	80079c6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a56:	2300      	movs	r3, #0
 8007a58:	613b      	str	r3, [r7, #16]
 8007a5a:	e043      	b.n	8007ae4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a72:	d118      	bne.n	8007aa6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a86:	461a      	mov	r2, r3
 8007a88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	e013      	b.n	8007ab8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	e008      	b.n	8007ab8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007adc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d3b7      	bcc.n	8007a5c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007afe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	f043 0210 	orr.w	r2, r3, #16
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	699a      	ldr	r2, [r3, #24]
 8007b24:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <USB_DevInit+0x2b0>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f043 0208 	orr.w	r2, r3, #8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d107      	bne.n	8007b54 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b4c:	f043 0304 	orr.w	r3, r3, #4
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b60:	b004      	add	sp, #16
 8007b62:	4770      	bx	lr
 8007b64:	803c3800 	.word	0x803c3800

08007b68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4a13      	ldr	r2, [pc, #76]	; (8007bcc <USB_FlushTxFifo+0x64>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d901      	bls.n	8007b88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e01b      	b.n	8007bc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	daf2      	bge.n	8007b76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	019b      	lsls	r3, r3, #6
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4a08      	ldr	r2, [pc, #32]	; (8007bcc <USB_FlushTxFifo+0x64>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d901      	bls.n	8007bb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e006      	b.n	8007bc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d0f0      	beq.n	8007ba0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc80      	pop	{r7}
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	00030d40 	.word	0x00030d40

08007bd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4a11      	ldr	r2, [pc, #68]	; (8007c2c <USB_FlushRxFifo+0x5c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d901      	bls.n	8007bee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e018      	b.n	8007c20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	daf2      	bge.n	8007bdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2210      	movs	r2, #16
 8007bfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3301      	adds	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a08      	ldr	r2, [pc, #32]	; (8007c2c <USB_FlushRxFifo+0x5c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d901      	bls.n	8007c12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e006      	b.n	8007c20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d0f0      	beq.n	8007c00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	00030d40 	.word	0x00030d40

08007c30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	68f9      	ldr	r1, [r7, #12]
 8007c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c50:	4313      	orrs	r3, r2
 8007c52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 0306 	and.w	r3, r3, #6
 8007c78:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c80:	2300      	movs	r3, #0
 8007c82:	75fb      	strb	r3, [r7, #23]
 8007c84:	e00a      	b.n	8007c9c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d002      	beq.n	8007c92 <USB_GetDevSpeed+0x32>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b06      	cmp	r3, #6
 8007c90:	d102      	bne.n	8007c98 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c92:	2302      	movs	r3, #2
 8007c94:	75fb      	strb	r3, [r7, #23]
 8007c96:	e001      	b.n	8007c9c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c98:	230f      	movs	r3, #15
 8007c9a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bc80      	pop	{r7}
 8007ca6:	4770      	bx	lr

08007ca8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d13a      	bne.n	8007d3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	68f9      	ldr	r1, [r7, #12]
 8007cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d155      	bne.n	8007da8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	791b      	ldrb	r3, [r3, #4]
 8007d16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	059b      	lsls	r3, r3, #22
 8007d1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d20:	4313      	orrs	r3, r2
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	e036      	b.n	8007da8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d40:	69da      	ldr	r2, [r3, #28]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d50:	041b      	lsls	r3, r3, #16
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d11a      	bne.n	8007da8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	791b      	ldrb	r3, [r3, #4]
 8007d8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d8e:	430b      	orrs	r3, r1
 8007d90:	4313      	orrs	r3, r2
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d161      	bne.n	8007e94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de6:	d11f      	bne.n	8007e28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	0151      	lsls	r1, r2, #5
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	440a      	add	r2, r1
 8007e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	2101      	movs	r1, #1
 8007e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	43db      	mvns	r3, r3
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e48:	4013      	ands	r3, r2
 8007e4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e52:	69da      	ldr	r2, [r3, #28]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	43db      	mvns	r3, r3
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	0159      	lsls	r1, r3, #5
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	440b      	add	r3, r1
 8007e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4b35      	ldr	r3, [pc, #212]	; (8007f64 <USB_DeactivateEndpoint+0x1b0>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	600b      	str	r3, [r1, #0]
 8007e92:	e060      	b.n	8007f56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eaa:	d11f      	bne.n	8007eec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007eca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	f003 030f 	and.w	r3, r3, #15
 8007efc:	2101      	movs	r1, #1
 8007efe:	fa01 f303 	lsl.w	r3, r1, r3
 8007f02:	041b      	lsls	r3, r3, #16
 8007f04:	43db      	mvns	r3, r3
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f003 030f 	and.w	r3, r3, #15
 8007f20:	2101      	movs	r1, #1
 8007f22:	fa01 f303 	lsl.w	r3, r1, r3
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f30:	4013      	ands	r3, r2
 8007f32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	0159      	lsls	r1, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	440b      	add	r3, r1
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <USB_DeactivateEndpoint+0x1b4>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	ec337800 	.word	0xec337800
 8007f68:	eff37800 	.word	0xeff37800

08007f6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08a      	sub	sp, #40	; 0x28
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	f040 817a 	bne.w	8008282 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d132      	bne.n	8007ffc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	69fa      	ldr	r2, [r7, #28]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	0151      	lsls	r1, r2, #5
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	440a      	add	r2, r1
 8007ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff4:	0cdb      	lsrs	r3, r3, #19
 8007ff6:	04db      	lsls	r3, r3, #19
 8007ff8:	6113      	str	r3, [r2, #16]
 8007ffa:	e092      	b.n	8008122 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	0151      	lsls	r1, r2, #5
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	440a      	add	r2, r1
 8008012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008016:	0cdb      	lsrs	r3, r3, #19
 8008018:	04db      	lsls	r3, r3, #19
 800801a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	0151      	lsls	r1, r2, #5
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	440a      	add	r2, r1
 8008032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008036:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800803a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800803e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d11a      	bne.n	800807c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	691a      	ldr	r2, [r3, #16]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	429a      	cmp	r2, r3
 8008050:	d903      	bls.n	800805a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	0151      	lsls	r1, r2, #5
 800806c:	69fa      	ldr	r2, [r7, #28]
 800806e:	440a      	add	r2, r1
 8008070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008074:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008078:	6113      	str	r3, [r2, #16]
 800807a:	e01b      	b.n	80080b4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6919      	ldr	r1, [r3, #16]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	440b      	add	r3, r1
 8008094:	1e59      	subs	r1, r3, #1
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	fbb1 f3f3 	udiv	r3, r1, r3
 800809e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080a0:	4ba2      	ldr	r3, [pc, #648]	; (800832c <USB_EPStartXfer+0x3c0>)
 80080a2:	400b      	ands	r3, r1
 80080a4:	69b9      	ldr	r1, [r7, #24]
 80080a6:	0148      	lsls	r0, r1, #5
 80080a8:	69f9      	ldr	r1, [r7, #28]
 80080aa:	4401      	add	r1, r0
 80080ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080b0:	4313      	orrs	r3, r2
 80080b2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ca:	69b9      	ldr	r1, [r7, #24]
 80080cc:	0148      	lsls	r0, r1, #5
 80080ce:	69f9      	ldr	r1, [r7, #28]
 80080d0:	4401      	add	r1, r0
 80080d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080d6:	4313      	orrs	r3, r2
 80080d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d11f      	bne.n	8008122 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008100:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	440a      	add	r2, r1
 8008118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008120:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d14b      	bne.n	80081c0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813c:	461a      	mov	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	791b      	ldrb	r3, [r3, #4]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d128      	bne.n	800819e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d110      	bne.n	800817e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	440a      	add	r2, r1
 8008172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	e00f      	b.n	800819e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	440a      	add	r2, r1
 8008194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	0151      	lsls	r1, r2, #5
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	440a      	add	r2, r1
 80081b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	e165      	b.n	800848c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	0151      	lsls	r1, r2, #5
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	440a      	add	r2, r1
 80081d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	791b      	ldrb	r3, [r3, #4]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d015      	beq.n	8008214 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 814d 	beq.w	800848c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	2101      	movs	r1, #1
 8008204:	fa01 f303 	lsl.w	r3, r1, r3
 8008208:	69f9      	ldr	r1, [r7, #28]
 800820a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800820e:	4313      	orrs	r3, r2
 8008210:	634b      	str	r3, [r1, #52]	; 0x34
 8008212:	e13b      	b.n	800848c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d110      	bne.n	8008246 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e00f      	b.n	8008266 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008264:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	68d9      	ldr	r1, [r3, #12]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	781a      	ldrb	r2, [r3, #0]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	b298      	uxth	r0, r3
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4603      	mov	r3, r0
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 f9b7 	bl	80085ee <USB_WritePacket>
 8008280:	e104      	b.n	800848c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829c:	0cdb      	lsrs	r3, r3, #19
 800829e:	04db      	lsls	r3, r3, #19
 80082a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082c4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d131      	bne.n	8008330 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	689a      	ldr	r2, [r3, #8]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f0:	691a      	ldr	r2, [r3, #16]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082fa:	69b9      	ldr	r1, [r7, #24]
 80082fc:	0148      	lsls	r0, r1, #5
 80082fe:	69f9      	ldr	r1, [r7, #28]
 8008300:	4401      	add	r1, r0
 8008302:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008306:	4313      	orrs	r3, r2
 8008308:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	440a      	add	r2, r1
 8008320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008328:	6113      	str	r3, [r2, #16]
 800832a:	e061      	b.n	80083f0 <USB_EPStartXfer+0x484>
 800832c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d123      	bne.n	8008380 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800834e:	69b9      	ldr	r1, [r7, #24]
 8008350:	0148      	lsls	r0, r1, #5
 8008352:	69f9      	ldr	r1, [r7, #28]
 8008354:	4401      	add	r1, r0
 8008356:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800835a:	4313      	orrs	r3, r2
 800835c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	0151      	lsls	r1, r2, #5
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	440a      	add	r2, r1
 8008374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800837c:	6113      	str	r3, [r2, #16]
 800837e:	e037      	b.n	80083f0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	4413      	add	r3, r2
 800838a:	1e5a      	subs	r2, r3, #1
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	fbb2 f3f3 	udiv	r3, r2, r3
 8008394:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	8afa      	ldrh	r2, [r7, #22]
 800839c:	fb03 f202 	mul.w	r2, r3, r2
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b0:	691a      	ldr	r2, [r3, #16]
 80083b2:	8afb      	ldrh	r3, [r7, #22]
 80083b4:	04d9      	lsls	r1, r3, #19
 80083b6:	4b38      	ldr	r3, [pc, #224]	; (8008498 <USB_EPStartXfer+0x52c>)
 80083b8:	400b      	ands	r3, r1
 80083ba:	69b9      	ldr	r1, [r7, #24]
 80083bc:	0148      	lsls	r0, r1, #5
 80083be:	69f9      	ldr	r1, [r7, #28]
 80083c0:	4401      	add	r1, r0
 80083c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083c6:	4313      	orrs	r3, r2
 80083c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d6:	691a      	ldr	r2, [r3, #16]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083e0:	69b9      	ldr	r1, [r7, #24]
 80083e2:	0148      	lsls	r0, r1, #5
 80083e4:	69f9      	ldr	r1, [r7, #28]
 80083e6:	4401      	add	r1, r0
 80083e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083ec:	4313      	orrs	r3, r2
 80083ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d10d      	bne.n	8008412 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d009      	beq.n	8008412 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	68d9      	ldr	r1, [r3, #12]
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840e:	460a      	mov	r2, r1
 8008410:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	791b      	ldrb	r3, [r3, #4]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d128      	bne.n	800846c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008426:	2b00      	cmp	r3, #0
 8008428:	d110      	bne.n	800844c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	440a      	add	r2, r1
 8008440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008444:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	e00f      	b.n	800846c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800846a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800848a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3720      	adds	r7, #32
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	1ff80000 	.word	0x1ff80000

0800849c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d14a      	bne.n	8008550 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084d2:	f040 8086 	bne.w	80085e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	7812      	ldrb	r2, [r2, #0]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	7812      	ldrb	r2, [r2, #0]
 800850e:	0151      	lsls	r1, r2, #5
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	440a      	add	r2, r1
 8008514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800851c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3301      	adds	r3, #1
 8008522:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f242 7210 	movw	r2, #10000	; 0x2710
 800852a:	4293      	cmp	r3, r2
 800852c:	d902      	bls.n	8008534 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	75fb      	strb	r3, [r7, #23]
          break;
 8008532:	e056      	b.n	80085e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800854c:	d0e7      	beq.n	800851e <USB_EPStopXfer+0x82>
 800854e:	e048      	b.n	80085e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008568:	d13b      	bne.n	80085e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	7812      	ldrb	r2, [r2, #0]
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008588:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800858c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	7812      	ldrb	r2, [r2, #0]
 80085a2:	0151      	lsls	r1, r2, #5
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	440a      	add	r2, r1
 80085a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80085be:	4293      	cmp	r3, r2
 80085c0:	d902      	bls.n	80085c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	75fb      	strb	r3, [r7, #23]
          break;
 80085c6:	e00c      	b.n	80085e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085e0:	d0e7      	beq.n	80085b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr

080085ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b089      	sub	sp, #36	; 0x24
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	4611      	mov	r1, r2
 80085fa:	461a      	mov	r2, r3
 80085fc:	460b      	mov	r3, r1
 80085fe:	71fb      	strb	r3, [r7, #7]
 8008600:	4613      	mov	r3, r2
 8008602:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800860c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	d123      	bne.n	800865c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008614:	88bb      	ldrh	r3, [r7, #4]
 8008616:	3303      	adds	r3, #3
 8008618:	089b      	lsrs	r3, r3, #2
 800861a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800861c:	2300      	movs	r3, #0
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	e018      	b.n	8008654 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	031a      	lsls	r2, r3, #12
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862e:	461a      	mov	r2, r3
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	3301      	adds	r3, #1
 800863a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	3301      	adds	r3, #1
 8008640:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	3301      	adds	r3, #1
 8008646:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	3301      	adds	r3, #1
 800864c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	3301      	adds	r3, #1
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	429a      	cmp	r2, r3
 800865a:	d3e2      	bcc.n	8008622 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3724      	adds	r7, #36	; 0x24
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr

08008668 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008668:	b480      	push	{r7}
 800866a:	b08b      	sub	sp, #44	; 0x2c
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	089b      	lsrs	r3, r3, #2
 8008682:	b29b      	uxth	r3, r3
 8008684:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008686:	88fb      	ldrh	r3, [r7, #6]
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800868e:	2300      	movs	r3, #0
 8008690:	623b      	str	r3, [r7, #32]
 8008692:	e014      	b.n	80086be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	601a      	str	r2, [r3, #0]
    pDest++;
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	3301      	adds	r3, #1
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	3301      	adds	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	3301      	adds	r3, #1
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	3301      	adds	r3, #1
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	3301      	adds	r3, #1
 80086bc:	623b      	str	r3, [r7, #32]
 80086be:	6a3a      	ldr	r2, [r7, #32]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d3e6      	bcc.n	8008694 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086c6:	8bfb      	ldrh	r3, [r7, #30]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01e      	beq.n	800870a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d6:	461a      	mov	r2, r3
 80086d8:	f107 0310 	add.w	r3, r7, #16
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	701a      	strb	r2, [r3, #0]
      i++;
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	3301      	adds	r3, #1
 80086f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	3301      	adds	r3, #1
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80086fe:	8bfb      	ldrh	r3, [r7, #30]
 8008700:	3b01      	subs	r3, #1
 8008702:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008704:	8bfb      	ldrh	r3, [r7, #30]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1ea      	bne.n	80086e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800870c:	4618      	mov	r0, r3
 800870e:	372c      	adds	r7, #44	; 0x2c
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d12c      	bne.n	800878c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	db12      	blt.n	800876a <USB_EPSetStall+0x54>
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00f      	beq.n	800876a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	440a      	add	r2, r1
 8008760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008764:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008768:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	440a      	add	r2, r1
 8008780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	e02b      	b.n	80087e4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	db12      	blt.n	80087c4 <USB_EPSetStall+0xae>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00f      	beq.n	80087c4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	0151      	lsls	r1, r2, #5
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	440a      	add	r2, r1
 80087ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087c2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr

080087f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	785b      	ldrb	r3, [r3, #1]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d128      	bne.n	800885e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	0151      	lsls	r1, r2, #5
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	440a      	add	r2, r1
 8008822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800882a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	791b      	ldrb	r3, [r3, #4]
 8008830:	2b03      	cmp	r3, #3
 8008832:	d003      	beq.n	800883c <USB_EPClearStall+0x4c>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	791b      	ldrb	r3, [r3, #4]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d138      	bne.n	80088ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	0151      	lsls	r1, r2, #5
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	440a      	add	r2, r1
 8008852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	e027      	b.n	80088ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	440a      	add	r2, r1
 8008874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008878:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800887c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	791b      	ldrb	r3, [r3, #4]
 8008882:	2b03      	cmp	r3, #3
 8008884:	d003      	beq.n	800888e <USB_EPClearStall+0x9e>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	791b      	ldrb	r3, [r3, #4]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d10f      	bne.n	80088ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	0151      	lsls	r1, r2, #5
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	440a      	add	r2, r1
 80088a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bc80      	pop	{r7}
 80088b8:	4770      	bx	lr

080088ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b085      	sub	sp, #20
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80088dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088f4:	4313      	orrs	r3, r2
 80088f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	bc80      	pop	{r7}
 8008902:	4770      	bx	lr

08008904 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008932:	f023 0302 	bic.w	r3, r3, #2
 8008936:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800895e:	f023 0303 	bic.w	r3, r3, #3
 8008962:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008972:	f043 0302 	orr.w	r3, r3, #2
 8008976:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	bc80      	pop	{r7}
 8008982:	4770      	bx	lr

08008984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4013      	ands	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800899c:	68fb      	ldr	r3, [r7, #12]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4013      	ands	r3, r2
 80089ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	0c1b      	lsrs	r3, r3, #16
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bc80      	pop	{r7}
 80089d8:	4770      	bx	lr

080089da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	4013      	ands	r3, r2
 80089fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	b29b      	uxth	r3, r3
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr

08008a0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	4013      	ands	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr

08008a46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b087      	sub	sp, #28
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	fa22 f303 	lsr.w	r3, r2, r3
 8008a76:	01db      	lsls	r3, r3, #7
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	4013      	ands	r3, r2
 8008a92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a94:	68bb      	ldr	r3, [r7, #8]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bc80      	pop	{r7}
 8008a9e:	4770      	bx	lr

08008aa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	f003 0301 	and.w	r3, r3, #1
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr

08008aba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ad8:	f023 0307 	bic.w	r3, r3, #7
 8008adc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr
	...

08008b00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	333c      	adds	r3, #60	; 0x3c
 8008b16:	3304      	adds	r3, #4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	4a25      	ldr	r2, [pc, #148]	; (8008bb4 <USB_EP0_OutStart+0xb4>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d90a      	bls.n	8008b3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b34:	d101      	bne.n	8008b3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e037      	b.n	8008baa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b40:	461a      	mov	r2, r3
 8008b42:	2300      	movs	r3, #0
 8008b44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b68:	f043 0318 	orr.w	r3, r3, #24
 8008b6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d10f      	bne.n	8008ba8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ba6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bc80      	pop	{r7}
 8008bb2:	4770      	bx	lr
 8008bb4:	4f54300a 	.word	0x4f54300a

08008bb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a12      	ldr	r2, [pc, #72]	; (8008c18 <USB_CoreReset+0x60>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d901      	bls.n	8008bd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e01b      	b.n	8008c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	daf2      	bge.n	8008bc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f043 0201 	orr.w	r2, r3, #1
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a08      	ldr	r2, [pc, #32]	; (8008c18 <USB_CoreReset+0x60>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d901      	bls.n	8008c00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e006      	b.n	8008c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d0f0      	beq.n	8008bee <USB_CoreReset+0x36>

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr
 8008c18:	00030d40 	.word	0x00030d40

08008c1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7c1b      	ldrb	r3, [r3, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d115      	bne.n	8008c60 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c38:	2202      	movs	r2, #2
 8008c3a:	2181      	movs	r1, #129	; 0x81
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 ff42 	bl	800aac6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 ff38 	bl	800aac6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008c5e:	e012      	b.n	8008c86 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	2202      	movs	r2, #2
 8008c64:	2181      	movs	r1, #129	; 0x81
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 ff2d 	bl	800aac6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	2202      	movs	r2, #2
 8008c76:	2101      	movs	r1, #1
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 ff24 	bl	800aac6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c86:	2308      	movs	r3, #8
 8008c88:	2203      	movs	r2, #3
 8008c8a:	2182      	movs	r1, #130	; 0x82
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 ff1a 	bl	800aac6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c9c:	f002 f866 	bl	800ad6c <malloc>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]
 8008cb8:	e026      	b.n	8008d08 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	7c1b      	ldrb	r3, [r3, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d109      	bne.n	8008cf8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cee:	2101      	movs	r1, #1
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 ffd8 	bl	800aca6 <USBD_LL_PrepareReceive>
 8008cf6:	e007      	b.n	8008d08 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	2101      	movs	r1, #1
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 ffcf 	bl	800aca6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d22:	2181      	movs	r1, #129	; 0x81
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 fef4 	bl	800ab12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d30:	2101      	movs	r1, #1
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 feed 	bl	800ab12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d40:	2182      	movs	r1, #130	; 0x82
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fee5 	bl	800ab12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00e      	beq.n	8008d76 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f002 f807 	bl	800ad7c <free>
    pdev->pClassData = NULL;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d90:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d039      	beq.n	8008e1e <USBD_CDC_Setup+0x9e>
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d17f      	bne.n	8008eae <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	88db      	ldrh	r3, [r3, #6]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d029      	beq.n	8008e0a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	b25b      	sxtb	r3, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	da11      	bge.n	8008de4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008dcc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	88d2      	ldrh	r2, [r2, #6]
 8008dd2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008dd4:	6939      	ldr	r1, [r7, #16]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	88db      	ldrh	r3, [r3, #6]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fa42 	bl	800a266 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008de2:	e06b      	b.n	8008ebc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	785a      	ldrb	r2, [r3, #1]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	88db      	ldrh	r3, [r3, #6]
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008dfa:	6939      	ldr	r1, [r7, #16]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	88db      	ldrh	r3, [r3, #6]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 fa5d 	bl	800a2c2 <USBD_CtlPrepareRx>
      break;
 8008e08:	e058      	b.n	8008ebc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	7850      	ldrb	r0, [r2, #1]
 8008e16:	2200      	movs	r2, #0
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	4798      	blx	r3
      break;
 8008e1c:	e04e      	b.n	8008ebc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	2b0b      	cmp	r3, #11
 8008e24:	d02e      	beq.n	8008e84 <USBD_CDC_Setup+0x104>
 8008e26:	2b0b      	cmp	r3, #11
 8008e28:	dc38      	bgt.n	8008e9c <USBD_CDC_Setup+0x11c>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <USBD_CDC_Setup+0xb4>
 8008e2e:	2b0a      	cmp	r3, #10
 8008e30:	d014      	beq.n	8008e5c <USBD_CDC_Setup+0xdc>
 8008e32:	e033      	b.n	8008e9c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d107      	bne.n	8008e4e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e3e:	f107 030c 	add.w	r3, r7, #12
 8008e42:	2202      	movs	r2, #2
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fa0d 	bl	800a266 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e4c:	e02e      	b.n	8008eac <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 f99e 	bl	800a192 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e56:	2302      	movs	r3, #2
 8008e58:	75fb      	strb	r3, [r7, #23]
          break;
 8008e5a:	e027      	b.n	8008eac <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d107      	bne.n	8008e76 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e66:	f107 030f 	add.w	r3, r7, #15
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f001 f9f9 	bl	800a266 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e74:	e01a      	b.n	8008eac <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f98a 	bl	800a192 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e7e:	2302      	movs	r3, #2
 8008e80:	75fb      	strb	r3, [r7, #23]
          break;
 8008e82:	e013      	b.n	8008eac <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d00d      	beq.n	8008eaa <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f001 f97e 	bl	800a192 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e96:	2302      	movs	r3, #2
 8008e98:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e9a:	e006      	b.n	8008eaa <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 f977 	bl	800a192 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ea8:	e000      	b.n	8008eac <USBD_CDC_Setup+0x12c>
          break;
 8008eaa:	bf00      	nop
      }
      break;
 8008eac:	e006      	b.n	8008ebc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f001 f96e 	bl	800a192 <USBD_CtlError>
      ret = USBD_FAIL;
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8008eba:	bf00      	nop
  }

  return ret;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ee0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d03a      	beq.n	8008f62 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	331c      	adds	r3, #28
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d029      	beq.n	8008f56 <USBD_CDC_DataIn+0x90>
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	440b      	add	r3, r1
 8008f10:	331c      	adds	r3, #28
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	78f9      	ldrb	r1, [r7, #3]
 8008f16:	68b8      	ldr	r0, [r7, #8]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	440b      	add	r3, r1
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4403      	add	r3, r0
 8008f22:	3344      	adds	r3, #68	; 0x44
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f2a:	fb01 f303 	mul.w	r3, r1, r3
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d110      	bne.n	8008f56 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f34:	78fa      	ldrb	r2, [r7, #3]
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	440b      	add	r3, r1
 8008f42:	331c      	adds	r3, #28
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f48:	78f9      	ldrb	r1, [r7, #3]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 fe86 	bl	800ac60 <USBD_LL_Transmit>
 8008f54:	e003      	b.n	8008f5e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e000      	b.n	8008f64 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008f62:	2302      	movs	r3, #2
  }
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 feb1 	bl	800acec <USBD_LL_GetRxDataSize>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00d      	beq.n	8008fb8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4798      	blx	r3

    return USBD_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	e000      	b.n	8008fba <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008fb8:	2302      	movs	r3, #2
  }
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d015      	beq.n	8009008 <USBD_CDC_EP0_RxReady+0x46>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008fe2:	2bff      	cmp	r3, #255	; 0xff
 8008fe4:	d010      	beq.n	8009008 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008ff4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ffc:	b292      	uxth	r2, r2
 8008ffe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	22ff      	movs	r2, #255	; 0xff
 8009004:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2243      	movs	r2, #67	; 0x43
 8009020:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009022:	4b03      	ldr	r3, [pc, #12]	; (8009030 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009024:	4618      	mov	r0, r3
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	bc80      	pop	{r7}
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	200000c8 	.word	0x200000c8

08009034 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2243      	movs	r2, #67	; 0x43
 8009040:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009042:	4b03      	ldr	r3, [pc, #12]	; (8009050 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20000084 	.word	0x20000084

08009054 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2243      	movs	r2, #67	; 0x43
 8009060:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009062:	4b03      	ldr	r3, [pc, #12]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	bc80      	pop	{r7}
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	2000010c 	.word	0x2000010c

08009074 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	220a      	movs	r2, #10
 8009080:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009082:	4b03      	ldr	r3, [pc, #12]	; (8009090 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	20000040 	.word	0x20000040

08009094 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800909e:	2302      	movs	r3, #2
 80090a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bc80      	pop	{r7}
 80090be:	4770      	bx	lr

080090c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090de:	88fa      	ldrh	r2, [r7, #6]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	371c      	adds	r7, #28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bc80      	pop	{r7}
 80090f0:	4770      	bx	lr

080090f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009102:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009126:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01c      	beq.n	800916c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009138:	2b00      	cmp	r3, #0
 800913a:	d115      	bne.n	8009168 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2201      	movs	r2, #1
 8009140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800915a:	b29b      	uxth	r3, r3
 800915c:	2181      	movs	r1, #129	; 0x81
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fd7e 	bl	800ac60 <USBD_LL_Transmit>

      return USBD_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	e002      	b.n	800916e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009168:	2301      	movs	r3, #1
 800916a:	e000      	b.n	800916e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800916c:	2302      	movs	r3, #2
  }
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009184:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918c:	2b00      	cmp	r3, #0
 800918e:	d017      	beq.n	80091c0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7c1b      	ldrb	r3, [r3, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d109      	bne.n	80091ac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800919e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091a2:	2101      	movs	r1, #1
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 fd7e 	bl	800aca6 <USBD_LL_PrepareReceive>
 80091aa:	e007      	b.n	80091bc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091b2:	2340      	movs	r3, #64	; 0x40
 80091b4:	2101      	movs	r1, #1
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fd75 	bl	800aca6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	e000      	b.n	80091c2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80091c0:	2302      	movs	r3, #2
  }
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	4613      	mov	r3, r2
 80091d6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091de:	2302      	movs	r3, #2
 80091e0:	e01a      	b.n	8009218 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	79fa      	ldrb	r2, [r7, #7]
 800920e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f001 fbf3 	bl	800a9fc <USBD_LL_Init>

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d006      	beq.n	8009242 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
 8009240:	e001      	b.n	8009246 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009242:	2302      	movs	r3, #2
 8009244:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009246:	7bfb      	ldrb	r3, [r7, #15]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr

08009252 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fc18 	bl	800aa90 <USBD_LL_Start>

  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	bc80      	pop	{r7}
 800927c:	4770      	bx	lr

0800927e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800928a:	2302      	movs	r3, #2
 800928c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00c      	beq.n	80092b2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	4611      	mov	r1, r2
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	4798      	blx	r3
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	4611      	mov	r1, r2
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3

  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 ff10 	bl	800a11a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	2b02      	cmp	r3, #2
 800931c:	d016      	beq.n	800934c <USBD_LL_SetupStage+0x6a>
 800931e:	2b02      	cmp	r3, #2
 8009320:	d81c      	bhi.n	800935c <USBD_LL_SetupStage+0x7a>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <USBD_LL_SetupStage+0x4a>
 8009326:	2b01      	cmp	r3, #1
 8009328:	d008      	beq.n	800933c <USBD_LL_SetupStage+0x5a>
 800932a:	e017      	b.n	800935c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fa03 	bl	8009740 <USBD_StdDevReq>
      break;
 800933a:	e01a      	b.n	8009372 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fa65 	bl	8009814 <USBD_StdItfReq>
      break;
 800934a:	e012      	b.n	8009372 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 faa5 	bl	80098a4 <USBD_StdEPReq>
      break;
 800935a:	e00a      	b.n	8009372 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009362:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009366:	b2db      	uxtb	r3, r3
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fbf0 	bl	800ab50 <USBD_LL_StallEP>
      break;
 8009370:	bf00      	nop
  }

  return USBD_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	460b      	mov	r3, r1
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d14b      	bne.n	8009428 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009396:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d134      	bne.n	800940c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d919      	bls.n	80093e2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d203      	bcs.n	80093d0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	e002      	b.n	80093d6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	6879      	ldr	r1, [r7, #4]
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 ff8f 	bl	800a2fe <USBD_CtlContinueRx>
 80093e0:	e038      	b.n	8009454 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d105      	bne.n	8009404 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 ff8c 	bl	800a322 <USBD_CtlSendStatus>
 800940a:	e023      	b.n	8009454 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009412:	2b05      	cmp	r3, #5
 8009414:	d11e      	bne.n	8009454 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800941e:	2100      	movs	r1, #0
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f001 fb95 	bl	800ab50 <USBD_LL_StallEP>
 8009426:	e015      	b.n	8009454 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00d      	beq.n	8009450 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800943a:	2b03      	cmp	r3, #3
 800943c:	d108      	bne.n	8009450 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	7afa      	ldrb	r2, [r7, #11]
 8009448:	4611      	mov	r1, r2
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	4798      	blx	r3
 800944e:	e001      	b.n	8009454 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009450:	2302      	movs	r3, #2
 8009452:	e000      	b.n	8009456 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	460b      	mov	r3, r1
 8009468:	607a      	str	r2, [r7, #4]
 800946a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800946c:	7afb      	ldrb	r3, [r7, #11]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d17f      	bne.n	8009572 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3314      	adds	r3, #20
 8009476:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800947e:	2b02      	cmp	r3, #2
 8009480:	d15c      	bne.n	800953c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	429a      	cmp	r2, r3
 800948c:	d915      	bls.n	80094ba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	1ad2      	subs	r2, r2, r3
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	6879      	ldr	r1, [r7, #4]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 fef9 	bl	800a29e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094ac:	2300      	movs	r3, #0
 80094ae:	2200      	movs	r2, #0
 80094b0:	2100      	movs	r1, #0
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f001 fbf7 	bl	800aca6 <USBD_LL_PrepareReceive>
 80094b8:	e04e      	b.n	8009558 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	6912      	ldr	r2, [r2, #16]
 80094c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094c6:	fb01 f202 	mul.w	r2, r1, r2
 80094ca:	1a9b      	subs	r3, r3, r2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d11c      	bne.n	800950a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094d8:	429a      	cmp	r2, r3
 80094da:	d316      	bcc.n	800950a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d20f      	bcs.n	800950a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094ea:	2200      	movs	r2, #0
 80094ec:	2100      	movs	r1, #0
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fed5 	bl	800a29e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094fc:	2300      	movs	r3, #0
 80094fe:	2200      	movs	r2, #0
 8009500:	2100      	movs	r1, #0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f001 fbcf 	bl	800aca6 <USBD_LL_PrepareReceive>
 8009508:	e026      	b.n	8009558 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800951c:	2b03      	cmp	r3, #3
 800951e:	d105      	bne.n	800952c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800952c:	2180      	movs	r1, #128	; 0x80
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f001 fb0e 	bl	800ab50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 ff07 	bl	800a348 <USBD_CtlReceiveStatus>
 800953a:	e00d      	b.n	8009558 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009542:	2b04      	cmp	r3, #4
 8009544:	d004      	beq.n	8009550 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800954c:	2b00      	cmp	r3, #0
 800954e:	d103      	bne.n	8009558 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009550:	2180      	movs	r1, #128	; 0x80
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f001 fafc 	bl	800ab50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800955e:	2b01      	cmp	r3, #1
 8009560:	d11d      	bne.n	800959e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f7ff fe81 	bl	800926a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009570:	e015      	b.n	800959e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00d      	beq.n	800959a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009584:	2b03      	cmp	r3, #3
 8009586:	d108      	bne.n	800959a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	7afa      	ldrb	r2, [r7, #11]
 8009592:	4611      	mov	r1, r2
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	4798      	blx	r3
 8009598:	e001      	b.n	800959e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800959a:	2302      	movs	r3, #2
 800959c:	e000      	b.n	80095a0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	2200      	movs	r2, #0
 80095b4:	2100      	movs	r1, #0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f001 fa85 	bl	800aac6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2240      	movs	r2, #64	; 0x40
 80095c8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095cc:	2340      	movs	r3, #64	; 0x40
 80095ce:	2200      	movs	r2, #0
 80095d0:	2180      	movs	r1, #128	; 0x80
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 fa77 	bl	800aac6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2240      	movs	r2, #64	; 0x40
 80095e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	6852      	ldr	r2, [r2, #4]
 8009618:	b2d2      	uxtb	r2, r2
 800961a:	4611      	mov	r1, r2
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	4798      	blx	r3
  }

  return USBD_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	78fa      	ldrb	r2, [r7, #3]
 800963a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr

08009648 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2204      	movs	r2, #4
 8009660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	bc80      	pop	{r7}
 800966e:	4770      	bx	lr

08009670 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967e:	2b04      	cmp	r3, #4
 8009680:	d105      	bne.n	800968e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr

0800969a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	d10b      	bne.n	80096c4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b083      	sub	sp, #12
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	460b      	mov	r3, r1
 80096d8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr

080096fe <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr

08009712 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	6852      	ldr	r2, [r2, #4]
 800972e:	b2d2      	uxtb	r2, r2
 8009730:	4611      	mov	r1, r2
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3

  return USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009756:	2b40      	cmp	r3, #64	; 0x40
 8009758:	d005      	beq.n	8009766 <USBD_StdDevReq+0x26>
 800975a:	2b40      	cmp	r3, #64	; 0x40
 800975c:	d84f      	bhi.n	80097fe <USBD_StdDevReq+0xbe>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <USBD_StdDevReq+0x36>
 8009762:	2b20      	cmp	r3, #32
 8009764:	d14b      	bne.n	80097fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	4798      	blx	r3
      break;
 8009774:	e048      	b.n	8009808 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	785b      	ldrb	r3, [r3, #1]
 800977a:	2b09      	cmp	r3, #9
 800977c:	d839      	bhi.n	80097f2 <USBD_StdDevReq+0xb2>
 800977e:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <USBD_StdDevReq+0x44>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	080097d5 	.word	0x080097d5
 8009788:	080097e9 	.word	0x080097e9
 800978c:	080097f3 	.word	0x080097f3
 8009790:	080097df 	.word	0x080097df
 8009794:	080097f3 	.word	0x080097f3
 8009798:	080097b7 	.word	0x080097b7
 800979c:	080097ad 	.word	0x080097ad
 80097a0:	080097f3 	.word	0x080097f3
 80097a4:	080097cb 	.word	0x080097cb
 80097a8:	080097c1 	.word	0x080097c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f9dc 	bl	8009b6c <USBD_GetDescriptor>
          break;
 80097b4:	e022      	b.n	80097fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fb3f 	bl	8009e3c <USBD_SetAddress>
          break;
 80097be:	e01d      	b.n	80097fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fb7e 	bl	8009ec4 <USBD_SetConfig>
          break;
 80097c8:	e018      	b.n	80097fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fc07 	bl	8009fe0 <USBD_GetConfig>
          break;
 80097d2:	e013      	b.n	80097fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fc37 	bl	800a04a <USBD_GetStatus>
          break;
 80097dc:	e00e      	b.n	80097fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fc65 	bl	800a0b0 <USBD_SetFeature>
          break;
 80097e6:	e009      	b.n	80097fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fc74 	bl	800a0d8 <USBD_ClrFeature>
          break;
 80097f0:	e004      	b.n	80097fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fccc 	bl	800a192 <USBD_CtlError>
          break;
 80097fa:	bf00      	nop
      }
      break;
 80097fc:	e004      	b.n	8009808 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fcc6 	bl	800a192 <USBD_CtlError>
      break;
 8009806:	bf00      	nop
  }

  return ret;
 8009808:	7bfb      	ldrb	r3, [r7, #15]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop

08009814 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800982a:	2b40      	cmp	r3, #64	; 0x40
 800982c:	d005      	beq.n	800983a <USBD_StdItfReq+0x26>
 800982e:	2b40      	cmp	r3, #64	; 0x40
 8009830:	d82e      	bhi.n	8009890 <USBD_StdItfReq+0x7c>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <USBD_StdItfReq+0x26>
 8009836:	2b20      	cmp	r3, #32
 8009838:	d12a      	bne.n	8009890 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	3b01      	subs	r3, #1
 8009842:	2b02      	cmp	r3, #2
 8009844:	d81d      	bhi.n	8009882 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	889b      	ldrh	r3, [r3, #4]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b01      	cmp	r3, #1
 800984e:	d813      	bhi.n	8009878 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	4798      	blx	r3
 800985e:	4603      	mov	r3, r0
 8009860:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	88db      	ldrh	r3, [r3, #6]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d110      	bne.n	800988c <USBD_StdItfReq+0x78>
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10d      	bne.n	800988c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fd56 	bl	800a322 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009876:	e009      	b.n	800988c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fc89 	bl	800a192 <USBD_CtlError>
          break;
 8009880:	e004      	b.n	800988c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fc84 	bl	800a192 <USBD_CtlError>
          break;
 800988a:	e000      	b.n	800988e <USBD_StdItfReq+0x7a>
          break;
 800988c:	bf00      	nop
      }
      break;
 800988e:	e004      	b.n	800989a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fc7d 	bl	800a192 <USBD_CtlError>
      break;
 8009898:	bf00      	nop
  }

  return USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	889b      	ldrh	r3, [r3, #4]
 80098b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098c0:	2b40      	cmp	r3, #64	; 0x40
 80098c2:	d007      	beq.n	80098d4 <USBD_StdEPReq+0x30>
 80098c4:	2b40      	cmp	r3, #64	; 0x40
 80098c6:	f200 8146 	bhi.w	8009b56 <USBD_StdEPReq+0x2b2>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <USBD_StdEPReq+0x40>
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	f040 8141 	bne.w	8009b56 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	4798      	blx	r3
      break;
 80098e2:	e13d      	b.n	8009b60 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ec:	2b20      	cmp	r3, #32
 80098ee:	d10a      	bne.n	8009906 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	e12d      	b.n	8009b62 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	785b      	ldrb	r3, [r3, #1]
 800990a:	2b03      	cmp	r3, #3
 800990c:	d007      	beq.n	800991e <USBD_StdEPReq+0x7a>
 800990e:	2b03      	cmp	r3, #3
 8009910:	f300 811b 	bgt.w	8009b4a <USBD_StdEPReq+0x2a6>
 8009914:	2b00      	cmp	r3, #0
 8009916:	d072      	beq.n	80099fe <USBD_StdEPReq+0x15a>
 8009918:	2b01      	cmp	r3, #1
 800991a:	d03a      	beq.n	8009992 <USBD_StdEPReq+0xee>
 800991c:	e115      	b.n	8009b4a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009924:	2b02      	cmp	r3, #2
 8009926:	d002      	beq.n	800992e <USBD_StdEPReq+0x8a>
 8009928:	2b03      	cmp	r3, #3
 800992a:	d015      	beq.n	8009958 <USBD_StdEPReq+0xb4>
 800992c:	e02b      	b.n	8009986 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00c      	beq.n	800994e <USBD_StdEPReq+0xaa>
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	2b80      	cmp	r3, #128	; 0x80
 8009938:	d009      	beq.n	800994e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 f906 	bl	800ab50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009944:	2180      	movs	r1, #128	; 0x80
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 f902 	bl	800ab50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800994c:	e020      	b.n	8009990 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fc1e 	bl	800a192 <USBD_CtlError>
              break;
 8009956:	e01b      	b.n	8009990 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	885b      	ldrh	r3, [r3, #2]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10e      	bne.n	800997e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <USBD_StdEPReq+0xda>
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b80      	cmp	r3, #128	; 0x80
 800996a:	d008      	beq.n	800997e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	88db      	ldrh	r3, [r3, #6]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d104      	bne.n	800997e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 f8e9 	bl	800ab50 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fccf 	bl	800a322 <USBD_CtlSendStatus>

              break;
 8009984:	e004      	b.n	8009990 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fc02 	bl	800a192 <USBD_CtlError>
              break;
 800998e:	bf00      	nop
          }
          break;
 8009990:	e0e0      	b.n	8009b54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009998:	2b02      	cmp	r3, #2
 800999a:	d002      	beq.n	80099a2 <USBD_StdEPReq+0xfe>
 800999c:	2b03      	cmp	r3, #3
 800999e:	d015      	beq.n	80099cc <USBD_StdEPReq+0x128>
 80099a0:	e026      	b.n	80099f0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00c      	beq.n	80099c2 <USBD_StdEPReq+0x11e>
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	2b80      	cmp	r3, #128	; 0x80
 80099ac:	d009      	beq.n	80099c2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 f8cc 	bl	800ab50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099b8:	2180      	movs	r1, #128	; 0x80
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f001 f8c8 	bl	800ab50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099c0:	e01c      	b.n	80099fc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fbe4 	bl	800a192 <USBD_CtlError>
              break;
 80099ca:	e017      	b.n	80099fc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	885b      	ldrh	r3, [r3, #2]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d112      	bne.n	80099fa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d004      	beq.n	80099e8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80099de:	7bbb      	ldrb	r3, [r7, #14]
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f001 f8d3 	bl	800ab8e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fc9a 	bl	800a322 <USBD_CtlSendStatus>
              }
              break;
 80099ee:	e004      	b.n	80099fa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fbcd 	bl	800a192 <USBD_CtlError>
              break;
 80099f8:	e000      	b.n	80099fc <USBD_StdEPReq+0x158>
              break;
 80099fa:	bf00      	nop
          }
          break;
 80099fc:	e0aa      	b.n	8009b54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d002      	beq.n	8009a0e <USBD_StdEPReq+0x16a>
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d032      	beq.n	8009a72 <USBD_StdEPReq+0x1ce>
 8009a0c:	e097      	b.n	8009b3e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d007      	beq.n	8009a24 <USBD_StdEPReq+0x180>
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	2b80      	cmp	r3, #128	; 0x80
 8009a18:	d004      	beq.n	8009a24 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fbb8 	bl	800a192 <USBD_CtlError>
                break;
 8009a22:	e091      	b.n	8009b48 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	da0b      	bge.n	8009a44 <USBD_StdEPReq+0x1a0>
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	3310      	adds	r3, #16
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	4413      	add	r3, r2
 8009a40:	3304      	adds	r3, #4
 8009a42:	e00b      	b.n	8009a5c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	4413      	add	r3, r2
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2202      	movs	r2, #2
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fbfb 	bl	800a266 <USBD_CtlSendData>
              break;
 8009a70:	e06a      	b.n	8009b48 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	da11      	bge.n	8009a9e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	f003 020f 	and.w	r2, r3, #15
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	440b      	add	r3, r1
 8009a8c:	3318      	adds	r3, #24
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d117      	bne.n	8009ac4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fb7b 	bl	800a192 <USBD_CtlError>
                  break;
 8009a9c:	e054      	b.n	8009b48 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
 8009aa0:	f003 020f 	and.w	r2, r3, #15
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	440b      	add	r3, r1
 8009ab0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d104      	bne.n	8009ac4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fb68 	bl	800a192 <USBD_CtlError>
                  break;
 8009ac2:	e041      	b.n	8009b48 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	da0b      	bge.n	8009ae4 <USBD_StdEPReq+0x240>
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	3310      	adds	r3, #16
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	4413      	add	r3, r2
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	e00b      	b.n	8009afc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	4413      	add	r3, r2
 8009afa:	3304      	adds	r3, #4
 8009afc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <USBD_StdEPReq+0x266>
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	2b80      	cmp	r3, #128	; 0x80
 8009b08:	d103      	bne.n	8009b12 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	e00e      	b.n	8009b30 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 f858 	bl	800abcc <USBD_LL_IsStallEP>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2201      	movs	r2, #1
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e002      	b.n	8009b30 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2202      	movs	r2, #2
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fb95 	bl	800a266 <USBD_CtlSendData>
              break;
 8009b3c:	e004      	b.n	8009b48 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb26 	bl	800a192 <USBD_CtlError>
              break;
 8009b46:	bf00      	nop
          }
          break;
 8009b48:	e004      	b.n	8009b54 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fb20 	bl	800a192 <USBD_CtlError>
          break;
 8009b52:	bf00      	nop
      }
      break;
 8009b54:	e004      	b.n	8009b60 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fb1a 	bl	800a192 <USBD_CtlError>
      break;
 8009b5e:	bf00      	nop
  }

  return ret;
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	885b      	ldrh	r3, [r3, #2]
 8009b86:	0a1b      	lsrs	r3, r3, #8
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	2b06      	cmp	r3, #6
 8009b8e:	f200 8128 	bhi.w	8009de2 <USBD_GetDescriptor+0x276>
 8009b92:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <USBD_GetDescriptor+0x2c>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009bb5 	.word	0x08009bb5
 8009b9c:	08009bcd 	.word	0x08009bcd
 8009ba0:	08009c0d 	.word	0x08009c0d
 8009ba4:	08009de3 	.word	0x08009de3
 8009ba8:	08009de3 	.word	0x08009de3
 8009bac:	08009d83 	.word	0x08009d83
 8009bb0:	08009daf 	.word	0x08009daf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	7c12      	ldrb	r2, [r2, #16]
 8009bc0:	f107 0108 	add.w	r1, r7, #8
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	60f8      	str	r0, [r7, #12]
      break;
 8009bca:	e112      	b.n	8009df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	7c1b      	ldrb	r3, [r3, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10d      	bne.n	8009bf0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	f107 0208 	add.w	r2, r7, #8
 8009be0:	4610      	mov	r0, r2
 8009be2:	4798      	blx	r3
 8009be4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3301      	adds	r3, #1
 8009bea:	2202      	movs	r2, #2
 8009bec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bee:	e100      	b.n	8009df2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	f107 0208 	add.w	r2, r7, #8
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4798      	blx	r3
 8009c00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	2202      	movs	r2, #2
 8009c08:	701a      	strb	r2, [r3, #0]
      break;
 8009c0a:	e0f2      	b.n	8009df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	885b      	ldrh	r3, [r3, #2]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b05      	cmp	r3, #5
 8009c14:	f200 80ac 	bhi.w	8009d70 <USBD_GetDescriptor+0x204>
 8009c18:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <USBD_GetDescriptor+0xb4>)
 8009c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1e:	bf00      	nop
 8009c20:	08009c39 	.word	0x08009c39
 8009c24:	08009c6d 	.word	0x08009c6d
 8009c28:	08009ca1 	.word	0x08009ca1
 8009c2c:	08009cd5 	.word	0x08009cd5
 8009c30:	08009d09 	.word	0x08009d09
 8009c34:	08009d3d 	.word	0x08009d3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00b      	beq.n	8009c5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	7c12      	ldrb	r2, [r2, #16]
 8009c50:	f107 0108 	add.w	r1, r7, #8
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
 8009c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c5a:	e091      	b.n	8009d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa97 	bl	800a192 <USBD_CtlError>
            err++;
 8009c64:	7afb      	ldrb	r3, [r7, #11]
 8009c66:	3301      	adds	r3, #1
 8009c68:	72fb      	strb	r3, [r7, #11]
          break;
 8009c6a:	e089      	b.n	8009d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	7c12      	ldrb	r2, [r2, #16]
 8009c84:	f107 0108 	add.w	r1, r7, #8
 8009c88:	4610      	mov	r0, r2
 8009c8a:	4798      	blx	r3
 8009c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8e:	e077      	b.n	8009d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fa7d 	bl	800a192 <USBD_CtlError>
            err++;
 8009c98:	7afb      	ldrb	r3, [r7, #11]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9e:	e06f      	b.n	8009d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	7c12      	ldrb	r2, [r2, #16]
 8009cb8:	f107 0108 	add.w	r1, r7, #8
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	4798      	blx	r3
 8009cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cc2:	e05d      	b.n	8009d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fa63 	bl	800a192 <USBD_CtlError>
            err++;
 8009ccc:	7afb      	ldrb	r3, [r7, #11]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cd2:	e055      	b.n	8009d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	7c12      	ldrb	r2, [r2, #16]
 8009cec:	f107 0108 	add.w	r1, r7, #8
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	4798      	blx	r3
 8009cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cf6:	e043      	b.n	8009d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa49 	bl	800a192 <USBD_CtlError>
            err++;
 8009d00:	7afb      	ldrb	r3, [r7, #11]
 8009d02:	3301      	adds	r3, #1
 8009d04:	72fb      	strb	r3, [r7, #11]
          break;
 8009d06:	e03b      	b.n	8009d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00b      	beq.n	8009d2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	7c12      	ldrb	r2, [r2, #16]
 8009d20:	f107 0108 	add.w	r1, r7, #8
 8009d24:	4610      	mov	r0, r2
 8009d26:	4798      	blx	r3
 8009d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d2a:	e029      	b.n	8009d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa2f 	bl	800a192 <USBD_CtlError>
            err++;
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	3301      	adds	r3, #1
 8009d38:	72fb      	strb	r3, [r7, #11]
          break;
 8009d3a:	e021      	b.n	8009d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00b      	beq.n	8009d60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	7c12      	ldrb	r2, [r2, #16]
 8009d54:	f107 0108 	add.w	r1, r7, #8
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d5e:	e00f      	b.n	8009d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa15 	bl	800a192 <USBD_CtlError>
            err++;
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d6e:	e007      	b.n	8009d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa0d 	bl	800a192 <USBD_CtlError>
          err++;
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d7e:	e038      	b.n	8009df2 <USBD_GetDescriptor+0x286>
 8009d80:	e037      	b.n	8009df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	7c1b      	ldrb	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d109      	bne.n	8009d9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d92:	f107 0208 	add.w	r2, r7, #8
 8009d96:	4610      	mov	r0, r2
 8009d98:	4798      	blx	r3
 8009d9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d9c:	e029      	b.n	8009df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f9f6 	bl	800a192 <USBD_CtlError>
        err++;
 8009da6:	7afb      	ldrb	r3, [r7, #11]
 8009da8:	3301      	adds	r3, #1
 8009daa:	72fb      	strb	r3, [r7, #11]
      break;
 8009dac:	e021      	b.n	8009df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	7c1b      	ldrb	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10d      	bne.n	8009dd2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbe:	f107 0208 	add.w	r2, r7, #8
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4798      	blx	r3
 8009dc6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	2207      	movs	r2, #7
 8009dce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dd0:	e00f      	b.n	8009df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f9dc 	bl	800a192 <USBD_CtlError>
        err++;
 8009dda:	7afb      	ldrb	r3, [r7, #11]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	72fb      	strb	r3, [r7, #11]
      break;
 8009de0:	e007      	b.n	8009df2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f9d4 	bl	800a192 <USBD_CtlError>
      err++;
 8009dea:	7afb      	ldrb	r3, [r7, #11]
 8009dec:	3301      	adds	r3, #1
 8009dee:	72fb      	strb	r3, [r7, #11]
      break;
 8009df0:	bf00      	nop
  }

  if (err != 0U)
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d11c      	bne.n	8009e32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009df8:	893b      	ldrh	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d011      	beq.n	8009e22 <USBD_GetDescriptor+0x2b6>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	88db      	ldrh	r3, [r3, #6]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00d      	beq.n	8009e22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	88da      	ldrh	r2, [r3, #6]
 8009e0a:	893b      	ldrh	r3, [r7, #8]
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	bf28      	it	cs
 8009e10:	4613      	movcs	r3, r2
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e16:	893b      	ldrh	r3, [r7, #8]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	68f9      	ldr	r1, [r7, #12]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fa22 	bl	800a266 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	88db      	ldrh	r3, [r3, #6]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d104      	bne.n	8009e34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa79 	bl	800a322 <USBD_CtlSendStatus>
 8009e30:	e000      	b.n	8009e34 <USBD_GetDescriptor+0x2c8>
    return;
 8009e32:	bf00      	nop
    }
  }
}
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop

08009e3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	889b      	ldrh	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d130      	bne.n	8009eb0 <USBD_SetAddress+0x74>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	88db      	ldrh	r3, [r3, #6]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d12c      	bne.n	8009eb0 <USBD_SetAddress+0x74>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	885b      	ldrh	r3, [r3, #2]
 8009e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e5c:	d828      	bhi.n	8009eb0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	885b      	ldrh	r3, [r3, #2]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d104      	bne.n	8009e7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f98b 	bl	800a192 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7c:	e01d      	b.n	8009eba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	7bfa      	ldrb	r2, [r7, #15]
 8009e82:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fec9 	bl	800ac22 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fa46 	bl	800a322 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d004      	beq.n	8009ea6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea4:	e009      	b.n	8009eba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eae:	e004      	b.n	8009eba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f96d 	bl	800a192 <USBD_CtlError>
  }
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	885b      	ldrh	r3, [r3, #2]
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	4b41      	ldr	r3, [pc, #260]	; (8009fdc <USBD_SetConfig+0x118>)
 8009ed6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ed8:	4b40      	ldr	r3, [pc, #256]	; (8009fdc <USBD_SetConfig+0x118>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d904      	bls.n	8009eea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f955 	bl	800a192 <USBD_CtlError>
 8009ee8:	e075      	b.n	8009fd6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d002      	beq.n	8009efa <USBD_SetConfig+0x36>
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d023      	beq.n	8009f40 <USBD_SetConfig+0x7c>
 8009ef8:	e062      	b.n	8009fc0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009efa:	4b38      	ldr	r3, [pc, #224]	; (8009fdc <USBD_SetConfig+0x118>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d01a      	beq.n	8009f38 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f02:	4b36      	ldr	r3, [pc, #216]	; (8009fdc <USBD_SetConfig+0x118>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2203      	movs	r2, #3
 8009f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f14:	4b31      	ldr	r3, [pc, #196]	; (8009fdc <USBD_SetConfig+0x118>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7ff f9af 	bl	800927e <USBD_SetClassConfig>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d104      	bne.n	8009f30 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f932 	bl	800a192 <USBD_CtlError>
            return;
 8009f2e:	e052      	b.n	8009fd6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f9f6 	bl	800a322 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f36:	e04e      	b.n	8009fd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f9f2 	bl	800a322 <USBD_CtlSendStatus>
        break;
 8009f3e:	e04a      	b.n	8009fd6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f40:	4b26      	ldr	r3, [pc, #152]	; (8009fdc <USBD_SetConfig+0x118>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d112      	bne.n	8009f6e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009f50:	4b22      	ldr	r3, [pc, #136]	; (8009fdc <USBD_SetConfig+0x118>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	461a      	mov	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f5a:	4b20      	ldr	r3, [pc, #128]	; (8009fdc <USBD_SetConfig+0x118>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7ff f9ab 	bl	80092bc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f9db 	bl	800a322 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f6c:	e033      	b.n	8009fd6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f6e:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <USBD_SetConfig+0x118>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d01d      	beq.n	8009fb8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff f999 	bl	80092bc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009f8a:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <USBD_SetConfig+0x118>)
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f94:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <USBD_SetConfig+0x118>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff f96f 	bl	800927e <USBD_SetClassConfig>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d104      	bne.n	8009fb0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f8f2 	bl	800a192 <USBD_CtlError>
            return;
 8009fae:	e012      	b.n	8009fd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f9b6 	bl	800a322 <USBD_CtlSendStatus>
        break;
 8009fb6:	e00e      	b.n	8009fd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f9b2 	bl	800a322 <USBD_CtlSendStatus>
        break;
 8009fbe:	e00a      	b.n	8009fd6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8e5 	bl	800a192 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009fc8:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <USBD_SetConfig+0x118>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7ff f974 	bl	80092bc <USBD_ClrClassConfig>
        break;
 8009fd4:	bf00      	nop
    }
  }
}
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	200005e0 	.word	0x200005e0

08009fe0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	88db      	ldrh	r3, [r3, #6]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d004      	beq.n	8009ffc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f8cc 	bl	800a192 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ffa:	e022      	b.n	800a042 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a002:	2b02      	cmp	r3, #2
 800a004:	dc02      	bgt.n	800a00c <USBD_GetConfig+0x2c>
 800a006:	2b00      	cmp	r3, #0
 800a008:	dc03      	bgt.n	800a012 <USBD_GetConfig+0x32>
 800a00a:	e015      	b.n	800a038 <USBD_GetConfig+0x58>
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d00b      	beq.n	800a028 <USBD_GetConfig+0x48>
 800a010:	e012      	b.n	800a038 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	3308      	adds	r3, #8
 800a01c:	2201      	movs	r2, #1
 800a01e:	4619      	mov	r1, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f920 	bl	800a266 <USBD_CtlSendData>
        break;
 800a026:	e00c      	b.n	800a042 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3304      	adds	r3, #4
 800a02c:	2201      	movs	r2, #1
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f918 	bl	800a266 <USBD_CtlSendData>
        break;
 800a036:	e004      	b.n	800a042 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f8a9 	bl	800a192 <USBD_CtlError>
        break;
 800a040:	bf00      	nop
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05a:	3b01      	subs	r3, #1
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d81e      	bhi.n	800a09e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	88db      	ldrh	r3, [r3, #6]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d004      	beq.n	800a072 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f891 	bl	800a192 <USBD_CtlError>
        break;
 800a070:	e01a      	b.n	800a0a8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d005      	beq.n	800a08e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f043 0202 	orr.w	r2, r3, #2
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	330c      	adds	r3, #12
 800a092:	2202      	movs	r2, #2
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f8e5 	bl	800a266 <USBD_CtlSendData>
      break;
 800a09c:	e004      	b.n	800a0a8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f876 	bl	800a192 <USBD_CtlError>
      break;
 800a0a6:	bf00      	nop
  }
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	885b      	ldrh	r3, [r3, #2]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d106      	bne.n	800a0d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f929 	bl	800a322 <USBD_CtlSendStatus>
  }
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d80b      	bhi.n	800a106 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	885b      	ldrh	r3, [r3, #2]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d10c      	bne.n	800a110 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f90f 	bl	800a322 <USBD_CtlSendStatus>
      }
      break;
 800a104:	e004      	b.n	800a110 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f842 	bl	800a192 <USBD_CtlError>
      break;
 800a10e:	e000      	b.n	800a112 <USBD_ClrFeature+0x3a>
      break;
 800a110:	bf00      	nop
  }
}
 800a112:	bf00      	nop
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781a      	ldrb	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	785a      	ldrb	r2, [r3, #1]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	3302      	adds	r3, #2
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	3303      	adds	r3, #3
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	b29b      	uxth	r3, r3
 800a148:	4413      	add	r3, r2
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	3304      	adds	r3, #4
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	b29a      	uxth	r2, r3
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	3305      	adds	r3, #5
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	021b      	lsls	r3, r3, #8
 800a162:	b29b      	uxth	r3, r3
 800a164:	4413      	add	r3, r2
 800a166:	b29a      	uxth	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	3306      	adds	r3, #6
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	b29a      	uxth	r2, r3
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	3307      	adds	r3, #7
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4413      	add	r3, r2
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	80da      	strh	r2, [r3, #6]

}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a19c:	2180      	movs	r1, #128	; 0x80
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fcd6 	bl	800ab50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fcd2 	bl	800ab50 <USBD_LL_StallEP>
}
 800a1ac:	bf00      	nop
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d032      	beq.n	800a230 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f000 f834 	bl	800a238 <USBD_GetLen>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	005b      	lsls	r3, r3, #1
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	75fa      	strb	r2, [r7, #23]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	7812      	ldrb	r2, [r2, #0]
 800a1ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	75fa      	strb	r2, [r7, #23]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	2203      	movs	r2, #3
 800a1fe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a200:	e012      	b.n	800a228 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	60fa      	str	r2, [r7, #12]
 800a208:	7dfa      	ldrb	r2, [r7, #23]
 800a20a:	1c51      	adds	r1, r2, #1
 800a20c:	75f9      	strb	r1, [r7, #23]
 800a20e:	4611      	mov	r1, r2
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	440a      	add	r2, r1
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	75fa      	strb	r2, [r7, #23]
 800a21e:	461a      	mov	r2, r3
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	4413      	add	r3, r2
 800a224:	2200      	movs	r2, #0
 800a226:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e8      	bne.n	800a202 <USBD_GetString+0x4e>
    }
  }
}
 800a230:	bf00      	nop
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a244:	e005      	b.n	800a252 <USBD_GetLen+0x1a>
  {
    len++;
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	3301      	adds	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3301      	adds	r3, #1
 800a250:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1f5      	bne.n	800a246 <USBD_GetLen+0xe>
  }

  return len;
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	bc80      	pop	{r7}
 800a264:	4770      	bx	lr

0800a266 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	4613      	mov	r3, r2
 800a272:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2202      	movs	r2, #2
 800a278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a27c:	88fa      	ldrh	r2, [r7, #6]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a282:	88fa      	ldrh	r2, [r7, #6]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a288:	88fb      	ldrh	r3, [r7, #6]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	2100      	movs	r1, #0
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 fce6 	bl	800ac60 <USBD_LL_Transmit>

  return USBD_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 fcd4 	bl	800ac60 <USBD_LL_Transmit>

  return USBD_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a2d8:	88fa      	ldrh	r2, [r7, #6]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a2e0:	88fa      	ldrh	r2, [r7, #6]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2e8:	88fb      	ldrh	r3, [r7, #6]
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fcd9 	bl	800aca6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	4613      	mov	r3, r2
 800a30a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	2100      	movs	r1, #0
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 fcc7 	bl	800aca6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b082      	sub	sp, #8
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2204      	movs	r2, #4
 800a32e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a332:	2300      	movs	r3, #0
 800a334:	2200      	movs	r2, #0
 800a336:	2100      	movs	r1, #0
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fc91 	bl	800ac60 <USBD_LL_Transmit>

  return USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2205      	movs	r2, #5
 800a354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a358:	2300      	movs	r3, #0
 800a35a:	2200      	movs	r2, #0
 800a35c:	2100      	movs	r1, #0
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fca1 	bl	800aca6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
	...

0800a370 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a374:	2200      	movs	r2, #0
 800a376:	4912      	ldr	r1, [pc, #72]	; (800a3c0 <MX_USB_DEVICE_Init+0x50>)
 800a378:	4812      	ldr	r0, [pc, #72]	; (800a3c4 <MX_USB_DEVICE_Init+0x54>)
 800a37a:	f7fe ff26 	bl	80091ca <USBD_Init>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a384:	f7f8 f9e7 	bl	8002756 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a388:	490f      	ldr	r1, [pc, #60]	; (800a3c8 <MX_USB_DEVICE_Init+0x58>)
 800a38a:	480e      	ldr	r0, [pc, #56]	; (800a3c4 <MX_USB_DEVICE_Init+0x54>)
 800a38c:	f7fe ff48 	bl	8009220 <USBD_RegisterClass>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a396:	f7f8 f9de 	bl	8002756 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a39a:	490c      	ldr	r1, [pc, #48]	; (800a3cc <MX_USB_DEVICE_Init+0x5c>)
 800a39c:	4809      	ldr	r0, [pc, #36]	; (800a3c4 <MX_USB_DEVICE_Init+0x54>)
 800a39e:	f7fe fe79 	bl	8009094 <USBD_CDC_RegisterInterface>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3a8:	f7f8 f9d5 	bl	8002756 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3ac:	4805      	ldr	r0, [pc, #20]	; (800a3c4 <MX_USB_DEVICE_Init+0x54>)
 800a3ae:	f7fe ff50 	bl	8009252 <USBD_Start>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3b8:	f7f8 f9cd 	bl	8002756 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3bc:	bf00      	nop
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20000160 	.word	0x20000160
 800a3c4:	200005e4 	.word	0x200005e4
 800a3c8:	2000004c 	.word	0x2000004c
 800a3cc:	20000150 	.word	0x20000150

0800a3d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4905      	ldr	r1, [pc, #20]	; (800a3ec <CDC_Init_FS+0x1c>)
 800a3d8:	4805      	ldr	r0, [pc, #20]	; (800a3f0 <CDC_Init_FS+0x20>)
 800a3da:	f7fe fe71 	bl	80090c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3de:	4905      	ldr	r1, [pc, #20]	; (800a3f4 <CDC_Init_FS+0x24>)
 800a3e0:	4803      	ldr	r0, [pc, #12]	; (800a3f0 <CDC_Init_FS+0x20>)
 800a3e2:	f7fe fe86 	bl	80090f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000ca8 	.word	0x20000ca8
 800a3f0:	200005e4 	.word	0x200005e4
 800a3f4:	200008a8 	.word	0x200008a8

0800a3f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	46bd      	mov	sp, r7
 800a402:	bc80      	pop	{r7}
 800a404:	4770      	bx	lr
	...

0800a408 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	71fb      	strb	r3, [r7, #7]
 800a414:	4613      	mov	r3, r2
 800a416:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	2b23      	cmp	r3, #35	; 0x23
 800a41c:	d84a      	bhi.n	800a4b4 <CDC_Control_FS+0xac>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <CDC_Control_FS+0x1c>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a4b5 	.word	0x0800a4b5
 800a428:	0800a4b5 	.word	0x0800a4b5
 800a42c:	0800a4b5 	.word	0x0800a4b5
 800a430:	0800a4b5 	.word	0x0800a4b5
 800a434:	0800a4b5 	.word	0x0800a4b5
 800a438:	0800a4b5 	.word	0x0800a4b5
 800a43c:	0800a4b5 	.word	0x0800a4b5
 800a440:	0800a4b5 	.word	0x0800a4b5
 800a444:	0800a4b5 	.word	0x0800a4b5
 800a448:	0800a4b5 	.word	0x0800a4b5
 800a44c:	0800a4b5 	.word	0x0800a4b5
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a4b5 	.word	0x0800a4b5
 800a458:	0800a4b5 	.word	0x0800a4b5
 800a45c:	0800a4b5 	.word	0x0800a4b5
 800a460:	0800a4b5 	.word	0x0800a4b5
 800a464:	0800a4b5 	.word	0x0800a4b5
 800a468:	0800a4b5 	.word	0x0800a4b5
 800a46c:	0800a4b5 	.word	0x0800a4b5
 800a470:	0800a4b5 	.word	0x0800a4b5
 800a474:	0800a4b5 	.word	0x0800a4b5
 800a478:	0800a4b5 	.word	0x0800a4b5
 800a47c:	0800a4b5 	.word	0x0800a4b5
 800a480:	0800a4b5 	.word	0x0800a4b5
 800a484:	0800a4b5 	.word	0x0800a4b5
 800a488:	0800a4b5 	.word	0x0800a4b5
 800a48c:	0800a4b5 	.word	0x0800a4b5
 800a490:	0800a4b5 	.word	0x0800a4b5
 800a494:	0800a4b5 	.word	0x0800a4b5
 800a498:	0800a4b5 	.word	0x0800a4b5
 800a49c:	0800a4b5 	.word	0x0800a4b5
 800a4a0:	0800a4b5 	.word	0x0800a4b5
 800a4a4:	0800a4b5 	.word	0x0800a4b5
 800a4a8:	0800a4b5 	.word	0x0800a4b5
 800a4ac:	0800a4b5 	.word	0x0800a4b5
 800a4b0:	0800a4b5 	.word	0x0800a4b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4b4:	bf00      	nop
  }

  return (USBD_OK);
 800a4b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bc80      	pop	{r7}
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop

0800a4c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4805      	ldr	r0, [pc, #20]	; (800a4e8 <CDC_Receive_FS+0x24>)
 800a4d2:	f7fe fe0e 	bl	80090f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4d6:	4804      	ldr	r0, [pc, #16]	; (800a4e8 <CDC_Receive_FS+0x24>)
 800a4d8:	f7fe fe4d 	bl	8009176 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a4dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200005e4 	.word	0x200005e4

0800a4ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <CDC_Transmit_FS+0x48>)
 800a4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a502:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a50e:	2301      	movs	r3, #1
 800a510:	e00b      	b.n	800a52a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a512:	887b      	ldrh	r3, [r7, #2]
 800a514:	461a      	mov	r2, r3
 800a516:	6879      	ldr	r1, [r7, #4]
 800a518:	4806      	ldr	r0, [pc, #24]	; (800a534 <CDC_Transmit_FS+0x48>)
 800a51a:	f7fe fdd1 	bl	80090c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a51e:	4805      	ldr	r0, [pc, #20]	; (800a534 <CDC_Transmit_FS+0x48>)
 800a520:	f7fe fdfa 	bl	8009118 <USBD_CDC_TransmitPacket>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a528:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	200005e4 	.word	0x200005e4

0800a538 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	6039      	str	r1, [r7, #0]
 800a542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2212      	movs	r2, #18
 800a548:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a54a:	4b03      	ldr	r3, [pc, #12]	; (800a558 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	bc80      	pop	{r7}
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	2000017c 	.word	0x2000017c

0800a55c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2204      	movs	r2, #4
 800a56c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a56e:	4b03      	ldr	r3, [pc, #12]	; (800a57c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	bc80      	pop	{r7}
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	20000190 	.word	0x20000190

0800a580 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a58c:	79fb      	ldrb	r3, [r7, #7]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d105      	bne.n	800a59e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4907      	ldr	r1, [pc, #28]	; (800a5b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a596:	4808      	ldr	r0, [pc, #32]	; (800a5b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a598:	f7ff fe0c 	bl	800a1b4 <USBD_GetString>
 800a59c:	e004      	b.n	800a5a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	4904      	ldr	r1, [pc, #16]	; (800a5b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5a2:	4805      	ldr	r0, [pc, #20]	; (800a5b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5a4:	f7ff fe06 	bl	800a1b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	200010a8 	.word	0x200010a8
 800a5b8:	0800dac4 	.word	0x0800dac4

0800a5bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	4904      	ldr	r1, [pc, #16]	; (800a5dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5cc:	4804      	ldr	r0, [pc, #16]	; (800a5e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5ce:	f7ff fdf1 	bl	800a1b4 <USBD_GetString>
  return USBD_StrDesc;
 800a5d2:	4b02      	ldr	r3, [pc, #8]	; (800a5dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	200010a8 	.word	0x200010a8
 800a5e0:	0800dadc 	.word	0x0800dadc

0800a5e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	6039      	str	r1, [r7, #0]
 800a5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	221a      	movs	r2, #26
 800a5f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5f6:	f000 f843 	bl	800a680 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5fa:	4b02      	ldr	r3, [pc, #8]	; (800a604 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20000194 	.word	0x20000194

0800a608 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	6039      	str	r1, [r7, #0]
 800a612:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d105      	bne.n	800a626 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	4907      	ldr	r1, [pc, #28]	; (800a63c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a61e:	4808      	ldr	r0, [pc, #32]	; (800a640 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a620:	f7ff fdc8 	bl	800a1b4 <USBD_GetString>
 800a624:	e004      	b.n	800a630 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	4904      	ldr	r1, [pc, #16]	; (800a63c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a62a:	4805      	ldr	r0, [pc, #20]	; (800a640 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a62c:	f7ff fdc2 	bl	800a1b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a630:	4b02      	ldr	r3, [pc, #8]	; (800a63c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	200010a8 	.word	0x200010a8
 800a640:	0800daf0 	.word	0x0800daf0

0800a644 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	4907      	ldr	r1, [pc, #28]	; (800a678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a65a:	4808      	ldr	r0, [pc, #32]	; (800a67c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a65c:	f7ff fdaa 	bl	800a1b4 <USBD_GetString>
 800a660:	e004      	b.n	800a66c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	4904      	ldr	r1, [pc, #16]	; (800a678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a666:	4805      	ldr	r0, [pc, #20]	; (800a67c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a668:	f7ff fda4 	bl	800a1b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a66c:	4b02      	ldr	r3, [pc, #8]	; (800a678 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200010a8 	.word	0x200010a8
 800a67c:	0800dafc 	.word	0x0800dafc

0800a680 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a686:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <Get_SerialNum+0x44>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a68c:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <Get_SerialNum+0x48>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a692:	4b0e      	ldr	r3, [pc, #56]	; (800a6cc <Get_SerialNum+0x4c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4413      	add	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d009      	beq.n	800a6ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6a6:	2208      	movs	r2, #8
 800a6a8:	4909      	ldr	r1, [pc, #36]	; (800a6d0 <Get_SerialNum+0x50>)
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 f814 	bl	800a6d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	4908      	ldr	r1, [pc, #32]	; (800a6d4 <Get_SerialNum+0x54>)
 800a6b4:	68b8      	ldr	r0, [r7, #8]
 800a6b6:	f000 f80f 	bl	800a6d8 <IntToUnicode>
  }
}
 800a6ba:	bf00      	nop
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	1fff7a10 	.word	0x1fff7a10
 800a6c8:	1fff7a14 	.word	0x1fff7a14
 800a6cc:	1fff7a18 	.word	0x1fff7a18
 800a6d0:	20000196 	.word	0x20000196
 800a6d4:	200001a6 	.word	0x200001a6

0800a6d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	75fb      	strb	r3, [r7, #23]
 800a6ee:	e027      	b.n	800a740 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	0f1b      	lsrs	r3, r3, #28
 800a6f4:	2b09      	cmp	r3, #9
 800a6f6:	d80b      	bhi.n	800a710 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	0f1b      	lsrs	r3, r3, #28
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
 800a700:	005b      	lsls	r3, r3, #1
 800a702:	4619      	mov	r1, r3
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	440b      	add	r3, r1
 800a708:	3230      	adds	r2, #48	; 0x30
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	701a      	strb	r2, [r3, #0]
 800a70e:	e00a      	b.n	800a726 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	0f1b      	lsrs	r3, r3, #28
 800a714:	b2da      	uxtb	r2, r3
 800a716:	7dfb      	ldrb	r3, [r7, #23]
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	4619      	mov	r1, r3
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	440b      	add	r3, r1
 800a720:	3237      	adds	r2, #55	; 0x37
 800a722:	b2d2      	uxtb	r2, r2
 800a724:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	011b      	lsls	r3, r3, #4
 800a72a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
 800a72e:	005b      	lsls	r3, r3, #1
 800a730:	3301      	adds	r3, #1
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	4413      	add	r3, r2
 800a736:	2200      	movs	r2, #0
 800a738:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	3301      	adds	r3, #1
 800a73e:	75fb      	strb	r3, [r7, #23]
 800a740:	7dfa      	ldrb	r2, [r7, #23]
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	429a      	cmp	r2, r3
 800a746:	d3d3      	bcc.n	800a6f0 <IntToUnicode+0x18>
  }
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	bc80      	pop	{r7}
 800a752:	4770      	bx	lr

0800a754 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08a      	sub	sp, #40	; 0x28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a75c:	f107 0314 	add.w	r3, r7, #20
 800a760:	2200      	movs	r2, #0
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	605a      	str	r2, [r3, #4]
 800a766:	609a      	str	r2, [r3, #8]
 800a768:	60da      	str	r2, [r3, #12]
 800a76a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a774:	d147      	bne.n	800a806 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a776:	2300      	movs	r3, #0
 800a778:	613b      	str	r3, [r7, #16]
 800a77a:	4b25      	ldr	r3, [pc, #148]	; (800a810 <HAL_PCD_MspInit+0xbc>)
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	4a24      	ldr	r2, [pc, #144]	; (800a810 <HAL_PCD_MspInit+0xbc>)
 800a780:	f043 0301 	orr.w	r3, r3, #1
 800a784:	6313      	str	r3, [r2, #48]	; 0x30
 800a786:	4b22      	ldr	r3, [pc, #136]	; (800a810 <HAL_PCD_MspInit+0xbc>)
 800a788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	613b      	str	r3, [r7, #16]
 800a790:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a792:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a798:	2300      	movs	r3, #0
 800a79a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7a0:	f107 0314 	add.w	r3, r7, #20
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	481b      	ldr	r0, [pc, #108]	; (800a814 <HAL_PCD_MspInit+0xc0>)
 800a7a8:	f7f9 fd2e 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a7ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a7b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7be:	230a      	movs	r3, #10
 800a7c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7c2:	f107 0314 	add.w	r3, r7, #20
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4812      	ldr	r0, [pc, #72]	; (800a814 <HAL_PCD_MspInit+0xc0>)
 800a7ca:	f7f9 fd1d 	bl	8004208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a7ce:	4b10      	ldr	r3, [pc, #64]	; (800a810 <HAL_PCD_MspInit+0xbc>)
 800a7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d2:	4a0f      	ldr	r2, [pc, #60]	; (800a810 <HAL_PCD_MspInit+0xbc>)
 800a7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d8:	6353      	str	r3, [r2, #52]	; 0x34
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	4b0c      	ldr	r3, [pc, #48]	; (800a810 <HAL_PCD_MspInit+0xbc>)
 800a7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e2:	4a0b      	ldr	r2, [pc, #44]	; (800a810 <HAL_PCD_MspInit+0xbc>)
 800a7e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a7ea:	4b09      	ldr	r3, [pc, #36]	; (800a810 <HAL_PCD_MspInit+0xbc>)
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	2043      	movs	r0, #67	; 0x43
 800a7fc:	f7f9 fccd 	bl	800419a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a800:	2043      	movs	r0, #67	; 0x43
 800a802:	f7f9 fce6 	bl	80041d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a806:	bf00      	nop
 800a808:	3728      	adds	r7, #40	; 0x28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	40023800 	.word	0x40023800
 800a814:	40020000 	.word	0x40020000

0800a818 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a82c:	4619      	mov	r1, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	f7fe fd57 	bl	80092e2 <USBD_LL_SetupStage>
}
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800a84e:	78fa      	ldrb	r2, [r7, #3]
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	4613      	mov	r3, r2
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	440b      	add	r3, r1
 800a85c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	78fb      	ldrb	r3, [r7, #3]
 800a864:	4619      	mov	r1, r3
 800a866:	f7fe fd89 	bl	800937c <USBD_LL_DataOutStage>
}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	460b      	mov	r3, r1
 800a87c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800a884:	78fa      	ldrb	r2, [r7, #3]
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	4613      	mov	r3, r2
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	4413      	add	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	440b      	add	r3, r1
 800a892:	3348      	adds	r3, #72	; 0x48
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	78fb      	ldrb	r3, [r7, #3]
 800a898:	4619      	mov	r1, r3
 800a89a:	f7fe fde0 	bl	800945e <USBD_LL_DataInStage>
}
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe fef0 	bl	800969a <USBD_LL_SOF>
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d102      	bne.n	800a8dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]
 800a8da:	e008      	b.n	800a8ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d102      	bne.n	800a8ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	73fb      	strb	r3, [r7, #15]
 800a8e8:	e001      	b.n	800a8ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a8ea:	f7f7 ff34 	bl	8002756 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a8f4:	7bfa      	ldrb	r2, [r7, #15]
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fe fe96 	bl	800962a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a904:	4618      	mov	r0, r3
 800a906:	f7fe fe4f 	bl	80095a8 <USBD_LL_Reset>
}
 800a90a:	bf00      	nop
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a922:	4618      	mov	r0, r3
 800a924:	f7fe fe90 	bl	8009648 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	6812      	ldr	r2, [r2, #0]
 800a936:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a93a:	f043 0301 	orr.w	r3, r3, #1
 800a93e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d005      	beq.n	800a954 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a948:	4b04      	ldr	r3, [pc, #16]	; (800a95c <HAL_PCD_SuspendCallback+0x48>)
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	4a03      	ldr	r2, [pc, #12]	; (800a95c <HAL_PCD_SuspendCallback+0x48>)
 800a94e:	f043 0306 	orr.w	r3, r3, #6
 800a952:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a954:	bf00      	nop
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	e000ed00 	.word	0xe000ed00

0800a960 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe fe7e 	bl	8009670 <USBD_LL_Resume>
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a98e:	78fa      	ldrb	r2, [r7, #3]
 800a990:	4611      	mov	r1, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f7fe fea7 	bl	80096e6 <USBD_LL_IsoOUTIncomplete>
}
 800a998:	bf00      	nop
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a9b2:	78fa      	ldrb	r2, [r7, #3]
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe fe89 	bl	80096ce <USBD_LL_IsoINIncomplete>
}
 800a9bc:	bf00      	nop
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe fe93 	bl	80096fe <USBD_LL_DevConnected>
}
 800a9d8:	bf00      	nop
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fe8f 	bl	8009712 <USBD_LL_DevDisconnected>
}
 800a9f4:	bf00      	nop
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d139      	bne.n	800aa80 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa0c:	4a1f      	ldr	r2, [pc, #124]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a1d      	ldr	r2, [pc, #116]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa1c:	4b1b      	ldr	r3, [pc, #108]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aa22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aa24:	4b19      	ldr	r3, [pc, #100]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa26:	2204      	movs	r2, #4
 800aa28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aa2a:	4b18      	ldr	r3, [pc, #96]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa30:	4b16      	ldr	r3, [pc, #88]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aa36:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa38:	2202      	movs	r2, #2
 800aa3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aa3c:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aa42:	4b12      	ldr	r3, [pc, #72]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aa48:	4b10      	ldr	r3, [pc, #64]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aa4e:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aa54:	480d      	ldr	r0, [pc, #52]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa56:	f7f9 fda6 	bl	80045a6 <HAL_PCD_Init>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800aa60:	f7f7 fe79 	bl	8002756 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aa64:	2180      	movs	r1, #128	; 0x80
 800aa66:	4809      	ldr	r0, [pc, #36]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa68:	f7fa ffbe 	bl	80059e8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aa6c:	2240      	movs	r2, #64	; 0x40
 800aa6e:	2100      	movs	r1, #0
 800aa70:	4806      	ldr	r0, [pc, #24]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa72:	f7fa ff73 	bl	800595c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aa76:	2280      	movs	r2, #128	; 0x80
 800aa78:	2101      	movs	r1, #1
 800aa7a:	4804      	ldr	r0, [pc, #16]	; (800aa8c <USBD_LL_Init+0x90>)
 800aa7c:	f7fa ff6e 	bl	800595c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	200012a8 	.word	0x200012a8

0800aa90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7f9 fe9a 	bl	80047e0 <HAL_PCD_Start>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 f92e 	bl	800ad14 <USBD_Get_USB_Status>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	4608      	mov	r0, r1
 800aad0:	4611      	mov	r1, r2
 800aad2:	461a      	mov	r2, r3
 800aad4:	4603      	mov	r3, r0
 800aad6:	70fb      	strb	r3, [r7, #3]
 800aad8:	460b      	mov	r3, r1
 800aada:	70bb      	strb	r3, [r7, #2]
 800aadc:	4613      	mov	r3, r2
 800aade:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaee:	78bb      	ldrb	r3, [r7, #2]
 800aaf0:	883a      	ldrh	r2, [r7, #0]
 800aaf2:	78f9      	ldrb	r1, [r7, #3]
 800aaf4:	f7fa fb4c 	bl	8005190 <HAL_PCD_EP_Open>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 f908 	bl	800ad14 <USBD_Get_USB_Status>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab2c:	78fa      	ldrb	r2, [r7, #3]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fa fb95 	bl	8005260 <HAL_PCD_EP_Close>
 800ab36:	4603      	mov	r3, r0
 800ab38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 f8e9 	bl	800ad14 <USBD_Get_USB_Status>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab6a:	78fa      	ldrb	r2, [r7, #3]
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fa fc4e 	bl	8005410 <HAL_PCD_EP_SetStall>
 800ab74:	4603      	mov	r3, r0
 800ab76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 f8ca 	bl	800ad14 <USBD_Get_USB_Status>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	460b      	mov	r3, r1
 800ab98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aba8:	78fa      	ldrb	r2, [r7, #3]
 800abaa:	4611      	mov	r1, r2
 800abac:	4618      	mov	r0, r3
 800abae:	f7fa fc93 	bl	80054d8 <HAL_PCD_EP_ClrStall>
 800abb2:	4603      	mov	r3, r0
 800abb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 f8ab 	bl	800ad14 <USBD_Get_USB_Status>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800abe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	da0b      	bge.n	800ac00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800abe8:	78fb      	ldrb	r3, [r7, #3]
 800abea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abee:	68f9      	ldr	r1, [r7, #12]
 800abf0:	4613      	mov	r3, r2
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	333e      	adds	r3, #62	; 0x3e
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	e00b      	b.n	800ac18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac06:	68f9      	ldr	r1, [r7, #12]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	440b      	add	r3, r1
 800ac12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ac16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bc80      	pop	{r7}
 800ac20:	4770      	bx	lr

0800ac22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac3c:	78fa      	ldrb	r2, [r7, #3]
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fa fa80 	bl	8005146 <HAL_PCD_SetAddress>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f000 f861 	bl	800ad14 <USBD_Get_USB_Status>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	72fb      	strb	r3, [r7, #11]
 800ac70:	4613      	mov	r3, r2
 800ac72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac82:	893b      	ldrh	r3, [r7, #8]
 800ac84:	7af9      	ldrb	r1, [r7, #11]
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	f7fa fb87 	bl	800539a <HAL_PCD_EP_Transmit>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac90:	7dfb      	ldrb	r3, [r7, #23]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 f83e 	bl	800ad14 <USBD_Get_USB_Status>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b086      	sub	sp, #24
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	607a      	str	r2, [r7, #4]
 800acb0:	461a      	mov	r2, r3
 800acb2:	460b      	mov	r3, r1
 800acb4:	72fb      	strb	r3, [r7, #11]
 800acb6:	4613      	mov	r3, r2
 800acb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acc8:	893b      	ldrh	r3, [r7, #8]
 800acca:	7af9      	ldrb	r1, [r7, #11]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	f7fa fb11 	bl	80052f4 <HAL_PCD_EP_Receive>
 800acd2:	4603      	mov	r3, r0
 800acd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 f81b 	bl	800ad14 <USBD_Get_USB_Status>
 800acde:	4603      	mov	r3, r0
 800ace0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ace2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acfe:	78fa      	ldrb	r2, [r7, #3]
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fa fb32 	bl	800536c <HAL_PCD_EP_GetRxCount>
 800ad08:	4603      	mov	r3, r0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d817      	bhi.n	800ad58 <USBD_Get_USB_Status+0x44>
 800ad28:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <USBD_Get_USB_Status+0x1c>)
 800ad2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2e:	bf00      	nop
 800ad30:	0800ad41 	.word	0x0800ad41
 800ad34:	0800ad47 	.word	0x0800ad47
 800ad38:	0800ad4d 	.word	0x0800ad4d
 800ad3c:	0800ad53 	.word	0x0800ad53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]
    break;
 800ad44:	e00b      	b.n	800ad5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad46:	2302      	movs	r3, #2
 800ad48:	73fb      	strb	r3, [r7, #15]
    break;
 800ad4a:	e008      	b.n	800ad5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad50:	e005      	b.n	800ad5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad52:	2302      	movs	r3, #2
 800ad54:	73fb      	strb	r3, [r7, #15]
    break;
 800ad56:	e002      	b.n	800ad5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad5c:	bf00      	nop
  }
  return usb_status;
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bc80      	pop	{r7}
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop

0800ad6c <malloc>:
 800ad6c:	4b02      	ldr	r3, [pc, #8]	; (800ad78 <malloc+0xc>)
 800ad6e:	4601      	mov	r1, r0
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	f000 b82b 	b.w	800adcc <_malloc_r>
 800ad76:	bf00      	nop
 800ad78:	20000208 	.word	0x20000208

0800ad7c <free>:
 800ad7c:	4b02      	ldr	r3, [pc, #8]	; (800ad88 <free+0xc>)
 800ad7e:	4601      	mov	r1, r0
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	f001 bd1d 	b.w	800c7c0 <_free_r>
 800ad86:	bf00      	nop
 800ad88:	20000208 	.word	0x20000208

0800ad8c <sbrk_aligned>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	4e0e      	ldr	r6, [pc, #56]	; (800adc8 <sbrk_aligned+0x3c>)
 800ad90:	460c      	mov	r4, r1
 800ad92:	6831      	ldr	r1, [r6, #0]
 800ad94:	4605      	mov	r5, r0
 800ad96:	b911      	cbnz	r1, 800ad9e <sbrk_aligned+0x12>
 800ad98:	f000 fe48 	bl	800ba2c <_sbrk_r>
 800ad9c:	6030      	str	r0, [r6, #0]
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4628      	mov	r0, r5
 800ada2:	f000 fe43 	bl	800ba2c <_sbrk_r>
 800ada6:	1c43      	adds	r3, r0, #1
 800ada8:	d00a      	beq.n	800adc0 <sbrk_aligned+0x34>
 800adaa:	1cc4      	adds	r4, r0, #3
 800adac:	f024 0403 	bic.w	r4, r4, #3
 800adb0:	42a0      	cmp	r0, r4
 800adb2:	d007      	beq.n	800adc4 <sbrk_aligned+0x38>
 800adb4:	1a21      	subs	r1, r4, r0
 800adb6:	4628      	mov	r0, r5
 800adb8:	f000 fe38 	bl	800ba2c <_sbrk_r>
 800adbc:	3001      	adds	r0, #1
 800adbe:	d101      	bne.n	800adc4 <sbrk_aligned+0x38>
 800adc0:	f04f 34ff 	mov.w	r4, #4294967295
 800adc4:	4620      	mov	r0, r4
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	200017b0 	.word	0x200017b0

0800adcc <_malloc_r>:
 800adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add0:	1ccd      	adds	r5, r1, #3
 800add2:	f025 0503 	bic.w	r5, r5, #3
 800add6:	3508      	adds	r5, #8
 800add8:	2d0c      	cmp	r5, #12
 800adda:	bf38      	it	cc
 800addc:	250c      	movcc	r5, #12
 800adde:	2d00      	cmp	r5, #0
 800ade0:	4607      	mov	r7, r0
 800ade2:	db01      	blt.n	800ade8 <_malloc_r+0x1c>
 800ade4:	42a9      	cmp	r1, r5
 800ade6:	d905      	bls.n	800adf4 <_malloc_r+0x28>
 800ade8:	230c      	movs	r3, #12
 800adea:	2600      	movs	r6, #0
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	4630      	mov	r0, r6
 800adf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aec8 <_malloc_r+0xfc>
 800adf8:	f000 f868 	bl	800aecc <__malloc_lock>
 800adfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ae00:	461c      	mov	r4, r3
 800ae02:	bb5c      	cbnz	r4, 800ae5c <_malloc_r+0x90>
 800ae04:	4629      	mov	r1, r5
 800ae06:	4638      	mov	r0, r7
 800ae08:	f7ff ffc0 	bl	800ad8c <sbrk_aligned>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	4604      	mov	r4, r0
 800ae10:	d155      	bne.n	800aebe <_malloc_r+0xf2>
 800ae12:	f8d8 4000 	ldr.w	r4, [r8]
 800ae16:	4626      	mov	r6, r4
 800ae18:	2e00      	cmp	r6, #0
 800ae1a:	d145      	bne.n	800aea8 <_malloc_r+0xdc>
 800ae1c:	2c00      	cmp	r4, #0
 800ae1e:	d048      	beq.n	800aeb2 <_malloc_r+0xe6>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	4631      	mov	r1, r6
 800ae24:	4638      	mov	r0, r7
 800ae26:	eb04 0903 	add.w	r9, r4, r3
 800ae2a:	f000 fdff 	bl	800ba2c <_sbrk_r>
 800ae2e:	4581      	cmp	r9, r0
 800ae30:	d13f      	bne.n	800aeb2 <_malloc_r+0xe6>
 800ae32:	6821      	ldr	r1, [r4, #0]
 800ae34:	4638      	mov	r0, r7
 800ae36:	1a6d      	subs	r5, r5, r1
 800ae38:	4629      	mov	r1, r5
 800ae3a:	f7ff ffa7 	bl	800ad8c <sbrk_aligned>
 800ae3e:	3001      	adds	r0, #1
 800ae40:	d037      	beq.n	800aeb2 <_malloc_r+0xe6>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	442b      	add	r3, r5
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	f8d8 3000 	ldr.w	r3, [r8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d038      	beq.n	800aec2 <_malloc_r+0xf6>
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	42a2      	cmp	r2, r4
 800ae54:	d12b      	bne.n	800aeae <_malloc_r+0xe2>
 800ae56:	2200      	movs	r2, #0
 800ae58:	605a      	str	r2, [r3, #4]
 800ae5a:	e00f      	b.n	800ae7c <_malloc_r+0xb0>
 800ae5c:	6822      	ldr	r2, [r4, #0]
 800ae5e:	1b52      	subs	r2, r2, r5
 800ae60:	d41f      	bmi.n	800aea2 <_malloc_r+0xd6>
 800ae62:	2a0b      	cmp	r2, #11
 800ae64:	d917      	bls.n	800ae96 <_malloc_r+0xca>
 800ae66:	1961      	adds	r1, r4, r5
 800ae68:	42a3      	cmp	r3, r4
 800ae6a:	6025      	str	r5, [r4, #0]
 800ae6c:	bf18      	it	ne
 800ae6e:	6059      	strne	r1, [r3, #4]
 800ae70:	6863      	ldr	r3, [r4, #4]
 800ae72:	bf08      	it	eq
 800ae74:	f8c8 1000 	streq.w	r1, [r8]
 800ae78:	5162      	str	r2, [r4, r5]
 800ae7a:	604b      	str	r3, [r1, #4]
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	f104 060b 	add.w	r6, r4, #11
 800ae82:	f000 f829 	bl	800aed8 <__malloc_unlock>
 800ae86:	f026 0607 	bic.w	r6, r6, #7
 800ae8a:	1d23      	adds	r3, r4, #4
 800ae8c:	1af2      	subs	r2, r6, r3
 800ae8e:	d0ae      	beq.n	800adee <_malloc_r+0x22>
 800ae90:	1b9b      	subs	r3, r3, r6
 800ae92:	50a3      	str	r3, [r4, r2]
 800ae94:	e7ab      	b.n	800adee <_malloc_r+0x22>
 800ae96:	42a3      	cmp	r3, r4
 800ae98:	6862      	ldr	r2, [r4, #4]
 800ae9a:	d1dd      	bne.n	800ae58 <_malloc_r+0x8c>
 800ae9c:	f8c8 2000 	str.w	r2, [r8]
 800aea0:	e7ec      	b.n	800ae7c <_malloc_r+0xb0>
 800aea2:	4623      	mov	r3, r4
 800aea4:	6864      	ldr	r4, [r4, #4]
 800aea6:	e7ac      	b.n	800ae02 <_malloc_r+0x36>
 800aea8:	4634      	mov	r4, r6
 800aeaa:	6876      	ldr	r6, [r6, #4]
 800aeac:	e7b4      	b.n	800ae18 <_malloc_r+0x4c>
 800aeae:	4613      	mov	r3, r2
 800aeb0:	e7cc      	b.n	800ae4c <_malloc_r+0x80>
 800aeb2:	230c      	movs	r3, #12
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	603b      	str	r3, [r7, #0]
 800aeb8:	f000 f80e 	bl	800aed8 <__malloc_unlock>
 800aebc:	e797      	b.n	800adee <_malloc_r+0x22>
 800aebe:	6025      	str	r5, [r4, #0]
 800aec0:	e7dc      	b.n	800ae7c <_malloc_r+0xb0>
 800aec2:	605b      	str	r3, [r3, #4]
 800aec4:	deff      	udf	#255	; 0xff
 800aec6:	bf00      	nop
 800aec8:	200017ac 	.word	0x200017ac

0800aecc <__malloc_lock>:
 800aecc:	4801      	ldr	r0, [pc, #4]	; (800aed4 <__malloc_lock+0x8>)
 800aece:	f000 bdfa 	b.w	800bac6 <__retarget_lock_acquire_recursive>
 800aed2:	bf00      	nop
 800aed4:	200018f4 	.word	0x200018f4

0800aed8 <__malloc_unlock>:
 800aed8:	4801      	ldr	r0, [pc, #4]	; (800aee0 <__malloc_unlock+0x8>)
 800aeda:	f000 bdf5 	b.w	800bac8 <__retarget_lock_release_recursive>
 800aede:	bf00      	nop
 800aee0:	200018f4 	.word	0x200018f4

0800aee4 <__cvt>:
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeea:	461f      	mov	r7, r3
 800aeec:	bfbb      	ittet	lt
 800aeee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800aef2:	461f      	movlt	r7, r3
 800aef4:	2300      	movge	r3, #0
 800aef6:	232d      	movlt	r3, #45	; 0x2d
 800aef8:	b088      	sub	sp, #32
 800aefa:	4614      	mov	r4, r2
 800aefc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aefe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800af00:	7013      	strb	r3, [r2, #0]
 800af02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af04:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800af08:	f023 0820 	bic.w	r8, r3, #32
 800af0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af10:	d005      	beq.n	800af1e <__cvt+0x3a>
 800af12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af16:	d100      	bne.n	800af1a <__cvt+0x36>
 800af18:	3501      	adds	r5, #1
 800af1a:	2302      	movs	r3, #2
 800af1c:	e000      	b.n	800af20 <__cvt+0x3c>
 800af1e:	2303      	movs	r3, #3
 800af20:	aa07      	add	r2, sp, #28
 800af22:	9204      	str	r2, [sp, #16]
 800af24:	aa06      	add	r2, sp, #24
 800af26:	e9cd a202 	strd	sl, r2, [sp, #8]
 800af2a:	e9cd 3500 	strd	r3, r5, [sp]
 800af2e:	4622      	mov	r2, r4
 800af30:	463b      	mov	r3, r7
 800af32:	f000 fe61 	bl	800bbf8 <_dtoa_r>
 800af36:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af3a:	4606      	mov	r6, r0
 800af3c:	d102      	bne.n	800af44 <__cvt+0x60>
 800af3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af40:	07db      	lsls	r3, r3, #31
 800af42:	d522      	bpl.n	800af8a <__cvt+0xa6>
 800af44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af48:	eb06 0905 	add.w	r9, r6, r5
 800af4c:	d110      	bne.n	800af70 <__cvt+0x8c>
 800af4e:	7833      	ldrb	r3, [r6, #0]
 800af50:	2b30      	cmp	r3, #48	; 0x30
 800af52:	d10a      	bne.n	800af6a <__cvt+0x86>
 800af54:	2200      	movs	r2, #0
 800af56:	2300      	movs	r3, #0
 800af58:	4620      	mov	r0, r4
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 fd60 	bl	8000a20 <__aeabi_dcmpeq>
 800af60:	b918      	cbnz	r0, 800af6a <__cvt+0x86>
 800af62:	f1c5 0501 	rsb	r5, r5, #1
 800af66:	f8ca 5000 	str.w	r5, [sl]
 800af6a:	f8da 3000 	ldr.w	r3, [sl]
 800af6e:	4499      	add	r9, r3
 800af70:	2200      	movs	r2, #0
 800af72:	2300      	movs	r3, #0
 800af74:	4620      	mov	r0, r4
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 fd52 	bl	8000a20 <__aeabi_dcmpeq>
 800af7c:	b108      	cbz	r0, 800af82 <__cvt+0x9e>
 800af7e:	f8cd 901c 	str.w	r9, [sp, #28]
 800af82:	2230      	movs	r2, #48	; 0x30
 800af84:	9b07      	ldr	r3, [sp, #28]
 800af86:	454b      	cmp	r3, r9
 800af88:	d307      	bcc.n	800af9a <__cvt+0xb6>
 800af8a:	4630      	mov	r0, r6
 800af8c:	9b07      	ldr	r3, [sp, #28]
 800af8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af90:	1b9b      	subs	r3, r3, r6
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	b008      	add	sp, #32
 800af96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af9a:	1c59      	adds	r1, r3, #1
 800af9c:	9107      	str	r1, [sp, #28]
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	e7f0      	b.n	800af84 <__cvt+0xa0>

0800afa2 <__exponent>:
 800afa2:	4603      	mov	r3, r0
 800afa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afa6:	2900      	cmp	r1, #0
 800afa8:	f803 2b02 	strb.w	r2, [r3], #2
 800afac:	bfb6      	itet	lt
 800afae:	222d      	movlt	r2, #45	; 0x2d
 800afb0:	222b      	movge	r2, #43	; 0x2b
 800afb2:	4249      	neglt	r1, r1
 800afb4:	2909      	cmp	r1, #9
 800afb6:	7042      	strb	r2, [r0, #1]
 800afb8:	dd2a      	ble.n	800b010 <__exponent+0x6e>
 800afba:	f10d 0207 	add.w	r2, sp, #7
 800afbe:	4617      	mov	r7, r2
 800afc0:	260a      	movs	r6, #10
 800afc2:	fb91 f5f6 	sdiv	r5, r1, r6
 800afc6:	4694      	mov	ip, r2
 800afc8:	fb06 1415 	mls	r4, r6, r5, r1
 800afcc:	3430      	adds	r4, #48	; 0x30
 800afce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800afd2:	460c      	mov	r4, r1
 800afd4:	2c63      	cmp	r4, #99	; 0x63
 800afd6:	4629      	mov	r1, r5
 800afd8:	f102 32ff 	add.w	r2, r2, #4294967295
 800afdc:	dcf1      	bgt.n	800afc2 <__exponent+0x20>
 800afde:	3130      	adds	r1, #48	; 0x30
 800afe0:	f1ac 0402 	sub.w	r4, ip, #2
 800afe4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800afe8:	4622      	mov	r2, r4
 800afea:	1c41      	adds	r1, r0, #1
 800afec:	42ba      	cmp	r2, r7
 800afee:	d30a      	bcc.n	800b006 <__exponent+0x64>
 800aff0:	f10d 0209 	add.w	r2, sp, #9
 800aff4:	eba2 020c 	sub.w	r2, r2, ip
 800aff8:	42bc      	cmp	r4, r7
 800affa:	bf88      	it	hi
 800affc:	2200      	movhi	r2, #0
 800affe:	4413      	add	r3, r2
 800b000:	1a18      	subs	r0, r3, r0
 800b002:	b003      	add	sp, #12
 800b004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b006:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b00a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b00e:	e7ed      	b.n	800afec <__exponent+0x4a>
 800b010:	2330      	movs	r3, #48	; 0x30
 800b012:	3130      	adds	r1, #48	; 0x30
 800b014:	7083      	strb	r3, [r0, #2]
 800b016:	70c1      	strb	r1, [r0, #3]
 800b018:	1d03      	adds	r3, r0, #4
 800b01a:	e7f1      	b.n	800b000 <__exponent+0x5e>

0800b01c <_printf_float>:
 800b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b020:	b091      	sub	sp, #68	; 0x44
 800b022:	460c      	mov	r4, r1
 800b024:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b028:	4616      	mov	r6, r2
 800b02a:	461f      	mov	r7, r3
 800b02c:	4605      	mov	r5, r0
 800b02e:	f000 fcc5 	bl	800b9bc <_localeconv_r>
 800b032:	6803      	ldr	r3, [r0, #0]
 800b034:	4618      	mov	r0, r3
 800b036:	9309      	str	r3, [sp, #36]	; 0x24
 800b038:	f7f5 f8c6 	bl	80001c8 <strlen>
 800b03c:	2300      	movs	r3, #0
 800b03e:	930e      	str	r3, [sp, #56]	; 0x38
 800b040:	f8d8 3000 	ldr.w	r3, [r8]
 800b044:	900a      	str	r0, [sp, #40]	; 0x28
 800b046:	3307      	adds	r3, #7
 800b048:	f023 0307 	bic.w	r3, r3, #7
 800b04c:	f103 0208 	add.w	r2, r3, #8
 800b050:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b054:	f8d4 b000 	ldr.w	fp, [r4]
 800b058:	f8c8 2000 	str.w	r2, [r8]
 800b05c:	e9d3 a800 	ldrd	sl, r8, [r3]
 800b060:	4652      	mov	r2, sl
 800b062:	4643      	mov	r3, r8
 800b064:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b068:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800b06c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b06e:	f04f 32ff 	mov.w	r2, #4294967295
 800b072:	4650      	mov	r0, sl
 800b074:	4b9c      	ldr	r3, [pc, #624]	; (800b2e8 <_printf_float+0x2cc>)
 800b076:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b078:	f7f5 fd04 	bl	8000a84 <__aeabi_dcmpun>
 800b07c:	bb70      	cbnz	r0, 800b0dc <_printf_float+0xc0>
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	4650      	mov	r0, sl
 800b084:	4b98      	ldr	r3, [pc, #608]	; (800b2e8 <_printf_float+0x2cc>)
 800b086:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b088:	f7f5 fcde 	bl	8000a48 <__aeabi_dcmple>
 800b08c:	bb30      	cbnz	r0, 800b0dc <_printf_float+0xc0>
 800b08e:	2200      	movs	r2, #0
 800b090:	2300      	movs	r3, #0
 800b092:	4650      	mov	r0, sl
 800b094:	4641      	mov	r1, r8
 800b096:	f7f5 fccd 	bl	8000a34 <__aeabi_dcmplt>
 800b09a:	b110      	cbz	r0, 800b0a2 <_printf_float+0x86>
 800b09c:	232d      	movs	r3, #45	; 0x2d
 800b09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a2:	4a92      	ldr	r2, [pc, #584]	; (800b2ec <_printf_float+0x2d0>)
 800b0a4:	4b92      	ldr	r3, [pc, #584]	; (800b2f0 <_printf_float+0x2d4>)
 800b0a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b0aa:	bf94      	ite	ls
 800b0ac:	4690      	movls	r8, r2
 800b0ae:	4698      	movhi	r8, r3
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	f04f 0a00 	mov.w	sl, #0
 800b0b6:	6123      	str	r3, [r4, #16]
 800b0b8:	f02b 0304 	bic.w	r3, fp, #4
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	4633      	mov	r3, r6
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	9700      	str	r7, [sp, #0]
 800b0c6:	aa0f      	add	r2, sp, #60	; 0x3c
 800b0c8:	f000 f9d6 	bl	800b478 <_printf_common>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f040 8090 	bne.w	800b1f2 <_printf_float+0x1d6>
 800b0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d6:	b011      	add	sp, #68	; 0x44
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	4652      	mov	r2, sl
 800b0de:	4643      	mov	r3, r8
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	4641      	mov	r1, r8
 800b0e4:	f7f5 fcce 	bl	8000a84 <__aeabi_dcmpun>
 800b0e8:	b148      	cbz	r0, 800b0fe <_printf_float+0xe2>
 800b0ea:	f1b8 0f00 	cmp.w	r8, #0
 800b0ee:	bfb8      	it	lt
 800b0f0:	232d      	movlt	r3, #45	; 0x2d
 800b0f2:	4a80      	ldr	r2, [pc, #512]	; (800b2f4 <_printf_float+0x2d8>)
 800b0f4:	bfb8      	it	lt
 800b0f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0fa:	4b7f      	ldr	r3, [pc, #508]	; (800b2f8 <_printf_float+0x2dc>)
 800b0fc:	e7d3      	b.n	800b0a6 <_printf_float+0x8a>
 800b0fe:	6863      	ldr	r3, [r4, #4]
 800b100:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b104:	1c5a      	adds	r2, r3, #1
 800b106:	d142      	bne.n	800b18e <_printf_float+0x172>
 800b108:	2306      	movs	r3, #6
 800b10a:	6063      	str	r3, [r4, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	9206      	str	r2, [sp, #24]
 800b110:	aa0e      	add	r2, sp, #56	; 0x38
 800b112:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b116:	aa0d      	add	r2, sp, #52	; 0x34
 800b118:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b11c:	9203      	str	r2, [sp, #12]
 800b11e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b122:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b126:	6023      	str	r3, [r4, #0]
 800b128:	6863      	ldr	r3, [r4, #4]
 800b12a:	4652      	mov	r2, sl
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	4628      	mov	r0, r5
 800b130:	4643      	mov	r3, r8
 800b132:	910b      	str	r1, [sp, #44]	; 0x2c
 800b134:	f7ff fed6 	bl	800aee4 <__cvt>
 800b138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b13a:	4680      	mov	r8, r0
 800b13c:	2947      	cmp	r1, #71	; 0x47
 800b13e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b140:	d108      	bne.n	800b154 <_printf_float+0x138>
 800b142:	1cc8      	adds	r0, r1, #3
 800b144:	db02      	blt.n	800b14c <_printf_float+0x130>
 800b146:	6863      	ldr	r3, [r4, #4]
 800b148:	4299      	cmp	r1, r3
 800b14a:	dd40      	ble.n	800b1ce <_printf_float+0x1b2>
 800b14c:	f1a9 0902 	sub.w	r9, r9, #2
 800b150:	fa5f f989 	uxtb.w	r9, r9
 800b154:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b158:	d81f      	bhi.n	800b19a <_printf_float+0x17e>
 800b15a:	464a      	mov	r2, r9
 800b15c:	3901      	subs	r1, #1
 800b15e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b162:	910d      	str	r1, [sp, #52]	; 0x34
 800b164:	f7ff ff1d 	bl	800afa2 <__exponent>
 800b168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b16a:	4682      	mov	sl, r0
 800b16c:	1813      	adds	r3, r2, r0
 800b16e:	2a01      	cmp	r2, #1
 800b170:	6123      	str	r3, [r4, #16]
 800b172:	dc02      	bgt.n	800b17a <_printf_float+0x15e>
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	07d2      	lsls	r2, r2, #31
 800b178:	d501      	bpl.n	800b17e <_printf_float+0x162>
 800b17a:	3301      	adds	r3, #1
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b182:	2b00      	cmp	r3, #0
 800b184:	d09b      	beq.n	800b0be <_printf_float+0xa2>
 800b186:	232d      	movs	r3, #45	; 0x2d
 800b188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b18c:	e797      	b.n	800b0be <_printf_float+0xa2>
 800b18e:	2947      	cmp	r1, #71	; 0x47
 800b190:	d1bc      	bne.n	800b10c <_printf_float+0xf0>
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1ba      	bne.n	800b10c <_printf_float+0xf0>
 800b196:	2301      	movs	r3, #1
 800b198:	e7b7      	b.n	800b10a <_printf_float+0xee>
 800b19a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b19e:	d118      	bne.n	800b1d2 <_printf_float+0x1b6>
 800b1a0:	2900      	cmp	r1, #0
 800b1a2:	6863      	ldr	r3, [r4, #4]
 800b1a4:	dd0b      	ble.n	800b1be <_printf_float+0x1a2>
 800b1a6:	6121      	str	r1, [r4, #16]
 800b1a8:	b913      	cbnz	r3, 800b1b0 <_printf_float+0x194>
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	07d0      	lsls	r0, r2, #31
 800b1ae:	d502      	bpl.n	800b1b6 <_printf_float+0x19a>
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	440b      	add	r3, r1
 800b1b4:	6123      	str	r3, [r4, #16]
 800b1b6:	f04f 0a00 	mov.w	sl, #0
 800b1ba:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1bc:	e7df      	b.n	800b17e <_printf_float+0x162>
 800b1be:	b913      	cbnz	r3, 800b1c6 <_printf_float+0x1aa>
 800b1c0:	6822      	ldr	r2, [r4, #0]
 800b1c2:	07d2      	lsls	r2, r2, #31
 800b1c4:	d501      	bpl.n	800b1ca <_printf_float+0x1ae>
 800b1c6:	3302      	adds	r3, #2
 800b1c8:	e7f4      	b.n	800b1b4 <_printf_float+0x198>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e7f2      	b.n	800b1b4 <_printf_float+0x198>
 800b1ce:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b1d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	db05      	blt.n	800b1e4 <_printf_float+0x1c8>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	6121      	str	r1, [r4, #16]
 800b1dc:	07d8      	lsls	r0, r3, #31
 800b1de:	d5ea      	bpl.n	800b1b6 <_printf_float+0x19a>
 800b1e0:	1c4b      	adds	r3, r1, #1
 800b1e2:	e7e7      	b.n	800b1b4 <_printf_float+0x198>
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	bfcc      	ite	gt
 800b1e8:	2201      	movgt	r2, #1
 800b1ea:	f1c1 0202 	rsble	r2, r1, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	e7e0      	b.n	800b1b4 <_printf_float+0x198>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	055a      	lsls	r2, r3, #21
 800b1f6:	d407      	bmi.n	800b208 <_printf_float+0x1ec>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	4642      	mov	r2, r8
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	d12b      	bne.n	800b25e <_printf_float+0x242>
 800b206:	e764      	b.n	800b0d2 <_printf_float+0xb6>
 800b208:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b20c:	f240 80dd 	bls.w	800b3ca <_printf_float+0x3ae>
 800b210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b214:	2200      	movs	r2, #0
 800b216:	2300      	movs	r3, #0
 800b218:	f7f5 fc02 	bl	8000a20 <__aeabi_dcmpeq>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d033      	beq.n	800b288 <_printf_float+0x26c>
 800b220:	2301      	movs	r3, #1
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	4a35      	ldr	r2, [pc, #212]	; (800b2fc <_printf_float+0x2e0>)
 800b228:	47b8      	blx	r7
 800b22a:	3001      	adds	r0, #1
 800b22c:	f43f af51 	beq.w	800b0d2 <_printf_float+0xb6>
 800b230:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b234:	429a      	cmp	r2, r3
 800b236:	db02      	blt.n	800b23e <_printf_float+0x222>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	07d8      	lsls	r0, r3, #31
 800b23c:	d50f      	bpl.n	800b25e <_printf_float+0x242>
 800b23e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b242:	4631      	mov	r1, r6
 800b244:	4628      	mov	r0, r5
 800b246:	47b8      	blx	r7
 800b248:	3001      	adds	r0, #1
 800b24a:	f43f af42 	beq.w	800b0d2 <_printf_float+0xb6>
 800b24e:	f04f 0800 	mov.w	r8, #0
 800b252:	f104 091a 	add.w	r9, r4, #26
 800b256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b258:	3b01      	subs	r3, #1
 800b25a:	4543      	cmp	r3, r8
 800b25c:	dc09      	bgt.n	800b272 <_printf_float+0x256>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	079b      	lsls	r3, r3, #30
 800b262:	f100 8104 	bmi.w	800b46e <_printf_float+0x452>
 800b266:	68e0      	ldr	r0, [r4, #12]
 800b268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b26a:	4298      	cmp	r0, r3
 800b26c:	bfb8      	it	lt
 800b26e:	4618      	movlt	r0, r3
 800b270:	e731      	b.n	800b0d6 <_printf_float+0xba>
 800b272:	2301      	movs	r3, #1
 800b274:	464a      	mov	r2, r9
 800b276:	4631      	mov	r1, r6
 800b278:	4628      	mov	r0, r5
 800b27a:	47b8      	blx	r7
 800b27c:	3001      	adds	r0, #1
 800b27e:	f43f af28 	beq.w	800b0d2 <_printf_float+0xb6>
 800b282:	f108 0801 	add.w	r8, r8, #1
 800b286:	e7e6      	b.n	800b256 <_printf_float+0x23a>
 800b288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dc38      	bgt.n	800b300 <_printf_float+0x2e4>
 800b28e:	2301      	movs	r3, #1
 800b290:	4631      	mov	r1, r6
 800b292:	4628      	mov	r0, r5
 800b294:	4a19      	ldr	r2, [pc, #100]	; (800b2fc <_printf_float+0x2e0>)
 800b296:	47b8      	blx	r7
 800b298:	3001      	adds	r0, #1
 800b29a:	f43f af1a 	beq.w	800b0d2 <_printf_float+0xb6>
 800b29e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	d102      	bne.n	800b2ac <_printf_float+0x290>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	07d9      	lsls	r1, r3, #31
 800b2aa:	d5d8      	bpl.n	800b25e <_printf_float+0x242>
 800b2ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	f43f af0b 	beq.w	800b0d2 <_printf_float+0xb6>
 800b2bc:	f04f 0900 	mov.w	r9, #0
 800b2c0:	f104 0a1a 	add.w	sl, r4, #26
 800b2c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2c6:	425b      	negs	r3, r3
 800b2c8:	454b      	cmp	r3, r9
 800b2ca:	dc01      	bgt.n	800b2d0 <_printf_float+0x2b4>
 800b2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ce:	e794      	b.n	800b1fa <_printf_float+0x1de>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	4652      	mov	r2, sl
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	f43f aef9 	beq.w	800b0d2 <_printf_float+0xb6>
 800b2e0:	f109 0901 	add.w	r9, r9, #1
 800b2e4:	e7ee      	b.n	800b2c4 <_printf_float+0x2a8>
 800b2e6:	bf00      	nop
 800b2e8:	7fefffff 	.word	0x7fefffff
 800b2ec:	0800df1c 	.word	0x0800df1c
 800b2f0:	0800df20 	.word	0x0800df20
 800b2f4:	0800df24 	.word	0x0800df24
 800b2f8:	0800df28 	.word	0x0800df28
 800b2fc:	0800df2c 	.word	0x0800df2c
 800b300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b304:	429a      	cmp	r2, r3
 800b306:	bfa8      	it	ge
 800b308:	461a      	movge	r2, r3
 800b30a:	2a00      	cmp	r2, #0
 800b30c:	4691      	mov	r9, r2
 800b30e:	dc37      	bgt.n	800b380 <_printf_float+0x364>
 800b310:	f04f 0b00 	mov.w	fp, #0
 800b314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b318:	f104 021a 	add.w	r2, r4, #26
 800b31c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b320:	ebaa 0309 	sub.w	r3, sl, r9
 800b324:	455b      	cmp	r3, fp
 800b326:	dc33      	bgt.n	800b390 <_printf_float+0x374>
 800b328:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b32c:	429a      	cmp	r2, r3
 800b32e:	db3b      	blt.n	800b3a8 <_printf_float+0x38c>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	07da      	lsls	r2, r3, #31
 800b334:	d438      	bmi.n	800b3a8 <_printf_float+0x38c>
 800b336:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b33a:	eba2 0903 	sub.w	r9, r2, r3
 800b33e:	eba2 020a 	sub.w	r2, r2, sl
 800b342:	4591      	cmp	r9, r2
 800b344:	bfa8      	it	ge
 800b346:	4691      	movge	r9, r2
 800b348:	f1b9 0f00 	cmp.w	r9, #0
 800b34c:	dc34      	bgt.n	800b3b8 <_printf_float+0x39c>
 800b34e:	f04f 0800 	mov.w	r8, #0
 800b352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b356:	f104 0a1a 	add.w	sl, r4, #26
 800b35a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b35e:	1a9b      	subs	r3, r3, r2
 800b360:	eba3 0309 	sub.w	r3, r3, r9
 800b364:	4543      	cmp	r3, r8
 800b366:	f77f af7a 	ble.w	800b25e <_printf_float+0x242>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4652      	mov	r2, sl
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	47b8      	blx	r7
 800b374:	3001      	adds	r0, #1
 800b376:	f43f aeac 	beq.w	800b0d2 <_printf_float+0xb6>
 800b37a:	f108 0801 	add.w	r8, r8, #1
 800b37e:	e7ec      	b.n	800b35a <_printf_float+0x33e>
 800b380:	4613      	mov	r3, r2
 800b382:	4631      	mov	r1, r6
 800b384:	4642      	mov	r2, r8
 800b386:	4628      	mov	r0, r5
 800b388:	47b8      	blx	r7
 800b38a:	3001      	adds	r0, #1
 800b38c:	d1c0      	bne.n	800b310 <_printf_float+0x2f4>
 800b38e:	e6a0      	b.n	800b0d2 <_printf_float+0xb6>
 800b390:	2301      	movs	r3, #1
 800b392:	4631      	mov	r1, r6
 800b394:	4628      	mov	r0, r5
 800b396:	920b      	str	r2, [sp, #44]	; 0x2c
 800b398:	47b8      	blx	r7
 800b39a:	3001      	adds	r0, #1
 800b39c:	f43f ae99 	beq.w	800b0d2 <_printf_float+0xb6>
 800b3a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3a2:	f10b 0b01 	add.w	fp, fp, #1
 800b3a6:	e7b9      	b.n	800b31c <_printf_float+0x300>
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	47b8      	blx	r7
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	d1bf      	bne.n	800b336 <_printf_float+0x31a>
 800b3b6:	e68c      	b.n	800b0d2 <_printf_float+0xb6>
 800b3b8:	464b      	mov	r3, r9
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4628      	mov	r0, r5
 800b3be:	eb08 020a 	add.w	r2, r8, sl
 800b3c2:	47b8      	blx	r7
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d1c2      	bne.n	800b34e <_printf_float+0x332>
 800b3c8:	e683      	b.n	800b0d2 <_printf_float+0xb6>
 800b3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3cc:	2a01      	cmp	r2, #1
 800b3ce:	dc01      	bgt.n	800b3d4 <_printf_float+0x3b8>
 800b3d0:	07db      	lsls	r3, r3, #31
 800b3d2:	d539      	bpl.n	800b448 <_printf_float+0x42c>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f ae77 	beq.w	800b0d2 <_printf_float+0xb6>
 800b3e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	47b8      	blx	r7
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	f43f ae6f 	beq.w	800b0d2 <_printf_float+0xb6>
 800b3f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b400:	f7f5 fb0e 	bl	8000a20 <__aeabi_dcmpeq>
 800b404:	b9d8      	cbnz	r0, 800b43e <_printf_float+0x422>
 800b406:	f109 33ff 	add.w	r3, r9, #4294967295
 800b40a:	f108 0201 	add.w	r2, r8, #1
 800b40e:	4631      	mov	r1, r6
 800b410:	4628      	mov	r0, r5
 800b412:	47b8      	blx	r7
 800b414:	3001      	adds	r0, #1
 800b416:	d10e      	bne.n	800b436 <_printf_float+0x41a>
 800b418:	e65b      	b.n	800b0d2 <_printf_float+0xb6>
 800b41a:	2301      	movs	r3, #1
 800b41c:	464a      	mov	r2, r9
 800b41e:	4631      	mov	r1, r6
 800b420:	4628      	mov	r0, r5
 800b422:	47b8      	blx	r7
 800b424:	3001      	adds	r0, #1
 800b426:	f43f ae54 	beq.w	800b0d2 <_printf_float+0xb6>
 800b42a:	f108 0801 	add.w	r8, r8, #1
 800b42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b430:	3b01      	subs	r3, #1
 800b432:	4543      	cmp	r3, r8
 800b434:	dcf1      	bgt.n	800b41a <_printf_float+0x3fe>
 800b436:	4653      	mov	r3, sl
 800b438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b43c:	e6de      	b.n	800b1fc <_printf_float+0x1e0>
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	f104 091a 	add.w	r9, r4, #26
 800b446:	e7f2      	b.n	800b42e <_printf_float+0x412>
 800b448:	2301      	movs	r3, #1
 800b44a:	4642      	mov	r2, r8
 800b44c:	e7df      	b.n	800b40e <_printf_float+0x3f2>
 800b44e:	2301      	movs	r3, #1
 800b450:	464a      	mov	r2, r9
 800b452:	4631      	mov	r1, r6
 800b454:	4628      	mov	r0, r5
 800b456:	47b8      	blx	r7
 800b458:	3001      	adds	r0, #1
 800b45a:	f43f ae3a 	beq.w	800b0d2 <_printf_float+0xb6>
 800b45e:	f108 0801 	add.w	r8, r8, #1
 800b462:	68e3      	ldr	r3, [r4, #12]
 800b464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b466:	1a5b      	subs	r3, r3, r1
 800b468:	4543      	cmp	r3, r8
 800b46a:	dcf0      	bgt.n	800b44e <_printf_float+0x432>
 800b46c:	e6fb      	b.n	800b266 <_printf_float+0x24a>
 800b46e:	f04f 0800 	mov.w	r8, #0
 800b472:	f104 0919 	add.w	r9, r4, #25
 800b476:	e7f4      	b.n	800b462 <_printf_float+0x446>

0800b478 <_printf_common>:
 800b478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b47c:	4616      	mov	r6, r2
 800b47e:	4699      	mov	r9, r3
 800b480:	688a      	ldr	r2, [r1, #8]
 800b482:	690b      	ldr	r3, [r1, #16]
 800b484:	4607      	mov	r7, r0
 800b486:	4293      	cmp	r3, r2
 800b488:	bfb8      	it	lt
 800b48a:	4613      	movlt	r3, r2
 800b48c:	6033      	str	r3, [r6, #0]
 800b48e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b492:	460c      	mov	r4, r1
 800b494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b498:	b10a      	cbz	r2, 800b49e <_printf_common+0x26>
 800b49a:	3301      	adds	r3, #1
 800b49c:	6033      	str	r3, [r6, #0]
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	0699      	lsls	r1, r3, #26
 800b4a2:	bf42      	ittt	mi
 800b4a4:	6833      	ldrmi	r3, [r6, #0]
 800b4a6:	3302      	addmi	r3, #2
 800b4a8:	6033      	strmi	r3, [r6, #0]
 800b4aa:	6825      	ldr	r5, [r4, #0]
 800b4ac:	f015 0506 	ands.w	r5, r5, #6
 800b4b0:	d106      	bne.n	800b4c0 <_printf_common+0x48>
 800b4b2:	f104 0a19 	add.w	sl, r4, #25
 800b4b6:	68e3      	ldr	r3, [r4, #12]
 800b4b8:	6832      	ldr	r2, [r6, #0]
 800b4ba:	1a9b      	subs	r3, r3, r2
 800b4bc:	42ab      	cmp	r3, r5
 800b4be:	dc2b      	bgt.n	800b518 <_printf_common+0xa0>
 800b4c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4c4:	1e13      	subs	r3, r2, #0
 800b4c6:	6822      	ldr	r2, [r4, #0]
 800b4c8:	bf18      	it	ne
 800b4ca:	2301      	movne	r3, #1
 800b4cc:	0692      	lsls	r2, r2, #26
 800b4ce:	d430      	bmi.n	800b532 <_printf_common+0xba>
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4d8:	47c0      	blx	r8
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d023      	beq.n	800b526 <_printf_common+0xae>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	6922      	ldr	r2, [r4, #16]
 800b4e2:	f003 0306 	and.w	r3, r3, #6
 800b4e6:	2b04      	cmp	r3, #4
 800b4e8:	bf14      	ite	ne
 800b4ea:	2500      	movne	r5, #0
 800b4ec:	6833      	ldreq	r3, [r6, #0]
 800b4ee:	f04f 0600 	mov.w	r6, #0
 800b4f2:	bf08      	it	eq
 800b4f4:	68e5      	ldreq	r5, [r4, #12]
 800b4f6:	f104 041a 	add.w	r4, r4, #26
 800b4fa:	bf08      	it	eq
 800b4fc:	1aed      	subeq	r5, r5, r3
 800b4fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b502:	bf08      	it	eq
 800b504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b508:	4293      	cmp	r3, r2
 800b50a:	bfc4      	itt	gt
 800b50c:	1a9b      	subgt	r3, r3, r2
 800b50e:	18ed      	addgt	r5, r5, r3
 800b510:	42b5      	cmp	r5, r6
 800b512:	d11a      	bne.n	800b54a <_printf_common+0xd2>
 800b514:	2000      	movs	r0, #0
 800b516:	e008      	b.n	800b52a <_printf_common+0xb2>
 800b518:	2301      	movs	r3, #1
 800b51a:	4652      	mov	r2, sl
 800b51c:	4649      	mov	r1, r9
 800b51e:	4638      	mov	r0, r7
 800b520:	47c0      	blx	r8
 800b522:	3001      	adds	r0, #1
 800b524:	d103      	bne.n	800b52e <_printf_common+0xb6>
 800b526:	f04f 30ff 	mov.w	r0, #4294967295
 800b52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52e:	3501      	adds	r5, #1
 800b530:	e7c1      	b.n	800b4b6 <_printf_common+0x3e>
 800b532:	2030      	movs	r0, #48	; 0x30
 800b534:	18e1      	adds	r1, r4, r3
 800b536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b540:	4422      	add	r2, r4
 800b542:	3302      	adds	r3, #2
 800b544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b548:	e7c2      	b.n	800b4d0 <_printf_common+0x58>
 800b54a:	2301      	movs	r3, #1
 800b54c:	4622      	mov	r2, r4
 800b54e:	4649      	mov	r1, r9
 800b550:	4638      	mov	r0, r7
 800b552:	47c0      	blx	r8
 800b554:	3001      	adds	r0, #1
 800b556:	d0e6      	beq.n	800b526 <_printf_common+0xae>
 800b558:	3601      	adds	r6, #1
 800b55a:	e7d9      	b.n	800b510 <_printf_common+0x98>

0800b55c <_printf_i>:
 800b55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b560:	7e0f      	ldrb	r7, [r1, #24]
 800b562:	4691      	mov	r9, r2
 800b564:	2f78      	cmp	r7, #120	; 0x78
 800b566:	4680      	mov	r8, r0
 800b568:	460c      	mov	r4, r1
 800b56a:	469a      	mov	sl, r3
 800b56c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b56e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b572:	d807      	bhi.n	800b584 <_printf_i+0x28>
 800b574:	2f62      	cmp	r7, #98	; 0x62
 800b576:	d80a      	bhi.n	800b58e <_printf_i+0x32>
 800b578:	2f00      	cmp	r7, #0
 800b57a:	f000 80d5 	beq.w	800b728 <_printf_i+0x1cc>
 800b57e:	2f58      	cmp	r7, #88	; 0x58
 800b580:	f000 80c1 	beq.w	800b706 <_printf_i+0x1aa>
 800b584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b58c:	e03a      	b.n	800b604 <_printf_i+0xa8>
 800b58e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b592:	2b15      	cmp	r3, #21
 800b594:	d8f6      	bhi.n	800b584 <_printf_i+0x28>
 800b596:	a101      	add	r1, pc, #4	; (adr r1, 800b59c <_printf_i+0x40>)
 800b598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b59c:	0800b5f5 	.word	0x0800b5f5
 800b5a0:	0800b609 	.word	0x0800b609
 800b5a4:	0800b585 	.word	0x0800b585
 800b5a8:	0800b585 	.word	0x0800b585
 800b5ac:	0800b585 	.word	0x0800b585
 800b5b0:	0800b585 	.word	0x0800b585
 800b5b4:	0800b609 	.word	0x0800b609
 800b5b8:	0800b585 	.word	0x0800b585
 800b5bc:	0800b585 	.word	0x0800b585
 800b5c0:	0800b585 	.word	0x0800b585
 800b5c4:	0800b585 	.word	0x0800b585
 800b5c8:	0800b70f 	.word	0x0800b70f
 800b5cc:	0800b635 	.word	0x0800b635
 800b5d0:	0800b6c9 	.word	0x0800b6c9
 800b5d4:	0800b585 	.word	0x0800b585
 800b5d8:	0800b585 	.word	0x0800b585
 800b5dc:	0800b731 	.word	0x0800b731
 800b5e0:	0800b585 	.word	0x0800b585
 800b5e4:	0800b635 	.word	0x0800b635
 800b5e8:	0800b585 	.word	0x0800b585
 800b5ec:	0800b585 	.word	0x0800b585
 800b5f0:	0800b6d1 	.word	0x0800b6d1
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	1d1a      	adds	r2, r3, #4
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	602a      	str	r2, [r5, #0]
 800b5fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b604:	2301      	movs	r3, #1
 800b606:	e0a0      	b.n	800b74a <_printf_i+0x1ee>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	682b      	ldr	r3, [r5, #0]
 800b60c:	0607      	lsls	r7, r0, #24
 800b60e:	f103 0104 	add.w	r1, r3, #4
 800b612:	6029      	str	r1, [r5, #0]
 800b614:	d501      	bpl.n	800b61a <_printf_i+0xbe>
 800b616:	681e      	ldr	r6, [r3, #0]
 800b618:	e003      	b.n	800b622 <_printf_i+0xc6>
 800b61a:	0646      	lsls	r6, r0, #25
 800b61c:	d5fb      	bpl.n	800b616 <_printf_i+0xba>
 800b61e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b622:	2e00      	cmp	r6, #0
 800b624:	da03      	bge.n	800b62e <_printf_i+0xd2>
 800b626:	232d      	movs	r3, #45	; 0x2d
 800b628:	4276      	negs	r6, r6
 800b62a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b62e:	230a      	movs	r3, #10
 800b630:	4859      	ldr	r0, [pc, #356]	; (800b798 <_printf_i+0x23c>)
 800b632:	e012      	b.n	800b65a <_printf_i+0xfe>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	1d19      	adds	r1, r3, #4
 800b63a:	6029      	str	r1, [r5, #0]
 800b63c:	0605      	lsls	r5, r0, #24
 800b63e:	d501      	bpl.n	800b644 <_printf_i+0xe8>
 800b640:	681e      	ldr	r6, [r3, #0]
 800b642:	e002      	b.n	800b64a <_printf_i+0xee>
 800b644:	0641      	lsls	r1, r0, #25
 800b646:	d5fb      	bpl.n	800b640 <_printf_i+0xe4>
 800b648:	881e      	ldrh	r6, [r3, #0]
 800b64a:	2f6f      	cmp	r7, #111	; 0x6f
 800b64c:	bf0c      	ite	eq
 800b64e:	2308      	moveq	r3, #8
 800b650:	230a      	movne	r3, #10
 800b652:	4851      	ldr	r0, [pc, #324]	; (800b798 <_printf_i+0x23c>)
 800b654:	2100      	movs	r1, #0
 800b656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b65a:	6865      	ldr	r5, [r4, #4]
 800b65c:	2d00      	cmp	r5, #0
 800b65e:	bfa8      	it	ge
 800b660:	6821      	ldrge	r1, [r4, #0]
 800b662:	60a5      	str	r5, [r4, #8]
 800b664:	bfa4      	itt	ge
 800b666:	f021 0104 	bicge.w	r1, r1, #4
 800b66a:	6021      	strge	r1, [r4, #0]
 800b66c:	b90e      	cbnz	r6, 800b672 <_printf_i+0x116>
 800b66e:	2d00      	cmp	r5, #0
 800b670:	d04b      	beq.n	800b70a <_printf_i+0x1ae>
 800b672:	4615      	mov	r5, r2
 800b674:	fbb6 f1f3 	udiv	r1, r6, r3
 800b678:	fb03 6711 	mls	r7, r3, r1, r6
 800b67c:	5dc7      	ldrb	r7, [r0, r7]
 800b67e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b682:	4637      	mov	r7, r6
 800b684:	42bb      	cmp	r3, r7
 800b686:	460e      	mov	r6, r1
 800b688:	d9f4      	bls.n	800b674 <_printf_i+0x118>
 800b68a:	2b08      	cmp	r3, #8
 800b68c:	d10b      	bne.n	800b6a6 <_printf_i+0x14a>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	07de      	lsls	r6, r3, #31
 800b692:	d508      	bpl.n	800b6a6 <_printf_i+0x14a>
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	6861      	ldr	r1, [r4, #4]
 800b698:	4299      	cmp	r1, r3
 800b69a:	bfde      	ittt	le
 800b69c:	2330      	movle	r3, #48	; 0x30
 800b69e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6a6:	1b52      	subs	r2, r2, r5
 800b6a8:	6122      	str	r2, [r4, #16]
 800b6aa:	464b      	mov	r3, r9
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	f8cd a000 	str.w	sl, [sp]
 800b6b4:	aa03      	add	r2, sp, #12
 800b6b6:	f7ff fedf 	bl	800b478 <_printf_common>
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d14a      	bne.n	800b754 <_printf_i+0x1f8>
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	b004      	add	sp, #16
 800b6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	f043 0320 	orr.w	r3, r3, #32
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	2778      	movs	r7, #120	; 0x78
 800b6d2:	4832      	ldr	r0, [pc, #200]	; (800b79c <_printf_i+0x240>)
 800b6d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	6829      	ldr	r1, [r5, #0]
 800b6dc:	061f      	lsls	r7, r3, #24
 800b6de:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6e2:	d402      	bmi.n	800b6ea <_printf_i+0x18e>
 800b6e4:	065f      	lsls	r7, r3, #25
 800b6e6:	bf48      	it	mi
 800b6e8:	b2b6      	uxthmi	r6, r6
 800b6ea:	07df      	lsls	r7, r3, #31
 800b6ec:	bf48      	it	mi
 800b6ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b6f2:	6029      	str	r1, [r5, #0]
 800b6f4:	bf48      	it	mi
 800b6f6:	6023      	strmi	r3, [r4, #0]
 800b6f8:	b91e      	cbnz	r6, 800b702 <_printf_i+0x1a6>
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	f023 0320 	bic.w	r3, r3, #32
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	2310      	movs	r3, #16
 800b704:	e7a6      	b.n	800b654 <_printf_i+0xf8>
 800b706:	4824      	ldr	r0, [pc, #144]	; (800b798 <_printf_i+0x23c>)
 800b708:	e7e4      	b.n	800b6d4 <_printf_i+0x178>
 800b70a:	4615      	mov	r5, r2
 800b70c:	e7bd      	b.n	800b68a <_printf_i+0x12e>
 800b70e:	682b      	ldr	r3, [r5, #0]
 800b710:	6826      	ldr	r6, [r4, #0]
 800b712:	1d18      	adds	r0, r3, #4
 800b714:	6961      	ldr	r1, [r4, #20]
 800b716:	6028      	str	r0, [r5, #0]
 800b718:	0635      	lsls	r5, r6, #24
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	d501      	bpl.n	800b722 <_printf_i+0x1c6>
 800b71e:	6019      	str	r1, [r3, #0]
 800b720:	e002      	b.n	800b728 <_printf_i+0x1cc>
 800b722:	0670      	lsls	r0, r6, #25
 800b724:	d5fb      	bpl.n	800b71e <_printf_i+0x1c2>
 800b726:	8019      	strh	r1, [r3, #0]
 800b728:	2300      	movs	r3, #0
 800b72a:	4615      	mov	r5, r2
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	e7bc      	b.n	800b6aa <_printf_i+0x14e>
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	2100      	movs	r1, #0
 800b734:	1d1a      	adds	r2, r3, #4
 800b736:	602a      	str	r2, [r5, #0]
 800b738:	681d      	ldr	r5, [r3, #0]
 800b73a:	6862      	ldr	r2, [r4, #4]
 800b73c:	4628      	mov	r0, r5
 800b73e:	f000 f9c4 	bl	800baca <memchr>
 800b742:	b108      	cbz	r0, 800b748 <_printf_i+0x1ec>
 800b744:	1b40      	subs	r0, r0, r5
 800b746:	6060      	str	r0, [r4, #4]
 800b748:	6863      	ldr	r3, [r4, #4]
 800b74a:	6123      	str	r3, [r4, #16]
 800b74c:	2300      	movs	r3, #0
 800b74e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b752:	e7aa      	b.n	800b6aa <_printf_i+0x14e>
 800b754:	462a      	mov	r2, r5
 800b756:	4649      	mov	r1, r9
 800b758:	4640      	mov	r0, r8
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	47d0      	blx	sl
 800b75e:	3001      	adds	r0, #1
 800b760:	d0ad      	beq.n	800b6be <_printf_i+0x162>
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	079b      	lsls	r3, r3, #30
 800b766:	d413      	bmi.n	800b790 <_printf_i+0x234>
 800b768:	68e0      	ldr	r0, [r4, #12]
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	4298      	cmp	r0, r3
 800b76e:	bfb8      	it	lt
 800b770:	4618      	movlt	r0, r3
 800b772:	e7a6      	b.n	800b6c2 <_printf_i+0x166>
 800b774:	2301      	movs	r3, #1
 800b776:	4632      	mov	r2, r6
 800b778:	4649      	mov	r1, r9
 800b77a:	4640      	mov	r0, r8
 800b77c:	47d0      	blx	sl
 800b77e:	3001      	adds	r0, #1
 800b780:	d09d      	beq.n	800b6be <_printf_i+0x162>
 800b782:	3501      	adds	r5, #1
 800b784:	68e3      	ldr	r3, [r4, #12]
 800b786:	9903      	ldr	r1, [sp, #12]
 800b788:	1a5b      	subs	r3, r3, r1
 800b78a:	42ab      	cmp	r3, r5
 800b78c:	dcf2      	bgt.n	800b774 <_printf_i+0x218>
 800b78e:	e7eb      	b.n	800b768 <_printf_i+0x20c>
 800b790:	2500      	movs	r5, #0
 800b792:	f104 0619 	add.w	r6, r4, #25
 800b796:	e7f5      	b.n	800b784 <_printf_i+0x228>
 800b798:	0800df2e 	.word	0x0800df2e
 800b79c:	0800df3f 	.word	0x0800df3f

0800b7a0 <std>:
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	b510      	push	{r4, lr}
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7ae:	6083      	str	r3, [r0, #8]
 800b7b0:	8181      	strh	r1, [r0, #12]
 800b7b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b7b4:	81c2      	strh	r2, [r0, #14]
 800b7b6:	6183      	str	r3, [r0, #24]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	2208      	movs	r2, #8
 800b7bc:	305c      	adds	r0, #92	; 0x5c
 800b7be:	f000 f8f4 	bl	800b9aa <memset>
 800b7c2:	4b0d      	ldr	r3, [pc, #52]	; (800b7f8 <std+0x58>)
 800b7c4:	6224      	str	r4, [r4, #32]
 800b7c6:	6263      	str	r3, [r4, #36]	; 0x24
 800b7c8:	4b0c      	ldr	r3, [pc, #48]	; (800b7fc <std+0x5c>)
 800b7ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7cc:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <std+0x60>)
 800b7ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7d0:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <std+0x64>)
 800b7d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b7d4:	4b0c      	ldr	r3, [pc, #48]	; (800b808 <std+0x68>)
 800b7d6:	429c      	cmp	r4, r3
 800b7d8:	d006      	beq.n	800b7e8 <std+0x48>
 800b7da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b7de:	4294      	cmp	r4, r2
 800b7e0:	d002      	beq.n	800b7e8 <std+0x48>
 800b7e2:	33d0      	adds	r3, #208	; 0xd0
 800b7e4:	429c      	cmp	r4, r3
 800b7e6:	d105      	bne.n	800b7f4 <std+0x54>
 800b7e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f0:	f000 b968 	b.w	800bac4 <__retarget_lock_init_recursive>
 800b7f4:	bd10      	pop	{r4, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800b925 	.word	0x0800b925
 800b7fc:	0800b947 	.word	0x0800b947
 800b800:	0800b97f 	.word	0x0800b97f
 800b804:	0800b9a3 	.word	0x0800b9a3
 800b808:	200017b4 	.word	0x200017b4

0800b80c <stdio_exit_handler>:
 800b80c:	4a02      	ldr	r2, [pc, #8]	; (800b818 <stdio_exit_handler+0xc>)
 800b80e:	4903      	ldr	r1, [pc, #12]	; (800b81c <stdio_exit_handler+0x10>)
 800b810:	4803      	ldr	r0, [pc, #12]	; (800b820 <stdio_exit_handler+0x14>)
 800b812:	f000 b869 	b.w	800b8e8 <_fwalk_sglue>
 800b816:	bf00      	nop
 800b818:	200001b0 	.word	0x200001b0
 800b81c:	0800d045 	.word	0x0800d045
 800b820:	200001bc 	.word	0x200001bc

0800b824 <cleanup_stdio>:
 800b824:	6841      	ldr	r1, [r0, #4]
 800b826:	4b0c      	ldr	r3, [pc, #48]	; (800b858 <cleanup_stdio+0x34>)
 800b828:	b510      	push	{r4, lr}
 800b82a:	4299      	cmp	r1, r3
 800b82c:	4604      	mov	r4, r0
 800b82e:	d001      	beq.n	800b834 <cleanup_stdio+0x10>
 800b830:	f001 fc08 	bl	800d044 <_fflush_r>
 800b834:	68a1      	ldr	r1, [r4, #8]
 800b836:	4b09      	ldr	r3, [pc, #36]	; (800b85c <cleanup_stdio+0x38>)
 800b838:	4299      	cmp	r1, r3
 800b83a:	d002      	beq.n	800b842 <cleanup_stdio+0x1e>
 800b83c:	4620      	mov	r0, r4
 800b83e:	f001 fc01 	bl	800d044 <_fflush_r>
 800b842:	68e1      	ldr	r1, [r4, #12]
 800b844:	4b06      	ldr	r3, [pc, #24]	; (800b860 <cleanup_stdio+0x3c>)
 800b846:	4299      	cmp	r1, r3
 800b848:	d004      	beq.n	800b854 <cleanup_stdio+0x30>
 800b84a:	4620      	mov	r0, r4
 800b84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b850:	f001 bbf8 	b.w	800d044 <_fflush_r>
 800b854:	bd10      	pop	{r4, pc}
 800b856:	bf00      	nop
 800b858:	200017b4 	.word	0x200017b4
 800b85c:	2000181c 	.word	0x2000181c
 800b860:	20001884 	.word	0x20001884

0800b864 <global_stdio_init.part.0>:
 800b864:	b510      	push	{r4, lr}
 800b866:	4b0b      	ldr	r3, [pc, #44]	; (800b894 <global_stdio_init.part.0+0x30>)
 800b868:	4c0b      	ldr	r4, [pc, #44]	; (800b898 <global_stdio_init.part.0+0x34>)
 800b86a:	4a0c      	ldr	r2, [pc, #48]	; (800b89c <global_stdio_init.part.0+0x38>)
 800b86c:	4620      	mov	r0, r4
 800b86e:	601a      	str	r2, [r3, #0]
 800b870:	2104      	movs	r1, #4
 800b872:	2200      	movs	r2, #0
 800b874:	f7ff ff94 	bl	800b7a0 <std>
 800b878:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b87c:	2201      	movs	r2, #1
 800b87e:	2109      	movs	r1, #9
 800b880:	f7ff ff8e 	bl	800b7a0 <std>
 800b884:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b888:	2202      	movs	r2, #2
 800b88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b88e:	2112      	movs	r1, #18
 800b890:	f7ff bf86 	b.w	800b7a0 <std>
 800b894:	200018ec 	.word	0x200018ec
 800b898:	200017b4 	.word	0x200017b4
 800b89c:	0800b80d 	.word	0x0800b80d

0800b8a0 <__sfp_lock_acquire>:
 800b8a0:	4801      	ldr	r0, [pc, #4]	; (800b8a8 <__sfp_lock_acquire+0x8>)
 800b8a2:	f000 b910 	b.w	800bac6 <__retarget_lock_acquire_recursive>
 800b8a6:	bf00      	nop
 800b8a8:	200018f5 	.word	0x200018f5

0800b8ac <__sfp_lock_release>:
 800b8ac:	4801      	ldr	r0, [pc, #4]	; (800b8b4 <__sfp_lock_release+0x8>)
 800b8ae:	f000 b90b 	b.w	800bac8 <__retarget_lock_release_recursive>
 800b8b2:	bf00      	nop
 800b8b4:	200018f5 	.word	0x200018f5

0800b8b8 <__sinit>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	f7ff fff0 	bl	800b8a0 <__sfp_lock_acquire>
 800b8c0:	6a23      	ldr	r3, [r4, #32]
 800b8c2:	b11b      	cbz	r3, 800b8cc <__sinit+0x14>
 800b8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c8:	f7ff bff0 	b.w	800b8ac <__sfp_lock_release>
 800b8cc:	4b04      	ldr	r3, [pc, #16]	; (800b8e0 <__sinit+0x28>)
 800b8ce:	6223      	str	r3, [r4, #32]
 800b8d0:	4b04      	ldr	r3, [pc, #16]	; (800b8e4 <__sinit+0x2c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1f5      	bne.n	800b8c4 <__sinit+0xc>
 800b8d8:	f7ff ffc4 	bl	800b864 <global_stdio_init.part.0>
 800b8dc:	e7f2      	b.n	800b8c4 <__sinit+0xc>
 800b8de:	bf00      	nop
 800b8e0:	0800b825 	.word	0x0800b825
 800b8e4:	200018ec 	.word	0x200018ec

0800b8e8 <_fwalk_sglue>:
 800b8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	4688      	mov	r8, r1
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	2600      	movs	r6, #0
 800b8f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8f8:	f1b9 0901 	subs.w	r9, r9, #1
 800b8fc:	d505      	bpl.n	800b90a <_fwalk_sglue+0x22>
 800b8fe:	6824      	ldr	r4, [r4, #0]
 800b900:	2c00      	cmp	r4, #0
 800b902:	d1f7      	bne.n	800b8f4 <_fwalk_sglue+0xc>
 800b904:	4630      	mov	r0, r6
 800b906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b90a:	89ab      	ldrh	r3, [r5, #12]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d907      	bls.n	800b920 <_fwalk_sglue+0x38>
 800b910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b914:	3301      	adds	r3, #1
 800b916:	d003      	beq.n	800b920 <_fwalk_sglue+0x38>
 800b918:	4629      	mov	r1, r5
 800b91a:	4638      	mov	r0, r7
 800b91c:	47c0      	blx	r8
 800b91e:	4306      	orrs	r6, r0
 800b920:	3568      	adds	r5, #104	; 0x68
 800b922:	e7e9      	b.n	800b8f8 <_fwalk_sglue+0x10>

0800b924 <__sread>:
 800b924:	b510      	push	{r4, lr}
 800b926:	460c      	mov	r4, r1
 800b928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b92c:	f000 f86c 	bl	800ba08 <_read_r>
 800b930:	2800      	cmp	r0, #0
 800b932:	bfab      	itete	ge
 800b934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b936:	89a3      	ldrhlt	r3, [r4, #12]
 800b938:	181b      	addge	r3, r3, r0
 800b93a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b93e:	bfac      	ite	ge
 800b940:	6563      	strge	r3, [r4, #84]	; 0x54
 800b942:	81a3      	strhlt	r3, [r4, #12]
 800b944:	bd10      	pop	{r4, pc}

0800b946 <__swrite>:
 800b946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94a:	461f      	mov	r7, r3
 800b94c:	898b      	ldrh	r3, [r1, #12]
 800b94e:	4605      	mov	r5, r0
 800b950:	05db      	lsls	r3, r3, #23
 800b952:	460c      	mov	r4, r1
 800b954:	4616      	mov	r6, r2
 800b956:	d505      	bpl.n	800b964 <__swrite+0x1e>
 800b958:	2302      	movs	r3, #2
 800b95a:	2200      	movs	r2, #0
 800b95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b960:	f000 f840 	bl	800b9e4 <_lseek_r>
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	4632      	mov	r2, r6
 800b968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b96c:	81a3      	strh	r3, [r4, #12]
 800b96e:	4628      	mov	r0, r5
 800b970:	463b      	mov	r3, r7
 800b972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b97a:	f000 b867 	b.w	800ba4c <_write_r>

0800b97e <__sseek>:
 800b97e:	b510      	push	{r4, lr}
 800b980:	460c      	mov	r4, r1
 800b982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b986:	f000 f82d 	bl	800b9e4 <_lseek_r>
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	bf15      	itete	ne
 800b990:	6560      	strne	r0, [r4, #84]	; 0x54
 800b992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b99a:	81a3      	strheq	r3, [r4, #12]
 800b99c:	bf18      	it	ne
 800b99e:	81a3      	strhne	r3, [r4, #12]
 800b9a0:	bd10      	pop	{r4, pc}

0800b9a2 <__sclose>:
 800b9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a6:	f000 b80d 	b.w	800b9c4 <_close_r>

0800b9aa <memset>:
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	4402      	add	r2, r0
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d100      	bne.n	800b9b4 <memset+0xa>
 800b9b2:	4770      	bx	lr
 800b9b4:	f803 1b01 	strb.w	r1, [r3], #1
 800b9b8:	e7f9      	b.n	800b9ae <memset+0x4>
	...

0800b9bc <_localeconv_r>:
 800b9bc:	4800      	ldr	r0, [pc, #0]	; (800b9c0 <_localeconv_r+0x4>)
 800b9be:	4770      	bx	lr
 800b9c0:	200002fc 	.word	0x200002fc

0800b9c4 <_close_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4d05      	ldr	r5, [pc, #20]	; (800b9e0 <_close_r+0x1c>)
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	602b      	str	r3, [r5, #0]
 800b9d0:	f7f7 f81e 	bl	8002a10 <_close>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	d102      	bne.n	800b9de <_close_r+0x1a>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	b103      	cbz	r3, 800b9de <_close_r+0x1a>
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	200018f0 	.word	0x200018f0

0800b9e4 <_lseek_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4d05      	ldr	r5, [pc, #20]	; (800ba04 <_lseek_r+0x20>)
 800b9f0:	602a      	str	r2, [r5, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	f7f7 f830 	bl	8002a58 <_lseek>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d102      	bne.n	800ba02 <_lseek_r+0x1e>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	b103      	cbz	r3, 800ba02 <_lseek_r+0x1e>
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	200018f0 	.word	0x200018f0

0800ba08 <_read_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	4611      	mov	r1, r2
 800ba10:	2200      	movs	r2, #0
 800ba12:	4d05      	ldr	r5, [pc, #20]	; (800ba28 <_read_r+0x20>)
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f7f6 ffc1 	bl	800299e <_read>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_read_r+0x1e>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_read_r+0x1e>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	200018f0 	.word	0x200018f0

0800ba2c <_sbrk_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4d05      	ldr	r5, [pc, #20]	; (800ba48 <_sbrk_r+0x1c>)
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f7 f81a 	bl	8002a70 <_sbrk>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_sbrk_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_sbrk_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	200018f0 	.word	0x200018f0

0800ba4c <_write_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4604      	mov	r4, r0
 800ba50:	4608      	mov	r0, r1
 800ba52:	4611      	mov	r1, r2
 800ba54:	2200      	movs	r2, #0
 800ba56:	4d05      	ldr	r5, [pc, #20]	; (800ba6c <_write_r+0x20>)
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f7f6 ffbc 	bl	80029d8 <_write>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_write_r+0x1e>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_write_r+0x1e>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	200018f0 	.word	0x200018f0

0800ba70 <__errno>:
 800ba70:	4b01      	ldr	r3, [pc, #4]	; (800ba78 <__errno+0x8>)
 800ba72:	6818      	ldr	r0, [r3, #0]
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	20000208 	.word	0x20000208

0800ba7c <__libc_init_array>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	2600      	movs	r6, #0
 800ba80:	4d0c      	ldr	r5, [pc, #48]	; (800bab4 <__libc_init_array+0x38>)
 800ba82:	4c0d      	ldr	r4, [pc, #52]	; (800bab8 <__libc_init_array+0x3c>)
 800ba84:	1b64      	subs	r4, r4, r5
 800ba86:	10a4      	asrs	r4, r4, #2
 800ba88:	42a6      	cmp	r6, r4
 800ba8a:	d109      	bne.n	800baa0 <__libc_init_array+0x24>
 800ba8c:	f002 f806 	bl	800da9c <_init>
 800ba90:	2600      	movs	r6, #0
 800ba92:	4d0a      	ldr	r5, [pc, #40]	; (800babc <__libc_init_array+0x40>)
 800ba94:	4c0a      	ldr	r4, [pc, #40]	; (800bac0 <__libc_init_array+0x44>)
 800ba96:	1b64      	subs	r4, r4, r5
 800ba98:	10a4      	asrs	r4, r4, #2
 800ba9a:	42a6      	cmp	r6, r4
 800ba9c:	d105      	bne.n	800baaa <__libc_init_array+0x2e>
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}
 800baa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa4:	4798      	blx	r3
 800baa6:	3601      	adds	r6, #1
 800baa8:	e7ee      	b.n	800ba88 <__libc_init_array+0xc>
 800baaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800baae:	4798      	blx	r3
 800bab0:	3601      	adds	r6, #1
 800bab2:	e7f2      	b.n	800ba9a <__libc_init_array+0x1e>
 800bab4:	0800e294 	.word	0x0800e294
 800bab8:	0800e294 	.word	0x0800e294
 800babc:	0800e294 	.word	0x0800e294
 800bac0:	0800e298 	.word	0x0800e298

0800bac4 <__retarget_lock_init_recursive>:
 800bac4:	4770      	bx	lr

0800bac6 <__retarget_lock_acquire_recursive>:
 800bac6:	4770      	bx	lr

0800bac8 <__retarget_lock_release_recursive>:
 800bac8:	4770      	bx	lr

0800baca <memchr>:
 800baca:	4603      	mov	r3, r0
 800bacc:	b510      	push	{r4, lr}
 800bace:	b2c9      	uxtb	r1, r1
 800bad0:	4402      	add	r2, r0
 800bad2:	4293      	cmp	r3, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	d101      	bne.n	800badc <memchr+0x12>
 800bad8:	2000      	movs	r0, #0
 800bada:	e003      	b.n	800bae4 <memchr+0x1a>
 800badc:	7804      	ldrb	r4, [r0, #0]
 800bade:	3301      	adds	r3, #1
 800bae0:	428c      	cmp	r4, r1
 800bae2:	d1f6      	bne.n	800bad2 <memchr+0x8>
 800bae4:	bd10      	pop	{r4, pc}

0800bae6 <quorem>:
 800bae6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	6903      	ldr	r3, [r0, #16]
 800baec:	690c      	ldr	r4, [r1, #16]
 800baee:	4607      	mov	r7, r0
 800baf0:	42a3      	cmp	r3, r4
 800baf2:	db7f      	blt.n	800bbf4 <quorem+0x10e>
 800baf4:	3c01      	subs	r4, #1
 800baf6:	f100 0514 	add.w	r5, r0, #20
 800bafa:	f101 0814 	add.w	r8, r1, #20
 800bafe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb1c:	d331      	bcc.n	800bb82 <quorem+0x9c>
 800bb1e:	f04f 0e00 	mov.w	lr, #0
 800bb22:	4640      	mov	r0, r8
 800bb24:	46ac      	mov	ip, r5
 800bb26:	46f2      	mov	sl, lr
 800bb28:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb2c:	b293      	uxth	r3, r2
 800bb2e:	fb06 e303 	mla	r3, r6, r3, lr
 800bb32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb36:	0c1a      	lsrs	r2, r3, #16
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	fb06 220e 	mla	r2, r6, lr, r2
 800bb3e:	ebaa 0303 	sub.w	r3, sl, r3
 800bb42:	f8dc a000 	ldr.w	sl, [ip]
 800bb46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb4a:	fa1f fa8a 	uxth.w	sl, sl
 800bb4e:	4453      	add	r3, sl
 800bb50:	f8dc a000 	ldr.w	sl, [ip]
 800bb54:	b292      	uxth	r2, r2
 800bb56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bb5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb64:	4581      	cmp	r9, r0
 800bb66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb6a:	f84c 3b04 	str.w	r3, [ip], #4
 800bb6e:	d2db      	bcs.n	800bb28 <quorem+0x42>
 800bb70:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb74:	b92b      	cbnz	r3, 800bb82 <quorem+0x9c>
 800bb76:	9b01      	ldr	r3, [sp, #4]
 800bb78:	3b04      	subs	r3, #4
 800bb7a:	429d      	cmp	r5, r3
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	d32d      	bcc.n	800bbdc <quorem+0xf6>
 800bb80:	613c      	str	r4, [r7, #16]
 800bb82:	4638      	mov	r0, r7
 800bb84:	f001 f8de 	bl	800cd44 <__mcmp>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	db23      	blt.n	800bbd4 <quorem+0xee>
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	2000      	movs	r0, #0
 800bb90:	3601      	adds	r6, #1
 800bb92:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb96:	f8d1 c000 	ldr.w	ip, [r1]
 800bb9a:	b293      	uxth	r3, r2
 800bb9c:	1ac3      	subs	r3, r0, r3
 800bb9e:	0c12      	lsrs	r2, r2, #16
 800bba0:	fa1f f08c 	uxth.w	r0, ip
 800bba4:	4403      	add	r3, r0
 800bba6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bbaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbb4:	45c1      	cmp	r9, r8
 800bbb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbba:	f841 3b04 	str.w	r3, [r1], #4
 800bbbe:	d2e8      	bcs.n	800bb92 <quorem+0xac>
 800bbc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbc8:	b922      	cbnz	r2, 800bbd4 <quorem+0xee>
 800bbca:	3b04      	subs	r3, #4
 800bbcc:	429d      	cmp	r5, r3
 800bbce:	461a      	mov	r2, r3
 800bbd0:	d30a      	bcc.n	800bbe8 <quorem+0x102>
 800bbd2:	613c      	str	r4, [r7, #16]
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	b003      	add	sp, #12
 800bbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbdc:	6812      	ldr	r2, [r2, #0]
 800bbde:	3b04      	subs	r3, #4
 800bbe0:	2a00      	cmp	r2, #0
 800bbe2:	d1cd      	bne.n	800bb80 <quorem+0x9a>
 800bbe4:	3c01      	subs	r4, #1
 800bbe6:	e7c8      	b.n	800bb7a <quorem+0x94>
 800bbe8:	6812      	ldr	r2, [r2, #0]
 800bbea:	3b04      	subs	r3, #4
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	d1f0      	bne.n	800bbd2 <quorem+0xec>
 800bbf0:	3c01      	subs	r4, #1
 800bbf2:	e7eb      	b.n	800bbcc <quorem+0xe6>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	e7ee      	b.n	800bbd6 <quorem+0xf0>

0800bbf8 <_dtoa_r>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	4616      	mov	r6, r2
 800bbfe:	461f      	mov	r7, r3
 800bc00:	69c4      	ldr	r4, [r0, #28]
 800bc02:	b099      	sub	sp, #100	; 0x64
 800bc04:	4605      	mov	r5, r0
 800bc06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bc0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bc0e:	b974      	cbnz	r4, 800bc2e <_dtoa_r+0x36>
 800bc10:	2010      	movs	r0, #16
 800bc12:	f7ff f8ab 	bl	800ad6c <malloc>
 800bc16:	4602      	mov	r2, r0
 800bc18:	61e8      	str	r0, [r5, #28]
 800bc1a:	b920      	cbnz	r0, 800bc26 <_dtoa_r+0x2e>
 800bc1c:	21ef      	movs	r1, #239	; 0xef
 800bc1e:	4bac      	ldr	r3, [pc, #688]	; (800bed0 <_dtoa_r+0x2d8>)
 800bc20:	48ac      	ldr	r0, [pc, #688]	; (800bed4 <_dtoa_r+0x2dc>)
 800bc22:	f001 fa45 	bl	800d0b0 <__assert_func>
 800bc26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc2a:	6004      	str	r4, [r0, #0]
 800bc2c:	60c4      	str	r4, [r0, #12]
 800bc2e:	69eb      	ldr	r3, [r5, #28]
 800bc30:	6819      	ldr	r1, [r3, #0]
 800bc32:	b151      	cbz	r1, 800bc4a <_dtoa_r+0x52>
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	2301      	movs	r3, #1
 800bc38:	4093      	lsls	r3, r2
 800bc3a:	604a      	str	r2, [r1, #4]
 800bc3c:	608b      	str	r3, [r1, #8]
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f000 fe46 	bl	800c8d0 <_Bfree>
 800bc44:	2200      	movs	r2, #0
 800bc46:	69eb      	ldr	r3, [r5, #28]
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	1e3b      	subs	r3, r7, #0
 800bc4c:	bfaf      	iteee	ge
 800bc4e:	2300      	movge	r3, #0
 800bc50:	2201      	movlt	r2, #1
 800bc52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bc56:	9305      	strlt	r3, [sp, #20]
 800bc58:	bfa8      	it	ge
 800bc5a:	f8c8 3000 	strge.w	r3, [r8]
 800bc5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bc62:	4b9d      	ldr	r3, [pc, #628]	; (800bed8 <_dtoa_r+0x2e0>)
 800bc64:	bfb8      	it	lt
 800bc66:	f8c8 2000 	strlt.w	r2, [r8]
 800bc6a:	ea33 0309 	bics.w	r3, r3, r9
 800bc6e:	d119      	bne.n	800bca4 <_dtoa_r+0xac>
 800bc70:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc7c:	4333      	orrs	r3, r6
 800bc7e:	f000 8589 	beq.w	800c794 <_dtoa_r+0xb9c>
 800bc82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc84:	b953      	cbnz	r3, 800bc9c <_dtoa_r+0xa4>
 800bc86:	4b95      	ldr	r3, [pc, #596]	; (800bedc <_dtoa_r+0x2e4>)
 800bc88:	e023      	b.n	800bcd2 <_dtoa_r+0xda>
 800bc8a:	4b95      	ldr	r3, [pc, #596]	; (800bee0 <_dtoa_r+0x2e8>)
 800bc8c:	9303      	str	r3, [sp, #12]
 800bc8e:	3308      	adds	r3, #8
 800bc90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	9803      	ldr	r0, [sp, #12]
 800bc96:	b019      	add	sp, #100	; 0x64
 800bc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9c:	4b8f      	ldr	r3, [pc, #572]	; (800bedc <_dtoa_r+0x2e4>)
 800bc9e:	9303      	str	r3, [sp, #12]
 800bca0:	3303      	adds	r3, #3
 800bca2:	e7f5      	b.n	800bc90 <_dtoa_r+0x98>
 800bca4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bca8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bcac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f7f4 feb4 	bl	8000a20 <__aeabi_dcmpeq>
 800bcb8:	4680      	mov	r8, r0
 800bcba:	b160      	cbz	r0, 800bcd6 <_dtoa_r+0xde>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 8562 	beq.w	800c78e <_dtoa_r+0xb96>
 800bcca:	4b86      	ldr	r3, [pc, #536]	; (800bee4 <_dtoa_r+0x2ec>)
 800bccc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	e7de      	b.n	800bc94 <_dtoa_r+0x9c>
 800bcd6:	ab16      	add	r3, sp, #88	; 0x58
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	ab17      	add	r3, sp, #92	; 0x5c
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	4628      	mov	r0, r5
 800bce0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bce4:	f001 f8d6 	bl	800ce94 <__d2b>
 800bce8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bcec:	4682      	mov	sl, r0
 800bcee:	2c00      	cmp	r4, #0
 800bcf0:	d07e      	beq.n	800bdf0 <_dtoa_r+0x1f8>
 800bcf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bcf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcf8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bcfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	2200      	movs	r2, #0
 800bd10:	4b75      	ldr	r3, [pc, #468]	; (800bee8 <_dtoa_r+0x2f0>)
 800bd12:	f7f4 fa65 	bl	80001e0 <__aeabi_dsub>
 800bd16:	a368      	add	r3, pc, #416	; (adr r3, 800beb8 <_dtoa_r+0x2c0>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fc18 	bl	8000550 <__aeabi_dmul>
 800bd20:	a367      	add	r3, pc, #412	; (adr r3, 800bec0 <_dtoa_r+0x2c8>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fa5d 	bl	80001e4 <__adddf3>
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	460f      	mov	r7, r1
 800bd30:	f7f4 fba4 	bl	800047c <__aeabi_i2d>
 800bd34:	a364      	add	r3, pc, #400	; (adr r3, 800bec8 <_dtoa_r+0x2d0>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 fc09 	bl	8000550 <__aeabi_dmul>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	4630      	mov	r0, r6
 800bd44:	4639      	mov	r1, r7
 800bd46:	f7f4 fa4d 	bl	80001e4 <__adddf3>
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	f7f4 feaf 	bl	8000ab0 <__aeabi_d2iz>
 800bd52:	2200      	movs	r2, #0
 800bd54:	4683      	mov	fp, r0
 800bd56:	2300      	movs	r3, #0
 800bd58:	4630      	mov	r0, r6
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	f7f4 fe6a 	bl	8000a34 <__aeabi_dcmplt>
 800bd60:	b148      	cbz	r0, 800bd76 <_dtoa_r+0x17e>
 800bd62:	4658      	mov	r0, fp
 800bd64:	f7f4 fb8a 	bl	800047c <__aeabi_i2d>
 800bd68:	4632      	mov	r2, r6
 800bd6a:	463b      	mov	r3, r7
 800bd6c:	f7f4 fe58 	bl	8000a20 <__aeabi_dcmpeq>
 800bd70:	b908      	cbnz	r0, 800bd76 <_dtoa_r+0x17e>
 800bd72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd76:	f1bb 0f16 	cmp.w	fp, #22
 800bd7a:	d857      	bhi.n	800be2c <_dtoa_r+0x234>
 800bd7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd80:	4b5a      	ldr	r3, [pc, #360]	; (800beec <_dtoa_r+0x2f4>)
 800bd82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 fe53 	bl	8000a34 <__aeabi_dcmplt>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d04e      	beq.n	800be30 <_dtoa_r+0x238>
 800bd92:	2300      	movs	r3, #0
 800bd94:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd98:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd9c:	1b1b      	subs	r3, r3, r4
 800bd9e:	1e5a      	subs	r2, r3, #1
 800bda0:	bf46      	itte	mi
 800bda2:	f1c3 0901 	rsbmi	r9, r3, #1
 800bda6:	2300      	movmi	r3, #0
 800bda8:	f04f 0900 	movpl.w	r9, #0
 800bdac:	9209      	str	r2, [sp, #36]	; 0x24
 800bdae:	bf48      	it	mi
 800bdb0:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bdb2:	f1bb 0f00 	cmp.w	fp, #0
 800bdb6:	db3d      	blt.n	800be34 <_dtoa_r+0x23c>
 800bdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bdbe:	445b      	add	r3, fp
 800bdc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	930a      	str	r3, [sp, #40]	; 0x28
 800bdc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdc8:	2b09      	cmp	r3, #9
 800bdca:	d867      	bhi.n	800be9c <_dtoa_r+0x2a4>
 800bdcc:	2b05      	cmp	r3, #5
 800bdce:	bfc4      	itt	gt
 800bdd0:	3b04      	subgt	r3, #4
 800bdd2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bdd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdd6:	bfc8      	it	gt
 800bdd8:	2400      	movgt	r4, #0
 800bdda:	f1a3 0302 	sub.w	r3, r3, #2
 800bdde:	bfd8      	it	le
 800bde0:	2401      	movle	r4, #1
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	f200 8086 	bhi.w	800bef4 <_dtoa_r+0x2fc>
 800bde8:	e8df f003 	tbb	[pc, r3]
 800bdec:	5637392c 	.word	0x5637392c
 800bdf0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bdf4:	441c      	add	r4, r3
 800bdf6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bdfa:	2b20      	cmp	r3, #32
 800bdfc:	bfc1      	itttt	gt
 800bdfe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be02:	fa09 f903 	lslgt.w	r9, r9, r3
 800be06:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800be0a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800be0e:	bfd6      	itet	le
 800be10:	f1c3 0320 	rsble	r3, r3, #32
 800be14:	ea49 0003 	orrgt.w	r0, r9, r3
 800be18:	fa06 f003 	lslle.w	r0, r6, r3
 800be1c:	f7f4 fb1e 	bl	800045c <__aeabi_ui2d>
 800be20:	2201      	movs	r2, #1
 800be22:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800be26:	3c01      	subs	r4, #1
 800be28:	9213      	str	r2, [sp, #76]	; 0x4c
 800be2a:	e76f      	b.n	800bd0c <_dtoa_r+0x114>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e7b3      	b.n	800bd98 <_dtoa_r+0x1a0>
 800be30:	900f      	str	r0, [sp, #60]	; 0x3c
 800be32:	e7b2      	b.n	800bd9a <_dtoa_r+0x1a2>
 800be34:	f1cb 0300 	rsb	r3, fp, #0
 800be38:	930a      	str	r3, [sp, #40]	; 0x28
 800be3a:	2300      	movs	r3, #0
 800be3c:	eba9 090b 	sub.w	r9, r9, fp
 800be40:	930e      	str	r3, [sp, #56]	; 0x38
 800be42:	e7c0      	b.n	800bdc6 <_dtoa_r+0x1ce>
 800be44:	2300      	movs	r3, #0
 800be46:	930b      	str	r3, [sp, #44]	; 0x2c
 800be48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	dc55      	bgt.n	800befa <_dtoa_r+0x302>
 800be4e:	2301      	movs	r3, #1
 800be50:	461a      	mov	r2, r3
 800be52:	9306      	str	r3, [sp, #24]
 800be54:	9308      	str	r3, [sp, #32]
 800be56:	9223      	str	r2, [sp, #140]	; 0x8c
 800be58:	e00b      	b.n	800be72 <_dtoa_r+0x27a>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e7f3      	b.n	800be46 <_dtoa_r+0x24e>
 800be5e:	2300      	movs	r3, #0
 800be60:	930b      	str	r3, [sp, #44]	; 0x2c
 800be62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be64:	445b      	add	r3, fp
 800be66:	9306      	str	r3, [sp, #24]
 800be68:	3301      	adds	r3, #1
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	9308      	str	r3, [sp, #32]
 800be6e:	bfb8      	it	lt
 800be70:	2301      	movlt	r3, #1
 800be72:	2100      	movs	r1, #0
 800be74:	2204      	movs	r2, #4
 800be76:	69e8      	ldr	r0, [r5, #28]
 800be78:	f102 0614 	add.w	r6, r2, #20
 800be7c:	429e      	cmp	r6, r3
 800be7e:	d940      	bls.n	800bf02 <_dtoa_r+0x30a>
 800be80:	6041      	str	r1, [r0, #4]
 800be82:	4628      	mov	r0, r5
 800be84:	f000 fce4 	bl	800c850 <_Balloc>
 800be88:	9003      	str	r0, [sp, #12]
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d13c      	bne.n	800bf08 <_dtoa_r+0x310>
 800be8e:	4602      	mov	r2, r0
 800be90:	f240 11af 	movw	r1, #431	; 0x1af
 800be94:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <_dtoa_r+0x2f8>)
 800be96:	e6c3      	b.n	800bc20 <_dtoa_r+0x28>
 800be98:	2301      	movs	r3, #1
 800be9a:	e7e1      	b.n	800be60 <_dtoa_r+0x268>
 800be9c:	2401      	movs	r4, #1
 800be9e:	2300      	movs	r3, #0
 800bea0:	940b      	str	r4, [sp, #44]	; 0x2c
 800bea2:	9322      	str	r3, [sp, #136]	; 0x88
 800bea4:	f04f 33ff 	mov.w	r3, #4294967295
 800bea8:	2200      	movs	r2, #0
 800beaa:	9306      	str	r3, [sp, #24]
 800beac:	9308      	str	r3, [sp, #32]
 800beae:	2312      	movs	r3, #18
 800beb0:	e7d1      	b.n	800be56 <_dtoa_r+0x25e>
 800beb2:	bf00      	nop
 800beb4:	f3af 8000 	nop.w
 800beb8:	636f4361 	.word	0x636f4361
 800bebc:	3fd287a7 	.word	0x3fd287a7
 800bec0:	8b60c8b3 	.word	0x8b60c8b3
 800bec4:	3fc68a28 	.word	0x3fc68a28
 800bec8:	509f79fb 	.word	0x509f79fb
 800becc:	3fd34413 	.word	0x3fd34413
 800bed0:	0800df5d 	.word	0x0800df5d
 800bed4:	0800df74 	.word	0x0800df74
 800bed8:	7ff00000 	.word	0x7ff00000
 800bedc:	0800df59 	.word	0x0800df59
 800bee0:	0800df50 	.word	0x0800df50
 800bee4:	0800df2d 	.word	0x0800df2d
 800bee8:	3ff80000 	.word	0x3ff80000
 800beec:	0800e060 	.word	0x0800e060
 800bef0:	0800dfcc 	.word	0x0800dfcc
 800bef4:	2301      	movs	r3, #1
 800bef6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bef8:	e7d4      	b.n	800bea4 <_dtoa_r+0x2ac>
 800befa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800befc:	9306      	str	r3, [sp, #24]
 800befe:	9308      	str	r3, [sp, #32]
 800bf00:	e7b7      	b.n	800be72 <_dtoa_r+0x27a>
 800bf02:	3101      	adds	r1, #1
 800bf04:	0052      	lsls	r2, r2, #1
 800bf06:	e7b7      	b.n	800be78 <_dtoa_r+0x280>
 800bf08:	69eb      	ldr	r3, [r5, #28]
 800bf0a:	9a03      	ldr	r2, [sp, #12]
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	9b08      	ldr	r3, [sp, #32]
 800bf10:	2b0e      	cmp	r3, #14
 800bf12:	f200 80a8 	bhi.w	800c066 <_dtoa_r+0x46e>
 800bf16:	2c00      	cmp	r4, #0
 800bf18:	f000 80a5 	beq.w	800c066 <_dtoa_r+0x46e>
 800bf1c:	f1bb 0f00 	cmp.w	fp, #0
 800bf20:	dd34      	ble.n	800bf8c <_dtoa_r+0x394>
 800bf22:	4b9a      	ldr	r3, [pc, #616]	; (800c18c <_dtoa_r+0x594>)
 800bf24:	f00b 020f 	and.w	r2, fp, #15
 800bf28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bf30:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bf38:	ea4f 142b 	mov.w	r4, fp, asr #4
 800bf3c:	d016      	beq.n	800bf6c <_dtoa_r+0x374>
 800bf3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf42:	4b93      	ldr	r3, [pc, #588]	; (800c190 <_dtoa_r+0x598>)
 800bf44:	2703      	movs	r7, #3
 800bf46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf4a:	f7f4 fc2b 	bl	80007a4 <__aeabi_ddiv>
 800bf4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf52:	f004 040f 	and.w	r4, r4, #15
 800bf56:	4e8e      	ldr	r6, [pc, #568]	; (800c190 <_dtoa_r+0x598>)
 800bf58:	b954      	cbnz	r4, 800bf70 <_dtoa_r+0x378>
 800bf5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf62:	f7f4 fc1f 	bl	80007a4 <__aeabi_ddiv>
 800bf66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf6a:	e029      	b.n	800bfc0 <_dtoa_r+0x3c8>
 800bf6c:	2702      	movs	r7, #2
 800bf6e:	e7f2      	b.n	800bf56 <_dtoa_r+0x35e>
 800bf70:	07e1      	lsls	r1, r4, #31
 800bf72:	d508      	bpl.n	800bf86 <_dtoa_r+0x38e>
 800bf74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf78:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf7c:	f7f4 fae8 	bl	8000550 <__aeabi_dmul>
 800bf80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf84:	3701      	adds	r7, #1
 800bf86:	1064      	asrs	r4, r4, #1
 800bf88:	3608      	adds	r6, #8
 800bf8a:	e7e5      	b.n	800bf58 <_dtoa_r+0x360>
 800bf8c:	f000 80a5 	beq.w	800c0da <_dtoa_r+0x4e2>
 800bf90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf94:	f1cb 0400 	rsb	r4, fp, #0
 800bf98:	4b7c      	ldr	r3, [pc, #496]	; (800c18c <_dtoa_r+0x594>)
 800bf9a:	f004 020f 	and.w	r2, r4, #15
 800bf9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 fad3 	bl	8000550 <__aeabi_dmul>
 800bfaa:	2702      	movs	r7, #2
 800bfac:	2300      	movs	r3, #0
 800bfae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfb2:	4e77      	ldr	r6, [pc, #476]	; (800c190 <_dtoa_r+0x598>)
 800bfb4:	1124      	asrs	r4, r4, #4
 800bfb6:	2c00      	cmp	r4, #0
 800bfb8:	f040 8084 	bne.w	800c0c4 <_dtoa_r+0x4cc>
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1d2      	bne.n	800bf66 <_dtoa_r+0x36e>
 800bfc0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bfc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bfc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 8087 	beq.w	800c0de <_dtoa_r+0x4e6>
 800bfd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	4b6f      	ldr	r3, [pc, #444]	; (800c194 <_dtoa_r+0x59c>)
 800bfd8:	f7f4 fd2c 	bl	8000a34 <__aeabi_dcmplt>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d07e      	beq.n	800c0de <_dtoa_r+0x4e6>
 800bfe0:	9b08      	ldr	r3, [sp, #32]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d07b      	beq.n	800c0de <_dtoa_r+0x4e6>
 800bfe6:	9b06      	ldr	r3, [sp, #24]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	dd38      	ble.n	800c05e <_dtoa_r+0x466>
 800bfec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bff0:	2200      	movs	r2, #0
 800bff2:	4b69      	ldr	r3, [pc, #420]	; (800c198 <_dtoa_r+0x5a0>)
 800bff4:	f7f4 faac 	bl	8000550 <__aeabi_dmul>
 800bff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bffc:	9c06      	ldr	r4, [sp, #24]
 800bffe:	f10b 38ff 	add.w	r8, fp, #4294967295
 800c002:	3701      	adds	r7, #1
 800c004:	4638      	mov	r0, r7
 800c006:	f7f4 fa39 	bl	800047c <__aeabi_i2d>
 800c00a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c00e:	f7f4 fa9f 	bl	8000550 <__aeabi_dmul>
 800c012:	2200      	movs	r2, #0
 800c014:	4b61      	ldr	r3, [pc, #388]	; (800c19c <_dtoa_r+0x5a4>)
 800c016:	f7f4 f8e5 	bl	80001e4 <__adddf3>
 800c01a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c01e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c022:	9611      	str	r6, [sp, #68]	; 0x44
 800c024:	2c00      	cmp	r4, #0
 800c026:	d15d      	bne.n	800c0e4 <_dtoa_r+0x4ec>
 800c028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c02c:	2200      	movs	r2, #0
 800c02e:	4b5c      	ldr	r3, [pc, #368]	; (800c1a0 <_dtoa_r+0x5a8>)
 800c030:	f7f4 f8d6 	bl	80001e0 <__aeabi_dsub>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c03c:	4633      	mov	r3, r6
 800c03e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c040:	f7f4 fd16 	bl	8000a70 <__aeabi_dcmpgt>
 800c044:	2800      	cmp	r0, #0
 800c046:	f040 8295 	bne.w	800c574 <_dtoa_r+0x97c>
 800c04a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c04e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c050:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c054:	f7f4 fcee 	bl	8000a34 <__aeabi_dcmplt>
 800c058:	2800      	cmp	r0, #0
 800c05a:	f040 8289 	bne.w	800c570 <_dtoa_r+0x978>
 800c05e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c062:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f2c0 8151 	blt.w	800c310 <_dtoa_r+0x718>
 800c06e:	f1bb 0f0e 	cmp.w	fp, #14
 800c072:	f300 814d 	bgt.w	800c310 <_dtoa_r+0x718>
 800c076:	4b45      	ldr	r3, [pc, #276]	; (800c18c <_dtoa_r+0x594>)
 800c078:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c07c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c080:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c084:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c086:	2b00      	cmp	r3, #0
 800c088:	f280 80da 	bge.w	800c240 <_dtoa_r+0x648>
 800c08c:	9b08      	ldr	r3, [sp, #32]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f300 80d6 	bgt.w	800c240 <_dtoa_r+0x648>
 800c094:	f040 826b 	bne.w	800c56e <_dtoa_r+0x976>
 800c098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c09c:	2200      	movs	r2, #0
 800c09e:	4b40      	ldr	r3, [pc, #256]	; (800c1a0 <_dtoa_r+0x5a8>)
 800c0a0:	f7f4 fa56 	bl	8000550 <__aeabi_dmul>
 800c0a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a8:	f7f4 fcd8 	bl	8000a5c <__aeabi_dcmpge>
 800c0ac:	9c08      	ldr	r4, [sp, #32]
 800c0ae:	4626      	mov	r6, r4
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	f040 8241 	bne.w	800c538 <_dtoa_r+0x940>
 800c0b6:	2331      	movs	r3, #49	; 0x31
 800c0b8:	9f03      	ldr	r7, [sp, #12]
 800c0ba:	f10b 0b01 	add.w	fp, fp, #1
 800c0be:	f807 3b01 	strb.w	r3, [r7], #1
 800c0c2:	e23d      	b.n	800c540 <_dtoa_r+0x948>
 800c0c4:	07e2      	lsls	r2, r4, #31
 800c0c6:	d505      	bpl.n	800c0d4 <_dtoa_r+0x4dc>
 800c0c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0cc:	f7f4 fa40 	bl	8000550 <__aeabi_dmul>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	3701      	adds	r7, #1
 800c0d4:	1064      	asrs	r4, r4, #1
 800c0d6:	3608      	adds	r6, #8
 800c0d8:	e76d      	b.n	800bfb6 <_dtoa_r+0x3be>
 800c0da:	2702      	movs	r7, #2
 800c0dc:	e770      	b.n	800bfc0 <_dtoa_r+0x3c8>
 800c0de:	46d8      	mov	r8, fp
 800c0e0:	9c08      	ldr	r4, [sp, #32]
 800c0e2:	e78f      	b.n	800c004 <_dtoa_r+0x40c>
 800c0e4:	9903      	ldr	r1, [sp, #12]
 800c0e6:	4b29      	ldr	r3, [pc, #164]	; (800c18c <_dtoa_r+0x594>)
 800c0e8:	4421      	add	r1, r4
 800c0ea:	9112      	str	r1, [sp, #72]	; 0x48
 800c0ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c0f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0fa:	2900      	cmp	r1, #0
 800c0fc:	d054      	beq.n	800c1a8 <_dtoa_r+0x5b0>
 800c0fe:	2000      	movs	r0, #0
 800c100:	4928      	ldr	r1, [pc, #160]	; (800c1a4 <_dtoa_r+0x5ac>)
 800c102:	f7f4 fb4f 	bl	80007a4 <__aeabi_ddiv>
 800c106:	463b      	mov	r3, r7
 800c108:	4632      	mov	r2, r6
 800c10a:	f7f4 f869 	bl	80001e0 <__aeabi_dsub>
 800c10e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c112:	9f03      	ldr	r7, [sp, #12]
 800c114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c118:	f7f4 fcca 	bl	8000ab0 <__aeabi_d2iz>
 800c11c:	4604      	mov	r4, r0
 800c11e:	f7f4 f9ad 	bl	800047c <__aeabi_i2d>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c12a:	f7f4 f859 	bl	80001e0 <__aeabi_dsub>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	3430      	adds	r4, #48	; 0x30
 800c134:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c138:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c13c:	f807 4b01 	strb.w	r4, [r7], #1
 800c140:	f7f4 fc78 	bl	8000a34 <__aeabi_dcmplt>
 800c144:	2800      	cmp	r0, #0
 800c146:	d173      	bne.n	800c230 <_dtoa_r+0x638>
 800c148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c14c:	2000      	movs	r0, #0
 800c14e:	4911      	ldr	r1, [pc, #68]	; (800c194 <_dtoa_r+0x59c>)
 800c150:	f7f4 f846 	bl	80001e0 <__aeabi_dsub>
 800c154:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c158:	f7f4 fc6c 	bl	8000a34 <__aeabi_dcmplt>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f040 80b6 	bne.w	800c2ce <_dtoa_r+0x6d6>
 800c162:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c164:	429f      	cmp	r7, r3
 800c166:	f43f af7a 	beq.w	800c05e <_dtoa_r+0x466>
 800c16a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c16e:	2200      	movs	r2, #0
 800c170:	4b09      	ldr	r3, [pc, #36]	; (800c198 <_dtoa_r+0x5a0>)
 800c172:	f7f4 f9ed 	bl	8000550 <__aeabi_dmul>
 800c176:	2200      	movs	r2, #0
 800c178:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c17c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c180:	4b05      	ldr	r3, [pc, #20]	; (800c198 <_dtoa_r+0x5a0>)
 800c182:	f7f4 f9e5 	bl	8000550 <__aeabi_dmul>
 800c186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c18a:	e7c3      	b.n	800c114 <_dtoa_r+0x51c>
 800c18c:	0800e060 	.word	0x0800e060
 800c190:	0800e038 	.word	0x0800e038
 800c194:	3ff00000 	.word	0x3ff00000
 800c198:	40240000 	.word	0x40240000
 800c19c:	401c0000 	.word	0x401c0000
 800c1a0:	40140000 	.word	0x40140000
 800c1a4:	3fe00000 	.word	0x3fe00000
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	f7f4 f9d0 	bl	8000550 <__aeabi_dmul>
 800c1b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c1b6:	9c03      	ldr	r4, [sp, #12]
 800c1b8:	9314      	str	r3, [sp, #80]	; 0x50
 800c1ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1be:	f7f4 fc77 	bl	8000ab0 <__aeabi_d2iz>
 800c1c2:	9015      	str	r0, [sp, #84]	; 0x54
 800c1c4:	f7f4 f95a 	bl	800047c <__aeabi_i2d>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1d0:	f7f4 f806 	bl	80001e0 <__aeabi_dsub>
 800c1d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	3330      	adds	r3, #48	; 0x30
 800c1da:	f804 3b01 	strb.w	r3, [r4], #1
 800c1de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1e0:	460f      	mov	r7, r1
 800c1e2:	429c      	cmp	r4, r3
 800c1e4:	f04f 0200 	mov.w	r2, #0
 800c1e8:	d124      	bne.n	800c234 <_dtoa_r+0x63c>
 800c1ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c1ee:	4baf      	ldr	r3, [pc, #700]	; (800c4ac <_dtoa_r+0x8b4>)
 800c1f0:	f7f3 fff8 	bl	80001e4 <__adddf3>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f7f4 fc38 	bl	8000a70 <__aeabi_dcmpgt>
 800c200:	2800      	cmp	r0, #0
 800c202:	d163      	bne.n	800c2cc <_dtoa_r+0x6d4>
 800c204:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c208:	2000      	movs	r0, #0
 800c20a:	49a8      	ldr	r1, [pc, #672]	; (800c4ac <_dtoa_r+0x8b4>)
 800c20c:	f7f3 ffe8 	bl	80001e0 <__aeabi_dsub>
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	4630      	mov	r0, r6
 800c216:	4639      	mov	r1, r7
 800c218:	f7f4 fc0c 	bl	8000a34 <__aeabi_dcmplt>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	f43f af1e 	beq.w	800c05e <_dtoa_r+0x466>
 800c222:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c224:	1e7b      	subs	r3, r7, #1
 800c226:	9314      	str	r3, [sp, #80]	; 0x50
 800c228:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c22c:	2b30      	cmp	r3, #48	; 0x30
 800c22e:	d0f8      	beq.n	800c222 <_dtoa_r+0x62a>
 800c230:	46c3      	mov	fp, r8
 800c232:	e03b      	b.n	800c2ac <_dtoa_r+0x6b4>
 800c234:	4b9e      	ldr	r3, [pc, #632]	; (800c4b0 <_dtoa_r+0x8b8>)
 800c236:	f7f4 f98b 	bl	8000550 <__aeabi_dmul>
 800c23a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c23e:	e7bc      	b.n	800c1ba <_dtoa_r+0x5c2>
 800c240:	9f03      	ldr	r7, [sp, #12]
 800c242:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c24a:	4640      	mov	r0, r8
 800c24c:	4649      	mov	r1, r9
 800c24e:	f7f4 faa9 	bl	80007a4 <__aeabi_ddiv>
 800c252:	f7f4 fc2d 	bl	8000ab0 <__aeabi_d2iz>
 800c256:	4604      	mov	r4, r0
 800c258:	f7f4 f910 	bl	800047c <__aeabi_i2d>
 800c25c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c260:	f7f4 f976 	bl	8000550 <__aeabi_dmul>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	4640      	mov	r0, r8
 800c26a:	4649      	mov	r1, r9
 800c26c:	f7f3 ffb8 	bl	80001e0 <__aeabi_dsub>
 800c270:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c274:	f807 6b01 	strb.w	r6, [r7], #1
 800c278:	9e03      	ldr	r6, [sp, #12]
 800c27a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c27e:	1bbe      	subs	r6, r7, r6
 800c280:	45b4      	cmp	ip, r6
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	d136      	bne.n	800c2f6 <_dtoa_r+0x6fe>
 800c288:	f7f3 ffac 	bl	80001e4 <__adddf3>
 800c28c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c290:	4680      	mov	r8, r0
 800c292:	4689      	mov	r9, r1
 800c294:	f7f4 fbec 	bl	8000a70 <__aeabi_dcmpgt>
 800c298:	bb58      	cbnz	r0, 800c2f2 <_dtoa_r+0x6fa>
 800c29a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c29e:	4640      	mov	r0, r8
 800c2a0:	4649      	mov	r1, r9
 800c2a2:	f7f4 fbbd 	bl	8000a20 <__aeabi_dcmpeq>
 800c2a6:	b108      	cbz	r0, 800c2ac <_dtoa_r+0x6b4>
 800c2a8:	07e3      	lsls	r3, r4, #31
 800c2aa:	d422      	bmi.n	800c2f2 <_dtoa_r+0x6fa>
 800c2ac:	4651      	mov	r1, sl
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f000 fb0e 	bl	800c8d0 <_Bfree>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c2b8:	703b      	strb	r3, [r7, #0]
 800c2ba:	f10b 0301 	add.w	r3, fp, #1
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f43f ace6 	beq.w	800bc94 <_dtoa_r+0x9c>
 800c2c8:	601f      	str	r7, [r3, #0]
 800c2ca:	e4e3      	b.n	800bc94 <_dtoa_r+0x9c>
 800c2cc:	4627      	mov	r7, r4
 800c2ce:	463b      	mov	r3, r7
 800c2d0:	461f      	mov	r7, r3
 800c2d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2d6:	2a39      	cmp	r2, #57	; 0x39
 800c2d8:	d107      	bne.n	800c2ea <_dtoa_r+0x6f2>
 800c2da:	9a03      	ldr	r2, [sp, #12]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d1f7      	bne.n	800c2d0 <_dtoa_r+0x6d8>
 800c2e0:	2230      	movs	r2, #48	; 0x30
 800c2e2:	9903      	ldr	r1, [sp, #12]
 800c2e4:	f108 0801 	add.w	r8, r8, #1
 800c2e8:	700a      	strb	r2, [r1, #0]
 800c2ea:	781a      	ldrb	r2, [r3, #0]
 800c2ec:	3201      	adds	r2, #1
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	e79e      	b.n	800c230 <_dtoa_r+0x638>
 800c2f2:	46d8      	mov	r8, fp
 800c2f4:	e7eb      	b.n	800c2ce <_dtoa_r+0x6d6>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4b6d      	ldr	r3, [pc, #436]	; (800c4b0 <_dtoa_r+0x8b8>)
 800c2fa:	f7f4 f929 	bl	8000550 <__aeabi_dmul>
 800c2fe:	2200      	movs	r2, #0
 800c300:	2300      	movs	r3, #0
 800c302:	4680      	mov	r8, r0
 800c304:	4689      	mov	r9, r1
 800c306:	f7f4 fb8b 	bl	8000a20 <__aeabi_dcmpeq>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d09b      	beq.n	800c246 <_dtoa_r+0x64e>
 800c30e:	e7cd      	b.n	800c2ac <_dtoa_r+0x6b4>
 800c310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c312:	2a00      	cmp	r2, #0
 800c314:	f000 80c4 	beq.w	800c4a0 <_dtoa_r+0x8a8>
 800c318:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c31a:	2a01      	cmp	r2, #1
 800c31c:	f300 80a8 	bgt.w	800c470 <_dtoa_r+0x878>
 800c320:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c322:	2a00      	cmp	r2, #0
 800c324:	f000 80a0 	beq.w	800c468 <_dtoa_r+0x870>
 800c328:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c32c:	464f      	mov	r7, r9
 800c32e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c332:	2101      	movs	r1, #1
 800c334:	441a      	add	r2, r3
 800c336:	4628      	mov	r0, r5
 800c338:	4499      	add	r9, r3
 800c33a:	9209      	str	r2, [sp, #36]	; 0x24
 800c33c:	f000 fb7e 	bl	800ca3c <__i2b>
 800c340:	4606      	mov	r6, r0
 800c342:	b15f      	cbz	r7, 800c35c <_dtoa_r+0x764>
 800c344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c346:	2b00      	cmp	r3, #0
 800c348:	dd08      	ble.n	800c35c <_dtoa_r+0x764>
 800c34a:	42bb      	cmp	r3, r7
 800c34c:	bfa8      	it	ge
 800c34e:	463b      	movge	r3, r7
 800c350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c352:	eba9 0903 	sub.w	r9, r9, r3
 800c356:	1aff      	subs	r7, r7, r3
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	9309      	str	r3, [sp, #36]	; 0x24
 800c35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c35e:	b1f3      	cbz	r3, 800c39e <_dtoa_r+0x7a6>
 800c360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c362:	2b00      	cmp	r3, #0
 800c364:	f000 80a0 	beq.w	800c4a8 <_dtoa_r+0x8b0>
 800c368:	2c00      	cmp	r4, #0
 800c36a:	dd10      	ble.n	800c38e <_dtoa_r+0x796>
 800c36c:	4631      	mov	r1, r6
 800c36e:	4622      	mov	r2, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 fc21 	bl	800cbb8 <__pow5mult>
 800c376:	4652      	mov	r2, sl
 800c378:	4601      	mov	r1, r0
 800c37a:	4606      	mov	r6, r0
 800c37c:	4628      	mov	r0, r5
 800c37e:	f000 fb73 	bl	800ca68 <__multiply>
 800c382:	4680      	mov	r8, r0
 800c384:	4651      	mov	r1, sl
 800c386:	4628      	mov	r0, r5
 800c388:	f000 faa2 	bl	800c8d0 <_Bfree>
 800c38c:	46c2      	mov	sl, r8
 800c38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c390:	1b1a      	subs	r2, r3, r4
 800c392:	d004      	beq.n	800c39e <_dtoa_r+0x7a6>
 800c394:	4651      	mov	r1, sl
 800c396:	4628      	mov	r0, r5
 800c398:	f000 fc0e 	bl	800cbb8 <__pow5mult>
 800c39c:	4682      	mov	sl, r0
 800c39e:	2101      	movs	r1, #1
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f000 fb4b 	bl	800ca3c <__i2b>
 800c3a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f340 8082 	ble.w	800c4b4 <_dtoa_r+0x8bc>
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	4601      	mov	r1, r0
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f000 fbff 	bl	800cbb8 <__pow5mult>
 800c3ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3bc:	4604      	mov	r4, r0
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	dd7b      	ble.n	800c4ba <_dtoa_r+0x8c2>
 800c3c2:	f04f 0800 	mov.w	r8, #0
 800c3c6:	6923      	ldr	r3, [r4, #16]
 800c3c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3cc:	6918      	ldr	r0, [r3, #16]
 800c3ce:	f000 fae7 	bl	800c9a0 <__hi0bits>
 800c3d2:	f1c0 0020 	rsb	r0, r0, #32
 800c3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d8:	4418      	add	r0, r3
 800c3da:	f010 001f 	ands.w	r0, r0, #31
 800c3de:	f000 8092 	beq.w	800c506 <_dtoa_r+0x90e>
 800c3e2:	f1c0 0320 	rsb	r3, r0, #32
 800c3e6:	2b04      	cmp	r3, #4
 800c3e8:	f340 8085 	ble.w	800c4f6 <_dtoa_r+0x8fe>
 800c3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ee:	f1c0 001c 	rsb	r0, r0, #28
 800c3f2:	4403      	add	r3, r0
 800c3f4:	4481      	add	r9, r0
 800c3f6:	4407      	add	r7, r0
 800c3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3fa:	f1b9 0f00 	cmp.w	r9, #0
 800c3fe:	dd05      	ble.n	800c40c <_dtoa_r+0x814>
 800c400:	4651      	mov	r1, sl
 800c402:	464a      	mov	r2, r9
 800c404:	4628      	mov	r0, r5
 800c406:	f000 fc31 	bl	800cc6c <__lshift>
 800c40a:	4682      	mov	sl, r0
 800c40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c40e:	2b00      	cmp	r3, #0
 800c410:	dd05      	ble.n	800c41e <_dtoa_r+0x826>
 800c412:	4621      	mov	r1, r4
 800c414:	461a      	mov	r2, r3
 800c416:	4628      	mov	r0, r5
 800c418:	f000 fc28 	bl	800cc6c <__lshift>
 800c41c:	4604      	mov	r4, r0
 800c41e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d072      	beq.n	800c50a <_dtoa_r+0x912>
 800c424:	4621      	mov	r1, r4
 800c426:	4650      	mov	r0, sl
 800c428:	f000 fc8c 	bl	800cd44 <__mcmp>
 800c42c:	2800      	cmp	r0, #0
 800c42e:	da6c      	bge.n	800c50a <_dtoa_r+0x912>
 800c430:	2300      	movs	r3, #0
 800c432:	4651      	mov	r1, sl
 800c434:	220a      	movs	r2, #10
 800c436:	4628      	mov	r0, r5
 800c438:	f000 fa6c 	bl	800c914 <__multadd>
 800c43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c43e:	4682      	mov	sl, r0
 800c440:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c444:	2b00      	cmp	r3, #0
 800c446:	f000 81ac 	beq.w	800c7a2 <_dtoa_r+0xbaa>
 800c44a:	2300      	movs	r3, #0
 800c44c:	4631      	mov	r1, r6
 800c44e:	220a      	movs	r2, #10
 800c450:	4628      	mov	r0, r5
 800c452:	f000 fa5f 	bl	800c914 <__multadd>
 800c456:	9b06      	ldr	r3, [sp, #24]
 800c458:	4606      	mov	r6, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f300 8093 	bgt.w	800c586 <_dtoa_r+0x98e>
 800c460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c462:	2b02      	cmp	r3, #2
 800c464:	dc59      	bgt.n	800c51a <_dtoa_r+0x922>
 800c466:	e08e      	b.n	800c586 <_dtoa_r+0x98e>
 800c468:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c46a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c46e:	e75d      	b.n	800c32c <_dtoa_r+0x734>
 800c470:	9b08      	ldr	r3, [sp, #32]
 800c472:	1e5c      	subs	r4, r3, #1
 800c474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c476:	42a3      	cmp	r3, r4
 800c478:	bfbf      	itttt	lt
 800c47a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c47c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c47e:	1ae3      	sublt	r3, r4, r3
 800c480:	18d2      	addlt	r2, r2, r3
 800c482:	bfa8      	it	ge
 800c484:	1b1c      	subge	r4, r3, r4
 800c486:	9b08      	ldr	r3, [sp, #32]
 800c488:	bfbe      	ittt	lt
 800c48a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c48c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800c48e:	2400      	movlt	r4, #0
 800c490:	2b00      	cmp	r3, #0
 800c492:	bfb5      	itete	lt
 800c494:	eba9 0703 	sublt.w	r7, r9, r3
 800c498:	464f      	movge	r7, r9
 800c49a:	2300      	movlt	r3, #0
 800c49c:	9b08      	ldrge	r3, [sp, #32]
 800c49e:	e747      	b.n	800c330 <_dtoa_r+0x738>
 800c4a0:	464f      	mov	r7, r9
 800c4a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c4a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c4a6:	e74c      	b.n	800c342 <_dtoa_r+0x74a>
 800c4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4aa:	e773      	b.n	800c394 <_dtoa_r+0x79c>
 800c4ac:	3fe00000 	.word	0x3fe00000
 800c4b0:	40240000 	.word	0x40240000
 800c4b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	dc18      	bgt.n	800c4ec <_dtoa_r+0x8f4>
 800c4ba:	9b04      	ldr	r3, [sp, #16]
 800c4bc:	b9b3      	cbnz	r3, 800c4ec <_dtoa_r+0x8f4>
 800c4be:	9b05      	ldr	r3, [sp, #20]
 800c4c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4c4:	b993      	cbnz	r3, 800c4ec <_dtoa_r+0x8f4>
 800c4c6:	9b05      	ldr	r3, [sp, #20]
 800c4c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4cc:	0d1b      	lsrs	r3, r3, #20
 800c4ce:	051b      	lsls	r3, r3, #20
 800c4d0:	b17b      	cbz	r3, 800c4f2 <_dtoa_r+0x8fa>
 800c4d2:	f04f 0801 	mov.w	r8, #1
 800c4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d8:	f109 0901 	add.w	r9, r9, #1
 800c4dc:	3301      	adds	r3, #1
 800c4de:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f47f af6f 	bne.w	800c3c6 <_dtoa_r+0x7ce>
 800c4e8:	2001      	movs	r0, #1
 800c4ea:	e774      	b.n	800c3d6 <_dtoa_r+0x7de>
 800c4ec:	f04f 0800 	mov.w	r8, #0
 800c4f0:	e7f6      	b.n	800c4e0 <_dtoa_r+0x8e8>
 800c4f2:	4698      	mov	r8, r3
 800c4f4:	e7f4      	b.n	800c4e0 <_dtoa_r+0x8e8>
 800c4f6:	d080      	beq.n	800c3fa <_dtoa_r+0x802>
 800c4f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4fa:	331c      	adds	r3, #28
 800c4fc:	441a      	add	r2, r3
 800c4fe:	4499      	add	r9, r3
 800c500:	441f      	add	r7, r3
 800c502:	9209      	str	r2, [sp, #36]	; 0x24
 800c504:	e779      	b.n	800c3fa <_dtoa_r+0x802>
 800c506:	4603      	mov	r3, r0
 800c508:	e7f6      	b.n	800c4f8 <_dtoa_r+0x900>
 800c50a:	9b08      	ldr	r3, [sp, #32]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dc34      	bgt.n	800c57a <_dtoa_r+0x982>
 800c510:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c512:	2b02      	cmp	r3, #2
 800c514:	dd31      	ble.n	800c57a <_dtoa_r+0x982>
 800c516:	9b08      	ldr	r3, [sp, #32]
 800c518:	9306      	str	r3, [sp, #24]
 800c51a:	9b06      	ldr	r3, [sp, #24]
 800c51c:	b963      	cbnz	r3, 800c538 <_dtoa_r+0x940>
 800c51e:	4621      	mov	r1, r4
 800c520:	2205      	movs	r2, #5
 800c522:	4628      	mov	r0, r5
 800c524:	f000 f9f6 	bl	800c914 <__multadd>
 800c528:	4601      	mov	r1, r0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4650      	mov	r0, sl
 800c52e:	f000 fc09 	bl	800cd44 <__mcmp>
 800c532:	2800      	cmp	r0, #0
 800c534:	f73f adbf 	bgt.w	800c0b6 <_dtoa_r+0x4be>
 800c538:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c53a:	9f03      	ldr	r7, [sp, #12]
 800c53c:	ea6f 0b03 	mvn.w	fp, r3
 800c540:	f04f 0800 	mov.w	r8, #0
 800c544:	4621      	mov	r1, r4
 800c546:	4628      	mov	r0, r5
 800c548:	f000 f9c2 	bl	800c8d0 <_Bfree>
 800c54c:	2e00      	cmp	r6, #0
 800c54e:	f43f aead 	beq.w	800c2ac <_dtoa_r+0x6b4>
 800c552:	f1b8 0f00 	cmp.w	r8, #0
 800c556:	d005      	beq.n	800c564 <_dtoa_r+0x96c>
 800c558:	45b0      	cmp	r8, r6
 800c55a:	d003      	beq.n	800c564 <_dtoa_r+0x96c>
 800c55c:	4641      	mov	r1, r8
 800c55e:	4628      	mov	r0, r5
 800c560:	f000 f9b6 	bl	800c8d0 <_Bfree>
 800c564:	4631      	mov	r1, r6
 800c566:	4628      	mov	r0, r5
 800c568:	f000 f9b2 	bl	800c8d0 <_Bfree>
 800c56c:	e69e      	b.n	800c2ac <_dtoa_r+0x6b4>
 800c56e:	2400      	movs	r4, #0
 800c570:	4626      	mov	r6, r4
 800c572:	e7e1      	b.n	800c538 <_dtoa_r+0x940>
 800c574:	46c3      	mov	fp, r8
 800c576:	4626      	mov	r6, r4
 800c578:	e59d      	b.n	800c0b6 <_dtoa_r+0x4be>
 800c57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 80c8 	beq.w	800c712 <_dtoa_r+0xb1a>
 800c582:	9b08      	ldr	r3, [sp, #32]
 800c584:	9306      	str	r3, [sp, #24]
 800c586:	2f00      	cmp	r7, #0
 800c588:	dd05      	ble.n	800c596 <_dtoa_r+0x99e>
 800c58a:	4631      	mov	r1, r6
 800c58c:	463a      	mov	r2, r7
 800c58e:	4628      	mov	r0, r5
 800c590:	f000 fb6c 	bl	800cc6c <__lshift>
 800c594:	4606      	mov	r6, r0
 800c596:	f1b8 0f00 	cmp.w	r8, #0
 800c59a:	d05b      	beq.n	800c654 <_dtoa_r+0xa5c>
 800c59c:	4628      	mov	r0, r5
 800c59e:	6871      	ldr	r1, [r6, #4]
 800c5a0:	f000 f956 	bl	800c850 <_Balloc>
 800c5a4:	4607      	mov	r7, r0
 800c5a6:	b928      	cbnz	r0, 800c5b4 <_dtoa_r+0x9bc>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c5ae:	4b81      	ldr	r3, [pc, #516]	; (800c7b4 <_dtoa_r+0xbbc>)
 800c5b0:	f7ff bb36 	b.w	800bc20 <_dtoa_r+0x28>
 800c5b4:	6932      	ldr	r2, [r6, #16]
 800c5b6:	f106 010c 	add.w	r1, r6, #12
 800c5ba:	3202      	adds	r2, #2
 800c5bc:	0092      	lsls	r2, r2, #2
 800c5be:	300c      	adds	r0, #12
 800c5c0:	f000 fd68 	bl	800d094 <memcpy>
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	4639      	mov	r1, r7
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	f000 fb4f 	bl	800cc6c <__lshift>
 800c5ce:	46b0      	mov	r8, r6
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	9b03      	ldr	r3, [sp, #12]
 800c5d4:	9a03      	ldr	r2, [sp, #12]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	9308      	str	r3, [sp, #32]
 800c5da:	9b06      	ldr	r3, [sp, #24]
 800c5dc:	4413      	add	r3, r2
 800c5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5e0:	9b04      	ldr	r3, [sp, #16]
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5e8:	9b08      	ldr	r3, [sp, #32]
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	4650      	mov	r0, sl
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	f7ff fa78 	bl	800bae6 <quorem>
 800c5f6:	4641      	mov	r1, r8
 800c5f8:	9006      	str	r0, [sp, #24]
 800c5fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c5fe:	4650      	mov	r0, sl
 800c600:	f000 fba0 	bl	800cd44 <__mcmp>
 800c604:	4632      	mov	r2, r6
 800c606:	9009      	str	r0, [sp, #36]	; 0x24
 800c608:	4621      	mov	r1, r4
 800c60a:	4628      	mov	r0, r5
 800c60c:	f000 fbb6 	bl	800cd7c <__mdiff>
 800c610:	68c2      	ldr	r2, [r0, #12]
 800c612:	4607      	mov	r7, r0
 800c614:	bb02      	cbnz	r2, 800c658 <_dtoa_r+0xa60>
 800c616:	4601      	mov	r1, r0
 800c618:	4650      	mov	r0, sl
 800c61a:	f000 fb93 	bl	800cd44 <__mcmp>
 800c61e:	4602      	mov	r2, r0
 800c620:	4639      	mov	r1, r7
 800c622:	4628      	mov	r0, r5
 800c624:	920c      	str	r2, [sp, #48]	; 0x30
 800c626:	f000 f953 	bl	800c8d0 <_Bfree>
 800c62a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c62c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c62e:	9f08      	ldr	r7, [sp, #32]
 800c630:	ea43 0102 	orr.w	r1, r3, r2
 800c634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c636:	4319      	orrs	r1, r3
 800c638:	d110      	bne.n	800c65c <_dtoa_r+0xa64>
 800c63a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c63e:	d029      	beq.n	800c694 <_dtoa_r+0xa9c>
 800c640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c642:	2b00      	cmp	r3, #0
 800c644:	dd02      	ble.n	800c64c <_dtoa_r+0xa54>
 800c646:	9b06      	ldr	r3, [sp, #24]
 800c648:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c64c:	9b04      	ldr	r3, [sp, #16]
 800c64e:	f883 9000 	strb.w	r9, [r3]
 800c652:	e777      	b.n	800c544 <_dtoa_r+0x94c>
 800c654:	4630      	mov	r0, r6
 800c656:	e7ba      	b.n	800c5ce <_dtoa_r+0x9d6>
 800c658:	2201      	movs	r2, #1
 800c65a:	e7e1      	b.n	800c620 <_dtoa_r+0xa28>
 800c65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	db04      	blt.n	800c66c <_dtoa_r+0xa74>
 800c662:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c664:	430b      	orrs	r3, r1
 800c666:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c668:	430b      	orrs	r3, r1
 800c66a:	d120      	bne.n	800c6ae <_dtoa_r+0xab6>
 800c66c:	2a00      	cmp	r2, #0
 800c66e:	dded      	ble.n	800c64c <_dtoa_r+0xa54>
 800c670:	4651      	mov	r1, sl
 800c672:	2201      	movs	r2, #1
 800c674:	4628      	mov	r0, r5
 800c676:	f000 faf9 	bl	800cc6c <__lshift>
 800c67a:	4621      	mov	r1, r4
 800c67c:	4682      	mov	sl, r0
 800c67e:	f000 fb61 	bl	800cd44 <__mcmp>
 800c682:	2800      	cmp	r0, #0
 800c684:	dc03      	bgt.n	800c68e <_dtoa_r+0xa96>
 800c686:	d1e1      	bne.n	800c64c <_dtoa_r+0xa54>
 800c688:	f019 0f01 	tst.w	r9, #1
 800c68c:	d0de      	beq.n	800c64c <_dtoa_r+0xa54>
 800c68e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c692:	d1d8      	bne.n	800c646 <_dtoa_r+0xa4e>
 800c694:	2339      	movs	r3, #57	; 0x39
 800c696:	9a04      	ldr	r2, [sp, #16]
 800c698:	7013      	strb	r3, [r2, #0]
 800c69a:	463b      	mov	r3, r7
 800c69c:	461f      	mov	r7, r3
 800c69e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	2a39      	cmp	r2, #57	; 0x39
 800c6a6:	d06b      	beq.n	800c780 <_dtoa_r+0xb88>
 800c6a8:	3201      	adds	r2, #1
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	e74a      	b.n	800c544 <_dtoa_r+0x94c>
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	dd07      	ble.n	800c6c2 <_dtoa_r+0xaca>
 800c6b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6b6:	d0ed      	beq.n	800c694 <_dtoa_r+0xa9c>
 800c6b8:	9a04      	ldr	r2, [sp, #16]
 800c6ba:	f109 0301 	add.w	r3, r9, #1
 800c6be:	7013      	strb	r3, [r2, #0]
 800c6c0:	e740      	b.n	800c544 <_dtoa_r+0x94c>
 800c6c2:	9b08      	ldr	r3, [sp, #32]
 800c6c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6c6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d042      	beq.n	800c754 <_dtoa_r+0xb5c>
 800c6ce:	4651      	mov	r1, sl
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	220a      	movs	r2, #10
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f000 f91d 	bl	800c914 <__multadd>
 800c6da:	45b0      	cmp	r8, r6
 800c6dc:	4682      	mov	sl, r0
 800c6de:	f04f 0300 	mov.w	r3, #0
 800c6e2:	f04f 020a 	mov.w	r2, #10
 800c6e6:	4641      	mov	r1, r8
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	d107      	bne.n	800c6fc <_dtoa_r+0xb04>
 800c6ec:	f000 f912 	bl	800c914 <__multadd>
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	9b08      	ldr	r3, [sp, #32]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	9308      	str	r3, [sp, #32]
 800c6fa:	e775      	b.n	800c5e8 <_dtoa_r+0x9f0>
 800c6fc:	f000 f90a 	bl	800c914 <__multadd>
 800c700:	4631      	mov	r1, r6
 800c702:	4680      	mov	r8, r0
 800c704:	2300      	movs	r3, #0
 800c706:	220a      	movs	r2, #10
 800c708:	4628      	mov	r0, r5
 800c70a:	f000 f903 	bl	800c914 <__multadd>
 800c70e:	4606      	mov	r6, r0
 800c710:	e7f0      	b.n	800c6f4 <_dtoa_r+0xafc>
 800c712:	9b08      	ldr	r3, [sp, #32]
 800c714:	9306      	str	r3, [sp, #24]
 800c716:	9f03      	ldr	r7, [sp, #12]
 800c718:	4621      	mov	r1, r4
 800c71a:	4650      	mov	r0, sl
 800c71c:	f7ff f9e3 	bl	800bae6 <quorem>
 800c720:	9b03      	ldr	r3, [sp, #12]
 800c722:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c726:	f807 9b01 	strb.w	r9, [r7], #1
 800c72a:	1afa      	subs	r2, r7, r3
 800c72c:	9b06      	ldr	r3, [sp, #24]
 800c72e:	4293      	cmp	r3, r2
 800c730:	dd07      	ble.n	800c742 <_dtoa_r+0xb4a>
 800c732:	4651      	mov	r1, sl
 800c734:	2300      	movs	r3, #0
 800c736:	220a      	movs	r2, #10
 800c738:	4628      	mov	r0, r5
 800c73a:	f000 f8eb 	bl	800c914 <__multadd>
 800c73e:	4682      	mov	sl, r0
 800c740:	e7ea      	b.n	800c718 <_dtoa_r+0xb20>
 800c742:	9b06      	ldr	r3, [sp, #24]
 800c744:	f04f 0800 	mov.w	r8, #0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	bfcc      	ite	gt
 800c74c:	461f      	movgt	r7, r3
 800c74e:	2701      	movle	r7, #1
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	441f      	add	r7, r3
 800c754:	4651      	mov	r1, sl
 800c756:	2201      	movs	r2, #1
 800c758:	4628      	mov	r0, r5
 800c75a:	f000 fa87 	bl	800cc6c <__lshift>
 800c75e:	4621      	mov	r1, r4
 800c760:	4682      	mov	sl, r0
 800c762:	f000 faef 	bl	800cd44 <__mcmp>
 800c766:	2800      	cmp	r0, #0
 800c768:	dc97      	bgt.n	800c69a <_dtoa_r+0xaa2>
 800c76a:	d102      	bne.n	800c772 <_dtoa_r+0xb7a>
 800c76c:	f019 0f01 	tst.w	r9, #1
 800c770:	d193      	bne.n	800c69a <_dtoa_r+0xaa2>
 800c772:	463b      	mov	r3, r7
 800c774:	461f      	mov	r7, r3
 800c776:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c77a:	2a30      	cmp	r2, #48	; 0x30
 800c77c:	d0fa      	beq.n	800c774 <_dtoa_r+0xb7c>
 800c77e:	e6e1      	b.n	800c544 <_dtoa_r+0x94c>
 800c780:	9a03      	ldr	r2, [sp, #12]
 800c782:	429a      	cmp	r2, r3
 800c784:	d18a      	bne.n	800c69c <_dtoa_r+0xaa4>
 800c786:	2331      	movs	r3, #49	; 0x31
 800c788:	f10b 0b01 	add.w	fp, fp, #1
 800c78c:	e797      	b.n	800c6be <_dtoa_r+0xac6>
 800c78e:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <_dtoa_r+0xbc0>)
 800c790:	f7ff ba9f 	b.w	800bcd2 <_dtoa_r+0xda>
 800c794:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c796:	2b00      	cmp	r3, #0
 800c798:	f47f aa77 	bne.w	800bc8a <_dtoa_r+0x92>
 800c79c:	4b07      	ldr	r3, [pc, #28]	; (800c7bc <_dtoa_r+0xbc4>)
 800c79e:	f7ff ba98 	b.w	800bcd2 <_dtoa_r+0xda>
 800c7a2:	9b06      	ldr	r3, [sp, #24]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dcb6      	bgt.n	800c716 <_dtoa_r+0xb1e>
 800c7a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	f73f aeb5 	bgt.w	800c51a <_dtoa_r+0x922>
 800c7b0:	e7b1      	b.n	800c716 <_dtoa_r+0xb1e>
 800c7b2:	bf00      	nop
 800c7b4:	0800dfcc 	.word	0x0800dfcc
 800c7b8:	0800df2c 	.word	0x0800df2c
 800c7bc:	0800df50 	.word	0x0800df50

0800c7c0 <_free_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	d040      	beq.n	800c84a <_free_r+0x8a>
 800c7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7cc:	1f0c      	subs	r4, r1, #4
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfb8      	it	lt
 800c7d2:	18e4      	addlt	r4, r4, r3
 800c7d4:	f7fe fb7a 	bl	800aecc <__malloc_lock>
 800c7d8:	4a1c      	ldr	r2, [pc, #112]	; (800c84c <_free_r+0x8c>)
 800c7da:	6813      	ldr	r3, [r2, #0]
 800c7dc:	b933      	cbnz	r3, 800c7ec <_free_r+0x2c>
 800c7de:	6063      	str	r3, [r4, #4]
 800c7e0:	6014      	str	r4, [r2, #0]
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7e8:	f7fe bb76 	b.w	800aed8 <__malloc_unlock>
 800c7ec:	42a3      	cmp	r3, r4
 800c7ee:	d908      	bls.n	800c802 <_free_r+0x42>
 800c7f0:	6820      	ldr	r0, [r4, #0]
 800c7f2:	1821      	adds	r1, r4, r0
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	bf01      	itttt	eq
 800c7f8:	6819      	ldreq	r1, [r3, #0]
 800c7fa:	685b      	ldreq	r3, [r3, #4]
 800c7fc:	1809      	addeq	r1, r1, r0
 800c7fe:	6021      	streq	r1, [r4, #0]
 800c800:	e7ed      	b.n	800c7de <_free_r+0x1e>
 800c802:	461a      	mov	r2, r3
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	b10b      	cbz	r3, 800c80c <_free_r+0x4c>
 800c808:	42a3      	cmp	r3, r4
 800c80a:	d9fa      	bls.n	800c802 <_free_r+0x42>
 800c80c:	6811      	ldr	r1, [r2, #0]
 800c80e:	1850      	adds	r0, r2, r1
 800c810:	42a0      	cmp	r0, r4
 800c812:	d10b      	bne.n	800c82c <_free_r+0x6c>
 800c814:	6820      	ldr	r0, [r4, #0]
 800c816:	4401      	add	r1, r0
 800c818:	1850      	adds	r0, r2, r1
 800c81a:	4283      	cmp	r3, r0
 800c81c:	6011      	str	r1, [r2, #0]
 800c81e:	d1e0      	bne.n	800c7e2 <_free_r+0x22>
 800c820:	6818      	ldr	r0, [r3, #0]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	4408      	add	r0, r1
 800c826:	6010      	str	r0, [r2, #0]
 800c828:	6053      	str	r3, [r2, #4]
 800c82a:	e7da      	b.n	800c7e2 <_free_r+0x22>
 800c82c:	d902      	bls.n	800c834 <_free_r+0x74>
 800c82e:	230c      	movs	r3, #12
 800c830:	602b      	str	r3, [r5, #0]
 800c832:	e7d6      	b.n	800c7e2 <_free_r+0x22>
 800c834:	6820      	ldr	r0, [r4, #0]
 800c836:	1821      	adds	r1, r4, r0
 800c838:	428b      	cmp	r3, r1
 800c83a:	bf01      	itttt	eq
 800c83c:	6819      	ldreq	r1, [r3, #0]
 800c83e:	685b      	ldreq	r3, [r3, #4]
 800c840:	1809      	addeq	r1, r1, r0
 800c842:	6021      	streq	r1, [r4, #0]
 800c844:	6063      	str	r3, [r4, #4]
 800c846:	6054      	str	r4, [r2, #4]
 800c848:	e7cb      	b.n	800c7e2 <_free_r+0x22>
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	200017ac 	.word	0x200017ac

0800c850 <_Balloc>:
 800c850:	b570      	push	{r4, r5, r6, lr}
 800c852:	69c6      	ldr	r6, [r0, #28]
 800c854:	4604      	mov	r4, r0
 800c856:	460d      	mov	r5, r1
 800c858:	b976      	cbnz	r6, 800c878 <_Balloc+0x28>
 800c85a:	2010      	movs	r0, #16
 800c85c:	f7fe fa86 	bl	800ad6c <malloc>
 800c860:	4602      	mov	r2, r0
 800c862:	61e0      	str	r0, [r4, #28]
 800c864:	b920      	cbnz	r0, 800c870 <_Balloc+0x20>
 800c866:	216b      	movs	r1, #107	; 0x6b
 800c868:	4b17      	ldr	r3, [pc, #92]	; (800c8c8 <_Balloc+0x78>)
 800c86a:	4818      	ldr	r0, [pc, #96]	; (800c8cc <_Balloc+0x7c>)
 800c86c:	f000 fc20 	bl	800d0b0 <__assert_func>
 800c870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c874:	6006      	str	r6, [r0, #0]
 800c876:	60c6      	str	r6, [r0, #12]
 800c878:	69e6      	ldr	r6, [r4, #28]
 800c87a:	68f3      	ldr	r3, [r6, #12]
 800c87c:	b183      	cbz	r3, 800c8a0 <_Balloc+0x50>
 800c87e:	69e3      	ldr	r3, [r4, #28]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c886:	b9b8      	cbnz	r0, 800c8b8 <_Balloc+0x68>
 800c888:	2101      	movs	r1, #1
 800c88a:	fa01 f605 	lsl.w	r6, r1, r5
 800c88e:	1d72      	adds	r2, r6, #5
 800c890:	4620      	mov	r0, r4
 800c892:	0092      	lsls	r2, r2, #2
 800c894:	f000 fc2a 	bl	800d0ec <_calloc_r>
 800c898:	b160      	cbz	r0, 800c8b4 <_Balloc+0x64>
 800c89a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c89e:	e00e      	b.n	800c8be <_Balloc+0x6e>
 800c8a0:	2221      	movs	r2, #33	; 0x21
 800c8a2:	2104      	movs	r1, #4
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f000 fc21 	bl	800d0ec <_calloc_r>
 800c8aa:	69e3      	ldr	r3, [r4, #28]
 800c8ac:	60f0      	str	r0, [r6, #12]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1e4      	bne.n	800c87e <_Balloc+0x2e>
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	bd70      	pop	{r4, r5, r6, pc}
 800c8b8:	6802      	ldr	r2, [r0, #0]
 800c8ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8be:	2300      	movs	r3, #0
 800c8c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8c4:	e7f7      	b.n	800c8b6 <_Balloc+0x66>
 800c8c6:	bf00      	nop
 800c8c8:	0800df5d 	.word	0x0800df5d
 800c8cc:	0800dfdd 	.word	0x0800dfdd

0800c8d0 <_Bfree>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	69c6      	ldr	r6, [r0, #28]
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	b976      	cbnz	r6, 800c8f8 <_Bfree+0x28>
 800c8da:	2010      	movs	r0, #16
 800c8dc:	f7fe fa46 	bl	800ad6c <malloc>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	61e8      	str	r0, [r5, #28]
 800c8e4:	b920      	cbnz	r0, 800c8f0 <_Bfree+0x20>
 800c8e6:	218f      	movs	r1, #143	; 0x8f
 800c8e8:	4b08      	ldr	r3, [pc, #32]	; (800c90c <_Bfree+0x3c>)
 800c8ea:	4809      	ldr	r0, [pc, #36]	; (800c910 <_Bfree+0x40>)
 800c8ec:	f000 fbe0 	bl	800d0b0 <__assert_func>
 800c8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8f4:	6006      	str	r6, [r0, #0]
 800c8f6:	60c6      	str	r6, [r0, #12]
 800c8f8:	b13c      	cbz	r4, 800c90a <_Bfree+0x3a>
 800c8fa:	69eb      	ldr	r3, [r5, #28]
 800c8fc:	6862      	ldr	r2, [r4, #4]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c904:	6021      	str	r1, [r4, #0]
 800c906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c90a:	bd70      	pop	{r4, r5, r6, pc}
 800c90c:	0800df5d 	.word	0x0800df5d
 800c910:	0800dfdd 	.word	0x0800dfdd

0800c914 <__multadd>:
 800c914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c918:	4607      	mov	r7, r0
 800c91a:	460c      	mov	r4, r1
 800c91c:	461e      	mov	r6, r3
 800c91e:	2000      	movs	r0, #0
 800c920:	690d      	ldr	r5, [r1, #16]
 800c922:	f101 0c14 	add.w	ip, r1, #20
 800c926:	f8dc 3000 	ldr.w	r3, [ip]
 800c92a:	3001      	adds	r0, #1
 800c92c:	b299      	uxth	r1, r3
 800c92e:	fb02 6101 	mla	r1, r2, r1, r6
 800c932:	0c1e      	lsrs	r6, r3, #16
 800c934:	0c0b      	lsrs	r3, r1, #16
 800c936:	fb02 3306 	mla	r3, r2, r6, r3
 800c93a:	b289      	uxth	r1, r1
 800c93c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c940:	4285      	cmp	r5, r0
 800c942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c946:	f84c 1b04 	str.w	r1, [ip], #4
 800c94a:	dcec      	bgt.n	800c926 <__multadd+0x12>
 800c94c:	b30e      	cbz	r6, 800c992 <__multadd+0x7e>
 800c94e:	68a3      	ldr	r3, [r4, #8]
 800c950:	42ab      	cmp	r3, r5
 800c952:	dc19      	bgt.n	800c988 <__multadd+0x74>
 800c954:	6861      	ldr	r1, [r4, #4]
 800c956:	4638      	mov	r0, r7
 800c958:	3101      	adds	r1, #1
 800c95a:	f7ff ff79 	bl	800c850 <_Balloc>
 800c95e:	4680      	mov	r8, r0
 800c960:	b928      	cbnz	r0, 800c96e <__multadd+0x5a>
 800c962:	4602      	mov	r2, r0
 800c964:	21ba      	movs	r1, #186	; 0xba
 800c966:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <__multadd+0x84>)
 800c968:	480c      	ldr	r0, [pc, #48]	; (800c99c <__multadd+0x88>)
 800c96a:	f000 fba1 	bl	800d0b0 <__assert_func>
 800c96e:	6922      	ldr	r2, [r4, #16]
 800c970:	f104 010c 	add.w	r1, r4, #12
 800c974:	3202      	adds	r2, #2
 800c976:	0092      	lsls	r2, r2, #2
 800c978:	300c      	adds	r0, #12
 800c97a:	f000 fb8b 	bl	800d094 <memcpy>
 800c97e:	4621      	mov	r1, r4
 800c980:	4638      	mov	r0, r7
 800c982:	f7ff ffa5 	bl	800c8d0 <_Bfree>
 800c986:	4644      	mov	r4, r8
 800c988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c98c:	3501      	adds	r5, #1
 800c98e:	615e      	str	r6, [r3, #20]
 800c990:	6125      	str	r5, [r4, #16]
 800c992:	4620      	mov	r0, r4
 800c994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c998:	0800dfcc 	.word	0x0800dfcc
 800c99c:	0800dfdd 	.word	0x0800dfdd

0800c9a0 <__hi0bits>:
 800c9a0:	0c02      	lsrs	r2, r0, #16
 800c9a2:	0412      	lsls	r2, r2, #16
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	b9ca      	cbnz	r2, 800c9dc <__hi0bits+0x3c>
 800c9a8:	0403      	lsls	r3, r0, #16
 800c9aa:	2010      	movs	r0, #16
 800c9ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c9b0:	bf04      	itt	eq
 800c9b2:	021b      	lsleq	r3, r3, #8
 800c9b4:	3008      	addeq	r0, #8
 800c9b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c9ba:	bf04      	itt	eq
 800c9bc:	011b      	lsleq	r3, r3, #4
 800c9be:	3004      	addeq	r0, #4
 800c9c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c9c4:	bf04      	itt	eq
 800c9c6:	009b      	lsleq	r3, r3, #2
 800c9c8:	3002      	addeq	r0, #2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	db05      	blt.n	800c9da <__hi0bits+0x3a>
 800c9ce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c9d2:	f100 0001 	add.w	r0, r0, #1
 800c9d6:	bf08      	it	eq
 800c9d8:	2020      	moveq	r0, #32
 800c9da:	4770      	bx	lr
 800c9dc:	2000      	movs	r0, #0
 800c9de:	e7e5      	b.n	800c9ac <__hi0bits+0xc>

0800c9e0 <__lo0bits>:
 800c9e0:	6803      	ldr	r3, [r0, #0]
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	f013 0007 	ands.w	r0, r3, #7
 800c9e8:	d00b      	beq.n	800ca02 <__lo0bits+0x22>
 800c9ea:	07d9      	lsls	r1, r3, #31
 800c9ec:	d421      	bmi.n	800ca32 <__lo0bits+0x52>
 800c9ee:	0798      	lsls	r0, r3, #30
 800c9f0:	bf49      	itett	mi
 800c9f2:	085b      	lsrmi	r3, r3, #1
 800c9f4:	089b      	lsrpl	r3, r3, #2
 800c9f6:	2001      	movmi	r0, #1
 800c9f8:	6013      	strmi	r3, [r2, #0]
 800c9fa:	bf5c      	itt	pl
 800c9fc:	2002      	movpl	r0, #2
 800c9fe:	6013      	strpl	r3, [r2, #0]
 800ca00:	4770      	bx	lr
 800ca02:	b299      	uxth	r1, r3
 800ca04:	b909      	cbnz	r1, 800ca0a <__lo0bits+0x2a>
 800ca06:	2010      	movs	r0, #16
 800ca08:	0c1b      	lsrs	r3, r3, #16
 800ca0a:	b2d9      	uxtb	r1, r3
 800ca0c:	b909      	cbnz	r1, 800ca12 <__lo0bits+0x32>
 800ca0e:	3008      	adds	r0, #8
 800ca10:	0a1b      	lsrs	r3, r3, #8
 800ca12:	0719      	lsls	r1, r3, #28
 800ca14:	bf04      	itt	eq
 800ca16:	091b      	lsreq	r3, r3, #4
 800ca18:	3004      	addeq	r0, #4
 800ca1a:	0799      	lsls	r1, r3, #30
 800ca1c:	bf04      	itt	eq
 800ca1e:	089b      	lsreq	r3, r3, #2
 800ca20:	3002      	addeq	r0, #2
 800ca22:	07d9      	lsls	r1, r3, #31
 800ca24:	d403      	bmi.n	800ca2e <__lo0bits+0x4e>
 800ca26:	085b      	lsrs	r3, r3, #1
 800ca28:	f100 0001 	add.w	r0, r0, #1
 800ca2c:	d003      	beq.n	800ca36 <__lo0bits+0x56>
 800ca2e:	6013      	str	r3, [r2, #0]
 800ca30:	4770      	bx	lr
 800ca32:	2000      	movs	r0, #0
 800ca34:	4770      	bx	lr
 800ca36:	2020      	movs	r0, #32
 800ca38:	4770      	bx	lr
	...

0800ca3c <__i2b>:
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	460c      	mov	r4, r1
 800ca40:	2101      	movs	r1, #1
 800ca42:	f7ff ff05 	bl	800c850 <_Balloc>
 800ca46:	4602      	mov	r2, r0
 800ca48:	b928      	cbnz	r0, 800ca56 <__i2b+0x1a>
 800ca4a:	f240 1145 	movw	r1, #325	; 0x145
 800ca4e:	4b04      	ldr	r3, [pc, #16]	; (800ca60 <__i2b+0x24>)
 800ca50:	4804      	ldr	r0, [pc, #16]	; (800ca64 <__i2b+0x28>)
 800ca52:	f000 fb2d 	bl	800d0b0 <__assert_func>
 800ca56:	2301      	movs	r3, #1
 800ca58:	6144      	str	r4, [r0, #20]
 800ca5a:	6103      	str	r3, [r0, #16]
 800ca5c:	bd10      	pop	{r4, pc}
 800ca5e:	bf00      	nop
 800ca60:	0800dfcc 	.word	0x0800dfcc
 800ca64:	0800dfdd 	.word	0x0800dfdd

0800ca68 <__multiply>:
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	4691      	mov	r9, r2
 800ca6e:	690a      	ldr	r2, [r1, #16]
 800ca70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca74:	460c      	mov	r4, r1
 800ca76:	429a      	cmp	r2, r3
 800ca78:	bfbe      	ittt	lt
 800ca7a:	460b      	movlt	r3, r1
 800ca7c:	464c      	movlt	r4, r9
 800ca7e:	4699      	movlt	r9, r3
 800ca80:	6927      	ldr	r7, [r4, #16]
 800ca82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca86:	68a3      	ldr	r3, [r4, #8]
 800ca88:	6861      	ldr	r1, [r4, #4]
 800ca8a:	eb07 060a 	add.w	r6, r7, sl
 800ca8e:	42b3      	cmp	r3, r6
 800ca90:	b085      	sub	sp, #20
 800ca92:	bfb8      	it	lt
 800ca94:	3101      	addlt	r1, #1
 800ca96:	f7ff fedb 	bl	800c850 <_Balloc>
 800ca9a:	b930      	cbnz	r0, 800caaa <__multiply+0x42>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800caa2:	4b43      	ldr	r3, [pc, #268]	; (800cbb0 <__multiply+0x148>)
 800caa4:	4843      	ldr	r0, [pc, #268]	; (800cbb4 <__multiply+0x14c>)
 800caa6:	f000 fb03 	bl	800d0b0 <__assert_func>
 800caaa:	f100 0514 	add.w	r5, r0, #20
 800caae:	462b      	mov	r3, r5
 800cab0:	2200      	movs	r2, #0
 800cab2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cab6:	4543      	cmp	r3, r8
 800cab8:	d321      	bcc.n	800cafe <__multiply+0x96>
 800caba:	f104 0314 	add.w	r3, r4, #20
 800cabe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cac2:	f109 0314 	add.w	r3, r9, #20
 800cac6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800caca:	9202      	str	r2, [sp, #8]
 800cacc:	1b3a      	subs	r2, r7, r4
 800cace:	3a15      	subs	r2, #21
 800cad0:	f022 0203 	bic.w	r2, r2, #3
 800cad4:	3204      	adds	r2, #4
 800cad6:	f104 0115 	add.w	r1, r4, #21
 800cada:	428f      	cmp	r7, r1
 800cadc:	bf38      	it	cc
 800cade:	2204      	movcc	r2, #4
 800cae0:	9201      	str	r2, [sp, #4]
 800cae2:	9a02      	ldr	r2, [sp, #8]
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d80c      	bhi.n	800cb04 <__multiply+0x9c>
 800caea:	2e00      	cmp	r6, #0
 800caec:	dd03      	ble.n	800caf6 <__multiply+0x8e>
 800caee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d05a      	beq.n	800cbac <__multiply+0x144>
 800caf6:	6106      	str	r6, [r0, #16]
 800caf8:	b005      	add	sp, #20
 800cafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafe:	f843 2b04 	str.w	r2, [r3], #4
 800cb02:	e7d8      	b.n	800cab6 <__multiply+0x4e>
 800cb04:	f8b3 a000 	ldrh.w	sl, [r3]
 800cb08:	f1ba 0f00 	cmp.w	sl, #0
 800cb0c:	d023      	beq.n	800cb56 <__multiply+0xee>
 800cb0e:	46a9      	mov	r9, r5
 800cb10:	f04f 0c00 	mov.w	ip, #0
 800cb14:	f104 0e14 	add.w	lr, r4, #20
 800cb18:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb1c:	f8d9 1000 	ldr.w	r1, [r9]
 800cb20:	fa1f fb82 	uxth.w	fp, r2
 800cb24:	b289      	uxth	r1, r1
 800cb26:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb2a:	4461      	add	r1, ip
 800cb2c:	f8d9 c000 	ldr.w	ip, [r9]
 800cb30:	0c12      	lsrs	r2, r2, #16
 800cb32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cb36:	fb0a c202 	mla	r2, sl, r2, ip
 800cb3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb3e:	b289      	uxth	r1, r1
 800cb40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb44:	4577      	cmp	r7, lr
 800cb46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb4a:	f849 1b04 	str.w	r1, [r9], #4
 800cb4e:	d8e3      	bhi.n	800cb18 <__multiply+0xb0>
 800cb50:	9a01      	ldr	r2, [sp, #4]
 800cb52:	f845 c002 	str.w	ip, [r5, r2]
 800cb56:	9a03      	ldr	r2, [sp, #12]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb5e:	f1b9 0f00 	cmp.w	r9, #0
 800cb62:	d021      	beq.n	800cba8 <__multiply+0x140>
 800cb64:	46ae      	mov	lr, r5
 800cb66:	f04f 0a00 	mov.w	sl, #0
 800cb6a:	6829      	ldr	r1, [r5, #0]
 800cb6c:	f104 0c14 	add.w	ip, r4, #20
 800cb70:	f8bc b000 	ldrh.w	fp, [ip]
 800cb74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb78:	b289      	uxth	r1, r1
 800cb7a:	fb09 220b 	mla	r2, r9, fp, r2
 800cb7e:	4452      	add	r2, sl
 800cb80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb84:	f84e 1b04 	str.w	r1, [lr], #4
 800cb88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cb8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb90:	f8be 1000 	ldrh.w	r1, [lr]
 800cb94:	4567      	cmp	r7, ip
 800cb96:	fb09 110a 	mla	r1, r9, sl, r1
 800cb9a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cb9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cba2:	d8e5      	bhi.n	800cb70 <__multiply+0x108>
 800cba4:	9a01      	ldr	r2, [sp, #4]
 800cba6:	50a9      	str	r1, [r5, r2]
 800cba8:	3504      	adds	r5, #4
 800cbaa:	e79a      	b.n	800cae2 <__multiply+0x7a>
 800cbac:	3e01      	subs	r6, #1
 800cbae:	e79c      	b.n	800caea <__multiply+0x82>
 800cbb0:	0800dfcc 	.word	0x0800dfcc
 800cbb4:	0800dfdd 	.word	0x0800dfdd

0800cbb8 <__pow5mult>:
 800cbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbbc:	4615      	mov	r5, r2
 800cbbe:	f012 0203 	ands.w	r2, r2, #3
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	460f      	mov	r7, r1
 800cbc6:	d007      	beq.n	800cbd8 <__pow5mult+0x20>
 800cbc8:	4c25      	ldr	r4, [pc, #148]	; (800cc60 <__pow5mult+0xa8>)
 800cbca:	3a01      	subs	r2, #1
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbd2:	f7ff fe9f 	bl	800c914 <__multadd>
 800cbd6:	4607      	mov	r7, r0
 800cbd8:	10ad      	asrs	r5, r5, #2
 800cbda:	d03d      	beq.n	800cc58 <__pow5mult+0xa0>
 800cbdc:	69f4      	ldr	r4, [r6, #28]
 800cbde:	b97c      	cbnz	r4, 800cc00 <__pow5mult+0x48>
 800cbe0:	2010      	movs	r0, #16
 800cbe2:	f7fe f8c3 	bl	800ad6c <malloc>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	61f0      	str	r0, [r6, #28]
 800cbea:	b928      	cbnz	r0, 800cbf8 <__pow5mult+0x40>
 800cbec:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cbf0:	4b1c      	ldr	r3, [pc, #112]	; (800cc64 <__pow5mult+0xac>)
 800cbf2:	481d      	ldr	r0, [pc, #116]	; (800cc68 <__pow5mult+0xb0>)
 800cbf4:	f000 fa5c 	bl	800d0b0 <__assert_func>
 800cbf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbfc:	6004      	str	r4, [r0, #0]
 800cbfe:	60c4      	str	r4, [r0, #12]
 800cc00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cc04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc08:	b94c      	cbnz	r4, 800cc1e <__pow5mult+0x66>
 800cc0a:	f240 2171 	movw	r1, #625	; 0x271
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f7ff ff14 	bl	800ca3c <__i2b>
 800cc14:	2300      	movs	r3, #0
 800cc16:	4604      	mov	r4, r0
 800cc18:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc1c:	6003      	str	r3, [r0, #0]
 800cc1e:	f04f 0900 	mov.w	r9, #0
 800cc22:	07eb      	lsls	r3, r5, #31
 800cc24:	d50a      	bpl.n	800cc3c <__pow5mult+0x84>
 800cc26:	4639      	mov	r1, r7
 800cc28:	4622      	mov	r2, r4
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f7ff ff1c 	bl	800ca68 <__multiply>
 800cc30:	4680      	mov	r8, r0
 800cc32:	4639      	mov	r1, r7
 800cc34:	4630      	mov	r0, r6
 800cc36:	f7ff fe4b 	bl	800c8d0 <_Bfree>
 800cc3a:	4647      	mov	r7, r8
 800cc3c:	106d      	asrs	r5, r5, #1
 800cc3e:	d00b      	beq.n	800cc58 <__pow5mult+0xa0>
 800cc40:	6820      	ldr	r0, [r4, #0]
 800cc42:	b938      	cbnz	r0, 800cc54 <__pow5mult+0x9c>
 800cc44:	4622      	mov	r2, r4
 800cc46:	4621      	mov	r1, r4
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f7ff ff0d 	bl	800ca68 <__multiply>
 800cc4e:	6020      	str	r0, [r4, #0]
 800cc50:	f8c0 9000 	str.w	r9, [r0]
 800cc54:	4604      	mov	r4, r0
 800cc56:	e7e4      	b.n	800cc22 <__pow5mult+0x6a>
 800cc58:	4638      	mov	r0, r7
 800cc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc5e:	bf00      	nop
 800cc60:	0800e128 	.word	0x0800e128
 800cc64:	0800df5d 	.word	0x0800df5d
 800cc68:	0800dfdd 	.word	0x0800dfdd

0800cc6c <__lshift>:
 800cc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc70:	460c      	mov	r4, r1
 800cc72:	4607      	mov	r7, r0
 800cc74:	4691      	mov	r9, r2
 800cc76:	6923      	ldr	r3, [r4, #16]
 800cc78:	6849      	ldr	r1, [r1, #4]
 800cc7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc7e:	68a3      	ldr	r3, [r4, #8]
 800cc80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc84:	f108 0601 	add.w	r6, r8, #1
 800cc88:	42b3      	cmp	r3, r6
 800cc8a:	db0b      	blt.n	800cca4 <__lshift+0x38>
 800cc8c:	4638      	mov	r0, r7
 800cc8e:	f7ff fddf 	bl	800c850 <_Balloc>
 800cc92:	4605      	mov	r5, r0
 800cc94:	b948      	cbnz	r0, 800ccaa <__lshift+0x3e>
 800cc96:	4602      	mov	r2, r0
 800cc98:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cc9c:	4b27      	ldr	r3, [pc, #156]	; (800cd3c <__lshift+0xd0>)
 800cc9e:	4828      	ldr	r0, [pc, #160]	; (800cd40 <__lshift+0xd4>)
 800cca0:	f000 fa06 	bl	800d0b0 <__assert_func>
 800cca4:	3101      	adds	r1, #1
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	e7ee      	b.n	800cc88 <__lshift+0x1c>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	f100 0114 	add.w	r1, r0, #20
 800ccb0:	f100 0210 	add.w	r2, r0, #16
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	4553      	cmp	r3, sl
 800ccb8:	db33      	blt.n	800cd22 <__lshift+0xb6>
 800ccba:	6920      	ldr	r0, [r4, #16]
 800ccbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccc0:	f104 0314 	add.w	r3, r4, #20
 800ccc4:	f019 091f 	ands.w	r9, r9, #31
 800ccc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccd0:	d02b      	beq.n	800cd2a <__lshift+0xbe>
 800ccd2:	468a      	mov	sl, r1
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f1c9 0e20 	rsb	lr, r9, #32
 800ccda:	6818      	ldr	r0, [r3, #0]
 800ccdc:	fa00 f009 	lsl.w	r0, r0, r9
 800cce0:	4310      	orrs	r0, r2
 800cce2:	f84a 0b04 	str.w	r0, [sl], #4
 800cce6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccea:	459c      	cmp	ip, r3
 800ccec:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccf0:	d8f3      	bhi.n	800ccda <__lshift+0x6e>
 800ccf2:	ebac 0304 	sub.w	r3, ip, r4
 800ccf6:	3b15      	subs	r3, #21
 800ccf8:	f023 0303 	bic.w	r3, r3, #3
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	f104 0015 	add.w	r0, r4, #21
 800cd02:	4584      	cmp	ip, r0
 800cd04:	bf38      	it	cc
 800cd06:	2304      	movcc	r3, #4
 800cd08:	50ca      	str	r2, [r1, r3]
 800cd0a:	b10a      	cbz	r2, 800cd10 <__lshift+0xa4>
 800cd0c:	f108 0602 	add.w	r6, r8, #2
 800cd10:	3e01      	subs	r6, #1
 800cd12:	4638      	mov	r0, r7
 800cd14:	4621      	mov	r1, r4
 800cd16:	612e      	str	r6, [r5, #16]
 800cd18:	f7ff fdda 	bl	800c8d0 <_Bfree>
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd26:	3301      	adds	r3, #1
 800cd28:	e7c5      	b.n	800ccb6 <__lshift+0x4a>
 800cd2a:	3904      	subs	r1, #4
 800cd2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd30:	459c      	cmp	ip, r3
 800cd32:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd36:	d8f9      	bhi.n	800cd2c <__lshift+0xc0>
 800cd38:	e7ea      	b.n	800cd10 <__lshift+0xa4>
 800cd3a:	bf00      	nop
 800cd3c:	0800dfcc 	.word	0x0800dfcc
 800cd40:	0800dfdd 	.word	0x0800dfdd

0800cd44 <__mcmp>:
 800cd44:	4603      	mov	r3, r0
 800cd46:	690a      	ldr	r2, [r1, #16]
 800cd48:	6900      	ldr	r0, [r0, #16]
 800cd4a:	b530      	push	{r4, r5, lr}
 800cd4c:	1a80      	subs	r0, r0, r2
 800cd4e:	d10d      	bne.n	800cd6c <__mcmp+0x28>
 800cd50:	3314      	adds	r3, #20
 800cd52:	3114      	adds	r1, #20
 800cd54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd64:	4295      	cmp	r5, r2
 800cd66:	d002      	beq.n	800cd6e <__mcmp+0x2a>
 800cd68:	d304      	bcc.n	800cd74 <__mcmp+0x30>
 800cd6a:	2001      	movs	r0, #1
 800cd6c:	bd30      	pop	{r4, r5, pc}
 800cd6e:	42a3      	cmp	r3, r4
 800cd70:	d3f4      	bcc.n	800cd5c <__mcmp+0x18>
 800cd72:	e7fb      	b.n	800cd6c <__mcmp+0x28>
 800cd74:	f04f 30ff 	mov.w	r0, #4294967295
 800cd78:	e7f8      	b.n	800cd6c <__mcmp+0x28>
	...

0800cd7c <__mdiff>:
 800cd7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	460d      	mov	r5, r1
 800cd82:	4607      	mov	r7, r0
 800cd84:	4611      	mov	r1, r2
 800cd86:	4628      	mov	r0, r5
 800cd88:	4614      	mov	r4, r2
 800cd8a:	f7ff ffdb 	bl	800cd44 <__mcmp>
 800cd8e:	1e06      	subs	r6, r0, #0
 800cd90:	d111      	bne.n	800cdb6 <__mdiff+0x3a>
 800cd92:	4631      	mov	r1, r6
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7ff fd5b 	bl	800c850 <_Balloc>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	b928      	cbnz	r0, 800cdaa <__mdiff+0x2e>
 800cd9e:	f240 2137 	movw	r1, #567	; 0x237
 800cda2:	4b3a      	ldr	r3, [pc, #232]	; (800ce8c <__mdiff+0x110>)
 800cda4:	483a      	ldr	r0, [pc, #232]	; (800ce90 <__mdiff+0x114>)
 800cda6:	f000 f983 	bl	800d0b0 <__assert_func>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb6:	bfa4      	itt	ge
 800cdb8:	4623      	movge	r3, r4
 800cdba:	462c      	movge	r4, r5
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	6861      	ldr	r1, [r4, #4]
 800cdc0:	bfa6      	itte	ge
 800cdc2:	461d      	movge	r5, r3
 800cdc4:	2600      	movge	r6, #0
 800cdc6:	2601      	movlt	r6, #1
 800cdc8:	f7ff fd42 	bl	800c850 <_Balloc>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	b918      	cbnz	r0, 800cdd8 <__mdiff+0x5c>
 800cdd0:	f240 2145 	movw	r1, #581	; 0x245
 800cdd4:	4b2d      	ldr	r3, [pc, #180]	; (800ce8c <__mdiff+0x110>)
 800cdd6:	e7e5      	b.n	800cda4 <__mdiff+0x28>
 800cdd8:	f102 0814 	add.w	r8, r2, #20
 800cddc:	46c2      	mov	sl, r8
 800cdde:	f04f 0c00 	mov.w	ip, #0
 800cde2:	6927      	ldr	r7, [r4, #16]
 800cde4:	60c6      	str	r6, [r0, #12]
 800cde6:	692e      	ldr	r6, [r5, #16]
 800cde8:	f104 0014 	add.w	r0, r4, #20
 800cdec:	f105 0914 	add.w	r9, r5, #20
 800cdf0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800cdf4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cdf8:	3410      	adds	r4, #16
 800cdfa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800cdfe:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce02:	fa1f f18b 	uxth.w	r1, fp
 800ce06:	4461      	add	r1, ip
 800ce08:	fa1f fc83 	uxth.w	ip, r3
 800ce0c:	0c1b      	lsrs	r3, r3, #16
 800ce0e:	eba1 010c 	sub.w	r1, r1, ip
 800ce12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ce1a:	b289      	uxth	r1, r1
 800ce1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ce20:	454e      	cmp	r6, r9
 800ce22:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ce26:	f84a 1b04 	str.w	r1, [sl], #4
 800ce2a:	d8e6      	bhi.n	800cdfa <__mdiff+0x7e>
 800ce2c:	1b73      	subs	r3, r6, r5
 800ce2e:	3b15      	subs	r3, #21
 800ce30:	f023 0303 	bic.w	r3, r3, #3
 800ce34:	3515      	adds	r5, #21
 800ce36:	3304      	adds	r3, #4
 800ce38:	42ae      	cmp	r6, r5
 800ce3a:	bf38      	it	cc
 800ce3c:	2304      	movcc	r3, #4
 800ce3e:	4418      	add	r0, r3
 800ce40:	4443      	add	r3, r8
 800ce42:	461e      	mov	r6, r3
 800ce44:	4605      	mov	r5, r0
 800ce46:	4575      	cmp	r5, lr
 800ce48:	d30e      	bcc.n	800ce68 <__mdiff+0xec>
 800ce4a:	f10e 0103 	add.w	r1, lr, #3
 800ce4e:	1a09      	subs	r1, r1, r0
 800ce50:	f021 0103 	bic.w	r1, r1, #3
 800ce54:	3803      	subs	r0, #3
 800ce56:	4586      	cmp	lr, r0
 800ce58:	bf38      	it	cc
 800ce5a:	2100      	movcc	r1, #0
 800ce5c:	440b      	add	r3, r1
 800ce5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce62:	b189      	cbz	r1, 800ce88 <__mdiff+0x10c>
 800ce64:	6117      	str	r7, [r2, #16]
 800ce66:	e7a3      	b.n	800cdb0 <__mdiff+0x34>
 800ce68:	f855 8b04 	ldr.w	r8, [r5], #4
 800ce6c:	fa1f f188 	uxth.w	r1, r8
 800ce70:	4461      	add	r1, ip
 800ce72:	140c      	asrs	r4, r1, #16
 800ce74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce78:	b289      	uxth	r1, r1
 800ce7a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ce7e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ce82:	f846 1b04 	str.w	r1, [r6], #4
 800ce86:	e7de      	b.n	800ce46 <__mdiff+0xca>
 800ce88:	3f01      	subs	r7, #1
 800ce8a:	e7e8      	b.n	800ce5e <__mdiff+0xe2>
 800ce8c:	0800dfcc 	.word	0x0800dfcc
 800ce90:	0800dfdd 	.word	0x0800dfdd

0800ce94 <__d2b>:
 800ce94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce96:	2101      	movs	r1, #1
 800ce98:	4617      	mov	r7, r2
 800ce9a:	461c      	mov	r4, r3
 800ce9c:	9e08      	ldr	r6, [sp, #32]
 800ce9e:	f7ff fcd7 	bl	800c850 <_Balloc>
 800cea2:	4605      	mov	r5, r0
 800cea4:	b930      	cbnz	r0, 800ceb4 <__d2b+0x20>
 800cea6:	4602      	mov	r2, r0
 800cea8:	f240 310f 	movw	r1, #783	; 0x30f
 800ceac:	4b22      	ldr	r3, [pc, #136]	; (800cf38 <__d2b+0xa4>)
 800ceae:	4823      	ldr	r0, [pc, #140]	; (800cf3c <__d2b+0xa8>)
 800ceb0:	f000 f8fe 	bl	800d0b0 <__assert_func>
 800ceb4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ceb8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800cebc:	bb24      	cbnz	r4, 800cf08 <__d2b+0x74>
 800cebe:	2f00      	cmp	r7, #0
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	d026      	beq.n	800cf12 <__d2b+0x7e>
 800cec4:	4668      	mov	r0, sp
 800cec6:	9700      	str	r7, [sp, #0]
 800cec8:	f7ff fd8a 	bl	800c9e0 <__lo0bits>
 800cecc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ced0:	b1e8      	cbz	r0, 800cf0e <__d2b+0x7a>
 800ced2:	f1c0 0320 	rsb	r3, r0, #32
 800ced6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceda:	430b      	orrs	r3, r1
 800cedc:	40c2      	lsrs	r2, r0
 800cede:	616b      	str	r3, [r5, #20]
 800cee0:	9201      	str	r2, [sp, #4]
 800cee2:	9b01      	ldr	r3, [sp, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	bf14      	ite	ne
 800cee8:	2102      	movne	r1, #2
 800ceea:	2101      	moveq	r1, #1
 800ceec:	61ab      	str	r3, [r5, #24]
 800ceee:	6129      	str	r1, [r5, #16]
 800cef0:	b1bc      	cbz	r4, 800cf22 <__d2b+0x8e>
 800cef2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cef6:	4404      	add	r4, r0
 800cef8:	6034      	str	r4, [r6, #0]
 800cefa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf00:	6018      	str	r0, [r3, #0]
 800cf02:	4628      	mov	r0, r5
 800cf04:	b003      	add	sp, #12
 800cf06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf0c:	e7d7      	b.n	800cebe <__d2b+0x2a>
 800cf0e:	6169      	str	r1, [r5, #20]
 800cf10:	e7e7      	b.n	800cee2 <__d2b+0x4e>
 800cf12:	a801      	add	r0, sp, #4
 800cf14:	f7ff fd64 	bl	800c9e0 <__lo0bits>
 800cf18:	9b01      	ldr	r3, [sp, #4]
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	616b      	str	r3, [r5, #20]
 800cf1e:	3020      	adds	r0, #32
 800cf20:	e7e5      	b.n	800ceee <__d2b+0x5a>
 800cf22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf26:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800cf2a:	6030      	str	r0, [r6, #0]
 800cf2c:	6918      	ldr	r0, [r3, #16]
 800cf2e:	f7ff fd37 	bl	800c9a0 <__hi0bits>
 800cf32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cf36:	e7e2      	b.n	800cefe <__d2b+0x6a>
 800cf38:	0800dfcc 	.word	0x0800dfcc
 800cf3c:	0800dfdd 	.word	0x0800dfdd

0800cf40 <__sflush_r>:
 800cf40:	898a      	ldrh	r2, [r1, #12]
 800cf42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf44:	4605      	mov	r5, r0
 800cf46:	0710      	lsls	r0, r2, #28
 800cf48:	460c      	mov	r4, r1
 800cf4a:	d457      	bmi.n	800cffc <__sflush_r+0xbc>
 800cf4c:	684b      	ldr	r3, [r1, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dc04      	bgt.n	800cf5c <__sflush_r+0x1c>
 800cf52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	dc01      	bgt.n	800cf5c <__sflush_r+0x1c>
 800cf58:	2000      	movs	r0, #0
 800cf5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf5e:	2e00      	cmp	r6, #0
 800cf60:	d0fa      	beq.n	800cf58 <__sflush_r+0x18>
 800cf62:	2300      	movs	r3, #0
 800cf64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf68:	682f      	ldr	r7, [r5, #0]
 800cf6a:	6a21      	ldr	r1, [r4, #32]
 800cf6c:	602b      	str	r3, [r5, #0]
 800cf6e:	d032      	beq.n	800cfd6 <__sflush_r+0x96>
 800cf70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	075a      	lsls	r2, r3, #29
 800cf76:	d505      	bpl.n	800cf84 <__sflush_r+0x44>
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	1ac0      	subs	r0, r0, r3
 800cf7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf7e:	b10b      	cbz	r3, 800cf84 <__sflush_r+0x44>
 800cf80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf82:	1ac0      	subs	r0, r0, r3
 800cf84:	2300      	movs	r3, #0
 800cf86:	4602      	mov	r2, r0
 800cf88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	6a21      	ldr	r1, [r4, #32]
 800cf8e:	47b0      	blx	r6
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	d106      	bne.n	800cfa4 <__sflush_r+0x64>
 800cf96:	6829      	ldr	r1, [r5, #0]
 800cf98:	291d      	cmp	r1, #29
 800cf9a:	d82b      	bhi.n	800cff4 <__sflush_r+0xb4>
 800cf9c:	4a28      	ldr	r2, [pc, #160]	; (800d040 <__sflush_r+0x100>)
 800cf9e:	410a      	asrs	r2, r1
 800cfa0:	07d6      	lsls	r6, r2, #31
 800cfa2:	d427      	bmi.n	800cff4 <__sflush_r+0xb4>
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	6062      	str	r2, [r4, #4]
 800cfa8:	6922      	ldr	r2, [r4, #16]
 800cfaa:	04d9      	lsls	r1, r3, #19
 800cfac:	6022      	str	r2, [r4, #0]
 800cfae:	d504      	bpl.n	800cfba <__sflush_r+0x7a>
 800cfb0:	1c42      	adds	r2, r0, #1
 800cfb2:	d101      	bne.n	800cfb8 <__sflush_r+0x78>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	b903      	cbnz	r3, 800cfba <__sflush_r+0x7a>
 800cfb8:	6560      	str	r0, [r4, #84]	; 0x54
 800cfba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfbc:	602f      	str	r7, [r5, #0]
 800cfbe:	2900      	cmp	r1, #0
 800cfc0:	d0ca      	beq.n	800cf58 <__sflush_r+0x18>
 800cfc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfc6:	4299      	cmp	r1, r3
 800cfc8:	d002      	beq.n	800cfd0 <__sflush_r+0x90>
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f7ff fbf8 	bl	800c7c0 <_free_r>
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	6360      	str	r0, [r4, #52]	; 0x34
 800cfd4:	e7c1      	b.n	800cf5a <__sflush_r+0x1a>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	4628      	mov	r0, r5
 800cfda:	47b0      	blx	r6
 800cfdc:	1c41      	adds	r1, r0, #1
 800cfde:	d1c8      	bne.n	800cf72 <__sflush_r+0x32>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d0c5      	beq.n	800cf72 <__sflush_r+0x32>
 800cfe6:	2b1d      	cmp	r3, #29
 800cfe8:	d001      	beq.n	800cfee <__sflush_r+0xae>
 800cfea:	2b16      	cmp	r3, #22
 800cfec:	d101      	bne.n	800cff2 <__sflush_r+0xb2>
 800cfee:	602f      	str	r7, [r5, #0]
 800cff0:	e7b2      	b.n	800cf58 <__sflush_r+0x18>
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cff8:	81a3      	strh	r3, [r4, #12]
 800cffa:	e7ae      	b.n	800cf5a <__sflush_r+0x1a>
 800cffc:	690f      	ldr	r7, [r1, #16]
 800cffe:	2f00      	cmp	r7, #0
 800d000:	d0aa      	beq.n	800cf58 <__sflush_r+0x18>
 800d002:	0793      	lsls	r3, r2, #30
 800d004:	bf18      	it	ne
 800d006:	2300      	movne	r3, #0
 800d008:	680e      	ldr	r6, [r1, #0]
 800d00a:	bf08      	it	eq
 800d00c:	694b      	ldreq	r3, [r1, #20]
 800d00e:	1bf6      	subs	r6, r6, r7
 800d010:	600f      	str	r7, [r1, #0]
 800d012:	608b      	str	r3, [r1, #8]
 800d014:	2e00      	cmp	r6, #0
 800d016:	dd9f      	ble.n	800cf58 <__sflush_r+0x18>
 800d018:	4633      	mov	r3, r6
 800d01a:	463a      	mov	r2, r7
 800d01c:	4628      	mov	r0, r5
 800d01e:	6a21      	ldr	r1, [r4, #32]
 800d020:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d024:	47e0      	blx	ip
 800d026:	2800      	cmp	r0, #0
 800d028:	dc06      	bgt.n	800d038 <__sflush_r+0xf8>
 800d02a:	89a3      	ldrh	r3, [r4, #12]
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295
 800d030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	e790      	b.n	800cf5a <__sflush_r+0x1a>
 800d038:	4407      	add	r7, r0
 800d03a:	1a36      	subs	r6, r6, r0
 800d03c:	e7ea      	b.n	800d014 <__sflush_r+0xd4>
 800d03e:	bf00      	nop
 800d040:	dfbffffe 	.word	0xdfbffffe

0800d044 <_fflush_r>:
 800d044:	b538      	push	{r3, r4, r5, lr}
 800d046:	690b      	ldr	r3, [r1, #16]
 800d048:	4605      	mov	r5, r0
 800d04a:	460c      	mov	r4, r1
 800d04c:	b913      	cbnz	r3, 800d054 <_fflush_r+0x10>
 800d04e:	2500      	movs	r5, #0
 800d050:	4628      	mov	r0, r5
 800d052:	bd38      	pop	{r3, r4, r5, pc}
 800d054:	b118      	cbz	r0, 800d05e <_fflush_r+0x1a>
 800d056:	6a03      	ldr	r3, [r0, #32]
 800d058:	b90b      	cbnz	r3, 800d05e <_fflush_r+0x1a>
 800d05a:	f7fe fc2d 	bl	800b8b8 <__sinit>
 800d05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d0f3      	beq.n	800d04e <_fflush_r+0xa>
 800d066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d068:	07d0      	lsls	r0, r2, #31
 800d06a:	d404      	bmi.n	800d076 <_fflush_r+0x32>
 800d06c:	0599      	lsls	r1, r3, #22
 800d06e:	d402      	bmi.n	800d076 <_fflush_r+0x32>
 800d070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d072:	f7fe fd28 	bl	800bac6 <__retarget_lock_acquire_recursive>
 800d076:	4628      	mov	r0, r5
 800d078:	4621      	mov	r1, r4
 800d07a:	f7ff ff61 	bl	800cf40 <__sflush_r>
 800d07e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d080:	4605      	mov	r5, r0
 800d082:	07da      	lsls	r2, r3, #31
 800d084:	d4e4      	bmi.n	800d050 <_fflush_r+0xc>
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	059b      	lsls	r3, r3, #22
 800d08a:	d4e1      	bmi.n	800d050 <_fflush_r+0xc>
 800d08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d08e:	f7fe fd1b 	bl	800bac8 <__retarget_lock_release_recursive>
 800d092:	e7dd      	b.n	800d050 <_fflush_r+0xc>

0800d094 <memcpy>:
 800d094:	440a      	add	r2, r1
 800d096:	4291      	cmp	r1, r2
 800d098:	f100 33ff 	add.w	r3, r0, #4294967295
 800d09c:	d100      	bne.n	800d0a0 <memcpy+0xc>
 800d09e:	4770      	bx	lr
 800d0a0:	b510      	push	{r4, lr}
 800d0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0a6:	4291      	cmp	r1, r2
 800d0a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0ac:	d1f9      	bne.n	800d0a2 <memcpy+0xe>
 800d0ae:	bd10      	pop	{r4, pc}

0800d0b0 <__assert_func>:
 800d0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0b2:	4614      	mov	r4, r2
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	4b09      	ldr	r3, [pc, #36]	; (800d0dc <__assert_func+0x2c>)
 800d0b8:	4605      	mov	r5, r0
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	68d8      	ldr	r0, [r3, #12]
 800d0be:	b14c      	cbz	r4, 800d0d4 <__assert_func+0x24>
 800d0c0:	4b07      	ldr	r3, [pc, #28]	; (800d0e0 <__assert_func+0x30>)
 800d0c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0c6:	9100      	str	r1, [sp, #0]
 800d0c8:	462b      	mov	r3, r5
 800d0ca:	4906      	ldr	r1, [pc, #24]	; (800d0e4 <__assert_func+0x34>)
 800d0cc:	f000 f842 	bl	800d154 <fiprintf>
 800d0d0:	f000 f852 	bl	800d178 <abort>
 800d0d4:	4b04      	ldr	r3, [pc, #16]	; (800d0e8 <__assert_func+0x38>)
 800d0d6:	461c      	mov	r4, r3
 800d0d8:	e7f3      	b.n	800d0c2 <__assert_func+0x12>
 800d0da:	bf00      	nop
 800d0dc:	20000208 	.word	0x20000208
 800d0e0:	0800e13e 	.word	0x0800e13e
 800d0e4:	0800e14b 	.word	0x0800e14b
 800d0e8:	0800e179 	.word	0x0800e179

0800d0ec <_calloc_r>:
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	fba1 5402 	umull	r5, r4, r1, r2
 800d0f2:	b934      	cbnz	r4, 800d102 <_calloc_r+0x16>
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	f7fd fe69 	bl	800adcc <_malloc_r>
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	b928      	cbnz	r0, 800d10a <_calloc_r+0x1e>
 800d0fe:	4630      	mov	r0, r6
 800d100:	bd70      	pop	{r4, r5, r6, pc}
 800d102:	220c      	movs	r2, #12
 800d104:	2600      	movs	r6, #0
 800d106:	6002      	str	r2, [r0, #0]
 800d108:	e7f9      	b.n	800d0fe <_calloc_r+0x12>
 800d10a:	462a      	mov	r2, r5
 800d10c:	4621      	mov	r1, r4
 800d10e:	f7fe fc4c 	bl	800b9aa <memset>
 800d112:	e7f4      	b.n	800d0fe <_calloc_r+0x12>

0800d114 <__ascii_mbtowc>:
 800d114:	b082      	sub	sp, #8
 800d116:	b901      	cbnz	r1, 800d11a <__ascii_mbtowc+0x6>
 800d118:	a901      	add	r1, sp, #4
 800d11a:	b142      	cbz	r2, 800d12e <__ascii_mbtowc+0x1a>
 800d11c:	b14b      	cbz	r3, 800d132 <__ascii_mbtowc+0x1e>
 800d11e:	7813      	ldrb	r3, [r2, #0]
 800d120:	600b      	str	r3, [r1, #0]
 800d122:	7812      	ldrb	r2, [r2, #0]
 800d124:	1e10      	subs	r0, r2, #0
 800d126:	bf18      	it	ne
 800d128:	2001      	movne	r0, #1
 800d12a:	b002      	add	sp, #8
 800d12c:	4770      	bx	lr
 800d12e:	4610      	mov	r0, r2
 800d130:	e7fb      	b.n	800d12a <__ascii_mbtowc+0x16>
 800d132:	f06f 0001 	mvn.w	r0, #1
 800d136:	e7f8      	b.n	800d12a <__ascii_mbtowc+0x16>

0800d138 <__ascii_wctomb>:
 800d138:	4603      	mov	r3, r0
 800d13a:	4608      	mov	r0, r1
 800d13c:	b141      	cbz	r1, 800d150 <__ascii_wctomb+0x18>
 800d13e:	2aff      	cmp	r2, #255	; 0xff
 800d140:	d904      	bls.n	800d14c <__ascii_wctomb+0x14>
 800d142:	228a      	movs	r2, #138	; 0x8a
 800d144:	f04f 30ff 	mov.w	r0, #4294967295
 800d148:	601a      	str	r2, [r3, #0]
 800d14a:	4770      	bx	lr
 800d14c:	2001      	movs	r0, #1
 800d14e:	700a      	strb	r2, [r1, #0]
 800d150:	4770      	bx	lr
	...

0800d154 <fiprintf>:
 800d154:	b40e      	push	{r1, r2, r3}
 800d156:	b503      	push	{r0, r1, lr}
 800d158:	4601      	mov	r1, r0
 800d15a:	ab03      	add	r3, sp, #12
 800d15c:	4805      	ldr	r0, [pc, #20]	; (800d174 <fiprintf+0x20>)
 800d15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d162:	6800      	ldr	r0, [r0, #0]
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	f000 f835 	bl	800d1d4 <_vfiprintf_r>
 800d16a:	b002      	add	sp, #8
 800d16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d170:	b003      	add	sp, #12
 800d172:	4770      	bx	lr
 800d174:	20000208 	.word	0x20000208

0800d178 <abort>:
 800d178:	2006      	movs	r0, #6
 800d17a:	b508      	push	{r3, lr}
 800d17c:	f000 fa02 	bl	800d584 <raise>
 800d180:	2001      	movs	r0, #1
 800d182:	f7f5 fc02 	bl	800298a <_exit>

0800d186 <__sfputc_r>:
 800d186:	6893      	ldr	r3, [r2, #8]
 800d188:	b410      	push	{r4}
 800d18a:	3b01      	subs	r3, #1
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	6093      	str	r3, [r2, #8]
 800d190:	da07      	bge.n	800d1a2 <__sfputc_r+0x1c>
 800d192:	6994      	ldr	r4, [r2, #24]
 800d194:	42a3      	cmp	r3, r4
 800d196:	db01      	blt.n	800d19c <__sfputc_r+0x16>
 800d198:	290a      	cmp	r1, #10
 800d19a:	d102      	bne.n	800d1a2 <__sfputc_r+0x1c>
 800d19c:	bc10      	pop	{r4}
 800d19e:	f000 b933 	b.w	800d408 <__swbuf_r>
 800d1a2:	6813      	ldr	r3, [r2, #0]
 800d1a4:	1c58      	adds	r0, r3, #1
 800d1a6:	6010      	str	r0, [r2, #0]
 800d1a8:	7019      	strb	r1, [r3, #0]
 800d1aa:	4608      	mov	r0, r1
 800d1ac:	bc10      	pop	{r4}
 800d1ae:	4770      	bx	lr

0800d1b0 <__sfputs_r>:
 800d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	460f      	mov	r7, r1
 800d1b6:	4614      	mov	r4, r2
 800d1b8:	18d5      	adds	r5, r2, r3
 800d1ba:	42ac      	cmp	r4, r5
 800d1bc:	d101      	bne.n	800d1c2 <__sfputs_r+0x12>
 800d1be:	2000      	movs	r0, #0
 800d1c0:	e007      	b.n	800d1d2 <__sfputs_r+0x22>
 800d1c2:	463a      	mov	r2, r7
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ca:	f7ff ffdc 	bl	800d186 <__sfputc_r>
 800d1ce:	1c43      	adds	r3, r0, #1
 800d1d0:	d1f3      	bne.n	800d1ba <__sfputs_r+0xa>
 800d1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1d4 <_vfiprintf_r>:
 800d1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d8:	460d      	mov	r5, r1
 800d1da:	4614      	mov	r4, r2
 800d1dc:	4698      	mov	r8, r3
 800d1de:	4606      	mov	r6, r0
 800d1e0:	b09d      	sub	sp, #116	; 0x74
 800d1e2:	b118      	cbz	r0, 800d1ec <_vfiprintf_r+0x18>
 800d1e4:	6a03      	ldr	r3, [r0, #32]
 800d1e6:	b90b      	cbnz	r3, 800d1ec <_vfiprintf_r+0x18>
 800d1e8:	f7fe fb66 	bl	800b8b8 <__sinit>
 800d1ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ee:	07d9      	lsls	r1, r3, #31
 800d1f0:	d405      	bmi.n	800d1fe <_vfiprintf_r+0x2a>
 800d1f2:	89ab      	ldrh	r3, [r5, #12]
 800d1f4:	059a      	lsls	r2, r3, #22
 800d1f6:	d402      	bmi.n	800d1fe <_vfiprintf_r+0x2a>
 800d1f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1fa:	f7fe fc64 	bl	800bac6 <__retarget_lock_acquire_recursive>
 800d1fe:	89ab      	ldrh	r3, [r5, #12]
 800d200:	071b      	lsls	r3, r3, #28
 800d202:	d501      	bpl.n	800d208 <_vfiprintf_r+0x34>
 800d204:	692b      	ldr	r3, [r5, #16]
 800d206:	b99b      	cbnz	r3, 800d230 <_vfiprintf_r+0x5c>
 800d208:	4629      	mov	r1, r5
 800d20a:	4630      	mov	r0, r6
 800d20c:	f000 f93a 	bl	800d484 <__swsetup_r>
 800d210:	b170      	cbz	r0, 800d230 <_vfiprintf_r+0x5c>
 800d212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d214:	07dc      	lsls	r4, r3, #31
 800d216:	d504      	bpl.n	800d222 <_vfiprintf_r+0x4e>
 800d218:	f04f 30ff 	mov.w	r0, #4294967295
 800d21c:	b01d      	add	sp, #116	; 0x74
 800d21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d222:	89ab      	ldrh	r3, [r5, #12]
 800d224:	0598      	lsls	r0, r3, #22
 800d226:	d4f7      	bmi.n	800d218 <_vfiprintf_r+0x44>
 800d228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d22a:	f7fe fc4d 	bl	800bac8 <__retarget_lock_release_recursive>
 800d22e:	e7f3      	b.n	800d218 <_vfiprintf_r+0x44>
 800d230:	2300      	movs	r3, #0
 800d232:	9309      	str	r3, [sp, #36]	; 0x24
 800d234:	2320      	movs	r3, #32
 800d236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d23a:	2330      	movs	r3, #48	; 0x30
 800d23c:	f04f 0901 	mov.w	r9, #1
 800d240:	f8cd 800c 	str.w	r8, [sp, #12]
 800d244:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d3f4 <_vfiprintf_r+0x220>
 800d248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d24c:	4623      	mov	r3, r4
 800d24e:	469a      	mov	sl, r3
 800d250:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d254:	b10a      	cbz	r2, 800d25a <_vfiprintf_r+0x86>
 800d256:	2a25      	cmp	r2, #37	; 0x25
 800d258:	d1f9      	bne.n	800d24e <_vfiprintf_r+0x7a>
 800d25a:	ebba 0b04 	subs.w	fp, sl, r4
 800d25e:	d00b      	beq.n	800d278 <_vfiprintf_r+0xa4>
 800d260:	465b      	mov	r3, fp
 800d262:	4622      	mov	r2, r4
 800d264:	4629      	mov	r1, r5
 800d266:	4630      	mov	r0, r6
 800d268:	f7ff ffa2 	bl	800d1b0 <__sfputs_r>
 800d26c:	3001      	adds	r0, #1
 800d26e:	f000 80a9 	beq.w	800d3c4 <_vfiprintf_r+0x1f0>
 800d272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d274:	445a      	add	r2, fp
 800d276:	9209      	str	r2, [sp, #36]	; 0x24
 800d278:	f89a 3000 	ldrb.w	r3, [sl]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 80a1 	beq.w	800d3c4 <_vfiprintf_r+0x1f0>
 800d282:	2300      	movs	r3, #0
 800d284:	f04f 32ff 	mov.w	r2, #4294967295
 800d288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d28c:	f10a 0a01 	add.w	sl, sl, #1
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	9307      	str	r3, [sp, #28]
 800d294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d298:	931a      	str	r3, [sp, #104]	; 0x68
 800d29a:	4654      	mov	r4, sl
 800d29c:	2205      	movs	r2, #5
 800d29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a2:	4854      	ldr	r0, [pc, #336]	; (800d3f4 <_vfiprintf_r+0x220>)
 800d2a4:	f7fe fc11 	bl	800baca <memchr>
 800d2a8:	9a04      	ldr	r2, [sp, #16]
 800d2aa:	b9d8      	cbnz	r0, 800d2e4 <_vfiprintf_r+0x110>
 800d2ac:	06d1      	lsls	r1, r2, #27
 800d2ae:	bf44      	itt	mi
 800d2b0:	2320      	movmi	r3, #32
 800d2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2b6:	0713      	lsls	r3, r2, #28
 800d2b8:	bf44      	itt	mi
 800d2ba:	232b      	movmi	r3, #43	; 0x2b
 800d2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d2c6:	d015      	beq.n	800d2f4 <_vfiprintf_r+0x120>
 800d2c8:	4654      	mov	r4, sl
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	f04f 0c0a 	mov.w	ip, #10
 800d2d0:	9a07      	ldr	r2, [sp, #28]
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2d8:	3b30      	subs	r3, #48	; 0x30
 800d2da:	2b09      	cmp	r3, #9
 800d2dc:	d94d      	bls.n	800d37a <_vfiprintf_r+0x1a6>
 800d2de:	b1b0      	cbz	r0, 800d30e <_vfiprintf_r+0x13a>
 800d2e0:	9207      	str	r2, [sp, #28]
 800d2e2:	e014      	b.n	800d30e <_vfiprintf_r+0x13a>
 800d2e4:	eba0 0308 	sub.w	r3, r0, r8
 800d2e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	46a2      	mov	sl, r4
 800d2f0:	9304      	str	r3, [sp, #16]
 800d2f2:	e7d2      	b.n	800d29a <_vfiprintf_r+0xc6>
 800d2f4:	9b03      	ldr	r3, [sp, #12]
 800d2f6:	1d19      	adds	r1, r3, #4
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	9103      	str	r1, [sp, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	bfbb      	ittet	lt
 800d300:	425b      	neglt	r3, r3
 800d302:	f042 0202 	orrlt.w	r2, r2, #2
 800d306:	9307      	strge	r3, [sp, #28]
 800d308:	9307      	strlt	r3, [sp, #28]
 800d30a:	bfb8      	it	lt
 800d30c:	9204      	strlt	r2, [sp, #16]
 800d30e:	7823      	ldrb	r3, [r4, #0]
 800d310:	2b2e      	cmp	r3, #46	; 0x2e
 800d312:	d10c      	bne.n	800d32e <_vfiprintf_r+0x15a>
 800d314:	7863      	ldrb	r3, [r4, #1]
 800d316:	2b2a      	cmp	r3, #42	; 0x2a
 800d318:	d134      	bne.n	800d384 <_vfiprintf_r+0x1b0>
 800d31a:	9b03      	ldr	r3, [sp, #12]
 800d31c:	3402      	adds	r4, #2
 800d31e:	1d1a      	adds	r2, r3, #4
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	9203      	str	r2, [sp, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	bfb8      	it	lt
 800d328:	f04f 33ff 	movlt.w	r3, #4294967295
 800d32c:	9305      	str	r3, [sp, #20]
 800d32e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3f8 <_vfiprintf_r+0x224>
 800d332:	2203      	movs	r2, #3
 800d334:	4650      	mov	r0, sl
 800d336:	7821      	ldrb	r1, [r4, #0]
 800d338:	f7fe fbc7 	bl	800baca <memchr>
 800d33c:	b138      	cbz	r0, 800d34e <_vfiprintf_r+0x17a>
 800d33e:	2240      	movs	r2, #64	; 0x40
 800d340:	9b04      	ldr	r3, [sp, #16]
 800d342:	eba0 000a 	sub.w	r0, r0, sl
 800d346:	4082      	lsls	r2, r0
 800d348:	4313      	orrs	r3, r2
 800d34a:	3401      	adds	r4, #1
 800d34c:	9304      	str	r3, [sp, #16]
 800d34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d352:	2206      	movs	r2, #6
 800d354:	4829      	ldr	r0, [pc, #164]	; (800d3fc <_vfiprintf_r+0x228>)
 800d356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d35a:	f7fe fbb6 	bl	800baca <memchr>
 800d35e:	2800      	cmp	r0, #0
 800d360:	d03f      	beq.n	800d3e2 <_vfiprintf_r+0x20e>
 800d362:	4b27      	ldr	r3, [pc, #156]	; (800d400 <_vfiprintf_r+0x22c>)
 800d364:	bb1b      	cbnz	r3, 800d3ae <_vfiprintf_r+0x1da>
 800d366:	9b03      	ldr	r3, [sp, #12]
 800d368:	3307      	adds	r3, #7
 800d36a:	f023 0307 	bic.w	r3, r3, #7
 800d36e:	3308      	adds	r3, #8
 800d370:	9303      	str	r3, [sp, #12]
 800d372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d374:	443b      	add	r3, r7
 800d376:	9309      	str	r3, [sp, #36]	; 0x24
 800d378:	e768      	b.n	800d24c <_vfiprintf_r+0x78>
 800d37a:	460c      	mov	r4, r1
 800d37c:	2001      	movs	r0, #1
 800d37e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d382:	e7a6      	b.n	800d2d2 <_vfiprintf_r+0xfe>
 800d384:	2300      	movs	r3, #0
 800d386:	f04f 0c0a 	mov.w	ip, #10
 800d38a:	4619      	mov	r1, r3
 800d38c:	3401      	adds	r4, #1
 800d38e:	9305      	str	r3, [sp, #20]
 800d390:	4620      	mov	r0, r4
 800d392:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d396:	3a30      	subs	r2, #48	; 0x30
 800d398:	2a09      	cmp	r2, #9
 800d39a:	d903      	bls.n	800d3a4 <_vfiprintf_r+0x1d0>
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0c6      	beq.n	800d32e <_vfiprintf_r+0x15a>
 800d3a0:	9105      	str	r1, [sp, #20]
 800d3a2:	e7c4      	b.n	800d32e <_vfiprintf_r+0x15a>
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ac:	e7f0      	b.n	800d390 <_vfiprintf_r+0x1bc>
 800d3ae:	ab03      	add	r3, sp, #12
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	462a      	mov	r2, r5
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	4b13      	ldr	r3, [pc, #76]	; (800d404 <_vfiprintf_r+0x230>)
 800d3b8:	a904      	add	r1, sp, #16
 800d3ba:	f7fd fe2f 	bl	800b01c <_printf_float>
 800d3be:	4607      	mov	r7, r0
 800d3c0:	1c78      	adds	r0, r7, #1
 800d3c2:	d1d6      	bne.n	800d372 <_vfiprintf_r+0x19e>
 800d3c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3c6:	07d9      	lsls	r1, r3, #31
 800d3c8:	d405      	bmi.n	800d3d6 <_vfiprintf_r+0x202>
 800d3ca:	89ab      	ldrh	r3, [r5, #12]
 800d3cc:	059a      	lsls	r2, r3, #22
 800d3ce:	d402      	bmi.n	800d3d6 <_vfiprintf_r+0x202>
 800d3d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3d2:	f7fe fb79 	bl	800bac8 <__retarget_lock_release_recursive>
 800d3d6:	89ab      	ldrh	r3, [r5, #12]
 800d3d8:	065b      	lsls	r3, r3, #25
 800d3da:	f53f af1d 	bmi.w	800d218 <_vfiprintf_r+0x44>
 800d3de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3e0:	e71c      	b.n	800d21c <_vfiprintf_r+0x48>
 800d3e2:	ab03      	add	r3, sp, #12
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	462a      	mov	r2, r5
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	4b06      	ldr	r3, [pc, #24]	; (800d404 <_vfiprintf_r+0x230>)
 800d3ec:	a904      	add	r1, sp, #16
 800d3ee:	f7fe f8b5 	bl	800b55c <_printf_i>
 800d3f2:	e7e4      	b.n	800d3be <_vfiprintf_r+0x1ea>
 800d3f4:	0800e27b 	.word	0x0800e27b
 800d3f8:	0800e281 	.word	0x0800e281
 800d3fc:	0800e285 	.word	0x0800e285
 800d400:	0800b01d 	.word	0x0800b01d
 800d404:	0800d1b1 	.word	0x0800d1b1

0800d408 <__swbuf_r>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	460e      	mov	r6, r1
 800d40c:	4614      	mov	r4, r2
 800d40e:	4605      	mov	r5, r0
 800d410:	b118      	cbz	r0, 800d41a <__swbuf_r+0x12>
 800d412:	6a03      	ldr	r3, [r0, #32]
 800d414:	b90b      	cbnz	r3, 800d41a <__swbuf_r+0x12>
 800d416:	f7fe fa4f 	bl	800b8b8 <__sinit>
 800d41a:	69a3      	ldr	r3, [r4, #24]
 800d41c:	60a3      	str	r3, [r4, #8]
 800d41e:	89a3      	ldrh	r3, [r4, #12]
 800d420:	071a      	lsls	r2, r3, #28
 800d422:	d525      	bpl.n	800d470 <__swbuf_r+0x68>
 800d424:	6923      	ldr	r3, [r4, #16]
 800d426:	b31b      	cbz	r3, 800d470 <__swbuf_r+0x68>
 800d428:	6823      	ldr	r3, [r4, #0]
 800d42a:	6922      	ldr	r2, [r4, #16]
 800d42c:	b2f6      	uxtb	r6, r6
 800d42e:	1a98      	subs	r0, r3, r2
 800d430:	6963      	ldr	r3, [r4, #20]
 800d432:	4637      	mov	r7, r6
 800d434:	4283      	cmp	r3, r0
 800d436:	dc04      	bgt.n	800d442 <__swbuf_r+0x3a>
 800d438:	4621      	mov	r1, r4
 800d43a:	4628      	mov	r0, r5
 800d43c:	f7ff fe02 	bl	800d044 <_fflush_r>
 800d440:	b9e0      	cbnz	r0, 800d47c <__swbuf_r+0x74>
 800d442:	68a3      	ldr	r3, [r4, #8]
 800d444:	3b01      	subs	r3, #1
 800d446:	60a3      	str	r3, [r4, #8]
 800d448:	6823      	ldr	r3, [r4, #0]
 800d44a:	1c5a      	adds	r2, r3, #1
 800d44c:	6022      	str	r2, [r4, #0]
 800d44e:	701e      	strb	r6, [r3, #0]
 800d450:	6962      	ldr	r2, [r4, #20]
 800d452:	1c43      	adds	r3, r0, #1
 800d454:	429a      	cmp	r2, r3
 800d456:	d004      	beq.n	800d462 <__swbuf_r+0x5a>
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	07db      	lsls	r3, r3, #31
 800d45c:	d506      	bpl.n	800d46c <__swbuf_r+0x64>
 800d45e:	2e0a      	cmp	r6, #10
 800d460:	d104      	bne.n	800d46c <__swbuf_r+0x64>
 800d462:	4621      	mov	r1, r4
 800d464:	4628      	mov	r0, r5
 800d466:	f7ff fded 	bl	800d044 <_fflush_r>
 800d46a:	b938      	cbnz	r0, 800d47c <__swbuf_r+0x74>
 800d46c:	4638      	mov	r0, r7
 800d46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d470:	4621      	mov	r1, r4
 800d472:	4628      	mov	r0, r5
 800d474:	f000 f806 	bl	800d484 <__swsetup_r>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d0d5      	beq.n	800d428 <__swbuf_r+0x20>
 800d47c:	f04f 37ff 	mov.w	r7, #4294967295
 800d480:	e7f4      	b.n	800d46c <__swbuf_r+0x64>
	...

0800d484 <__swsetup_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4b2a      	ldr	r3, [pc, #168]	; (800d530 <__swsetup_r+0xac>)
 800d488:	4605      	mov	r5, r0
 800d48a:	6818      	ldr	r0, [r3, #0]
 800d48c:	460c      	mov	r4, r1
 800d48e:	b118      	cbz	r0, 800d498 <__swsetup_r+0x14>
 800d490:	6a03      	ldr	r3, [r0, #32]
 800d492:	b90b      	cbnz	r3, 800d498 <__swsetup_r+0x14>
 800d494:	f7fe fa10 	bl	800b8b8 <__sinit>
 800d498:	89a3      	ldrh	r3, [r4, #12]
 800d49a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d49e:	0718      	lsls	r0, r3, #28
 800d4a0:	d422      	bmi.n	800d4e8 <__swsetup_r+0x64>
 800d4a2:	06d9      	lsls	r1, r3, #27
 800d4a4:	d407      	bmi.n	800d4b6 <__swsetup_r+0x32>
 800d4a6:	2309      	movs	r3, #9
 800d4a8:	602b      	str	r3, [r5, #0]
 800d4aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b2:	81a3      	strh	r3, [r4, #12]
 800d4b4:	e034      	b.n	800d520 <__swsetup_r+0x9c>
 800d4b6:	0758      	lsls	r0, r3, #29
 800d4b8:	d512      	bpl.n	800d4e0 <__swsetup_r+0x5c>
 800d4ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4bc:	b141      	cbz	r1, 800d4d0 <__swsetup_r+0x4c>
 800d4be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4c2:	4299      	cmp	r1, r3
 800d4c4:	d002      	beq.n	800d4cc <__swsetup_r+0x48>
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	f7ff f97a 	bl	800c7c0 <_free_r>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	6363      	str	r3, [r4, #52]	; 0x34
 800d4d0:	89a3      	ldrh	r3, [r4, #12]
 800d4d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4d6:	81a3      	strh	r3, [r4, #12]
 800d4d8:	2300      	movs	r3, #0
 800d4da:	6063      	str	r3, [r4, #4]
 800d4dc:	6923      	ldr	r3, [r4, #16]
 800d4de:	6023      	str	r3, [r4, #0]
 800d4e0:	89a3      	ldrh	r3, [r4, #12]
 800d4e2:	f043 0308 	orr.w	r3, r3, #8
 800d4e6:	81a3      	strh	r3, [r4, #12]
 800d4e8:	6923      	ldr	r3, [r4, #16]
 800d4ea:	b94b      	cbnz	r3, 800d500 <__swsetup_r+0x7c>
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4f6:	d003      	beq.n	800d500 <__swsetup_r+0x7c>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f000 f883 	bl	800d606 <__smakebuf_r>
 800d500:	89a0      	ldrh	r0, [r4, #12]
 800d502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d506:	f010 0301 	ands.w	r3, r0, #1
 800d50a:	d00a      	beq.n	800d522 <__swsetup_r+0x9e>
 800d50c:	2300      	movs	r3, #0
 800d50e:	60a3      	str	r3, [r4, #8]
 800d510:	6963      	ldr	r3, [r4, #20]
 800d512:	425b      	negs	r3, r3
 800d514:	61a3      	str	r3, [r4, #24]
 800d516:	6923      	ldr	r3, [r4, #16]
 800d518:	b943      	cbnz	r3, 800d52c <__swsetup_r+0xa8>
 800d51a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d51e:	d1c4      	bne.n	800d4aa <__swsetup_r+0x26>
 800d520:	bd38      	pop	{r3, r4, r5, pc}
 800d522:	0781      	lsls	r1, r0, #30
 800d524:	bf58      	it	pl
 800d526:	6963      	ldrpl	r3, [r4, #20]
 800d528:	60a3      	str	r3, [r4, #8]
 800d52a:	e7f4      	b.n	800d516 <__swsetup_r+0x92>
 800d52c:	2000      	movs	r0, #0
 800d52e:	e7f7      	b.n	800d520 <__swsetup_r+0x9c>
 800d530:	20000208 	.word	0x20000208

0800d534 <_raise_r>:
 800d534:	291f      	cmp	r1, #31
 800d536:	b538      	push	{r3, r4, r5, lr}
 800d538:	4604      	mov	r4, r0
 800d53a:	460d      	mov	r5, r1
 800d53c:	d904      	bls.n	800d548 <_raise_r+0x14>
 800d53e:	2316      	movs	r3, #22
 800d540:	6003      	str	r3, [r0, #0]
 800d542:	f04f 30ff 	mov.w	r0, #4294967295
 800d546:	bd38      	pop	{r3, r4, r5, pc}
 800d548:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d54a:	b112      	cbz	r2, 800d552 <_raise_r+0x1e>
 800d54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d550:	b94b      	cbnz	r3, 800d566 <_raise_r+0x32>
 800d552:	4620      	mov	r0, r4
 800d554:	f000 f830 	bl	800d5b8 <_getpid_r>
 800d558:	462a      	mov	r2, r5
 800d55a:	4601      	mov	r1, r0
 800d55c:	4620      	mov	r0, r4
 800d55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d562:	f000 b817 	b.w	800d594 <_kill_r>
 800d566:	2b01      	cmp	r3, #1
 800d568:	d00a      	beq.n	800d580 <_raise_r+0x4c>
 800d56a:	1c59      	adds	r1, r3, #1
 800d56c:	d103      	bne.n	800d576 <_raise_r+0x42>
 800d56e:	2316      	movs	r3, #22
 800d570:	6003      	str	r3, [r0, #0]
 800d572:	2001      	movs	r0, #1
 800d574:	e7e7      	b.n	800d546 <_raise_r+0x12>
 800d576:	2400      	movs	r4, #0
 800d578:	4628      	mov	r0, r5
 800d57a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d57e:	4798      	blx	r3
 800d580:	2000      	movs	r0, #0
 800d582:	e7e0      	b.n	800d546 <_raise_r+0x12>

0800d584 <raise>:
 800d584:	4b02      	ldr	r3, [pc, #8]	; (800d590 <raise+0xc>)
 800d586:	4601      	mov	r1, r0
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	f7ff bfd3 	b.w	800d534 <_raise_r>
 800d58e:	bf00      	nop
 800d590:	20000208 	.word	0x20000208

0800d594 <_kill_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	2300      	movs	r3, #0
 800d598:	4d06      	ldr	r5, [pc, #24]	; (800d5b4 <_kill_r+0x20>)
 800d59a:	4604      	mov	r4, r0
 800d59c:	4608      	mov	r0, r1
 800d59e:	4611      	mov	r1, r2
 800d5a0:	602b      	str	r3, [r5, #0]
 800d5a2:	f7f5 f9e2 	bl	800296a <_kill>
 800d5a6:	1c43      	adds	r3, r0, #1
 800d5a8:	d102      	bne.n	800d5b0 <_kill_r+0x1c>
 800d5aa:	682b      	ldr	r3, [r5, #0]
 800d5ac:	b103      	cbz	r3, 800d5b0 <_kill_r+0x1c>
 800d5ae:	6023      	str	r3, [r4, #0]
 800d5b0:	bd38      	pop	{r3, r4, r5, pc}
 800d5b2:	bf00      	nop
 800d5b4:	200018f0 	.word	0x200018f0

0800d5b8 <_getpid_r>:
 800d5b8:	f7f5 b9d0 	b.w	800295c <_getpid>

0800d5bc <__swhatbuf_r>:
 800d5bc:	b570      	push	{r4, r5, r6, lr}
 800d5be:	460c      	mov	r4, r1
 800d5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c4:	4615      	mov	r5, r2
 800d5c6:	2900      	cmp	r1, #0
 800d5c8:	461e      	mov	r6, r3
 800d5ca:	b096      	sub	sp, #88	; 0x58
 800d5cc:	da0c      	bge.n	800d5e8 <__swhatbuf_r+0x2c>
 800d5ce:	89a3      	ldrh	r3, [r4, #12]
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d5d6:	bf0c      	ite	eq
 800d5d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d5dc:	2340      	movne	r3, #64	; 0x40
 800d5de:	2000      	movs	r0, #0
 800d5e0:	6031      	str	r1, [r6, #0]
 800d5e2:	602b      	str	r3, [r5, #0]
 800d5e4:	b016      	add	sp, #88	; 0x58
 800d5e6:	bd70      	pop	{r4, r5, r6, pc}
 800d5e8:	466a      	mov	r2, sp
 800d5ea:	f000 f849 	bl	800d680 <_fstat_r>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	dbed      	blt.n	800d5ce <__swhatbuf_r+0x12>
 800d5f2:	9901      	ldr	r1, [sp, #4]
 800d5f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d5f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d5fc:	4259      	negs	r1, r3
 800d5fe:	4159      	adcs	r1, r3
 800d600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d604:	e7eb      	b.n	800d5de <__swhatbuf_r+0x22>

0800d606 <__smakebuf_r>:
 800d606:	898b      	ldrh	r3, [r1, #12]
 800d608:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d60a:	079d      	lsls	r5, r3, #30
 800d60c:	4606      	mov	r6, r0
 800d60e:	460c      	mov	r4, r1
 800d610:	d507      	bpl.n	800d622 <__smakebuf_r+0x1c>
 800d612:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d616:	6023      	str	r3, [r4, #0]
 800d618:	6123      	str	r3, [r4, #16]
 800d61a:	2301      	movs	r3, #1
 800d61c:	6163      	str	r3, [r4, #20]
 800d61e:	b002      	add	sp, #8
 800d620:	bd70      	pop	{r4, r5, r6, pc}
 800d622:	466a      	mov	r2, sp
 800d624:	ab01      	add	r3, sp, #4
 800d626:	f7ff ffc9 	bl	800d5bc <__swhatbuf_r>
 800d62a:	9900      	ldr	r1, [sp, #0]
 800d62c:	4605      	mov	r5, r0
 800d62e:	4630      	mov	r0, r6
 800d630:	f7fd fbcc 	bl	800adcc <_malloc_r>
 800d634:	b948      	cbnz	r0, 800d64a <__smakebuf_r+0x44>
 800d636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d63a:	059a      	lsls	r2, r3, #22
 800d63c:	d4ef      	bmi.n	800d61e <__smakebuf_r+0x18>
 800d63e:	f023 0303 	bic.w	r3, r3, #3
 800d642:	f043 0302 	orr.w	r3, r3, #2
 800d646:	81a3      	strh	r3, [r4, #12]
 800d648:	e7e3      	b.n	800d612 <__smakebuf_r+0xc>
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	6020      	str	r0, [r4, #0]
 800d64e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d652:	81a3      	strh	r3, [r4, #12]
 800d654:	9b00      	ldr	r3, [sp, #0]
 800d656:	6120      	str	r0, [r4, #16]
 800d658:	6163      	str	r3, [r4, #20]
 800d65a:	9b01      	ldr	r3, [sp, #4]
 800d65c:	b15b      	cbz	r3, 800d676 <__smakebuf_r+0x70>
 800d65e:	4630      	mov	r0, r6
 800d660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d664:	f000 f81e 	bl	800d6a4 <_isatty_r>
 800d668:	b128      	cbz	r0, 800d676 <__smakebuf_r+0x70>
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	f023 0303 	bic.w	r3, r3, #3
 800d670:	f043 0301 	orr.w	r3, r3, #1
 800d674:	81a3      	strh	r3, [r4, #12]
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	431d      	orrs	r5, r3
 800d67a:	81a5      	strh	r5, [r4, #12]
 800d67c:	e7cf      	b.n	800d61e <__smakebuf_r+0x18>
	...

0800d680 <_fstat_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	2300      	movs	r3, #0
 800d684:	4d06      	ldr	r5, [pc, #24]	; (800d6a0 <_fstat_r+0x20>)
 800d686:	4604      	mov	r4, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	4611      	mov	r1, r2
 800d68c:	602b      	str	r3, [r5, #0]
 800d68e:	f7f5 f9ca 	bl	8002a26 <_fstat>
 800d692:	1c43      	adds	r3, r0, #1
 800d694:	d102      	bne.n	800d69c <_fstat_r+0x1c>
 800d696:	682b      	ldr	r3, [r5, #0]
 800d698:	b103      	cbz	r3, 800d69c <_fstat_r+0x1c>
 800d69a:	6023      	str	r3, [r4, #0]
 800d69c:	bd38      	pop	{r3, r4, r5, pc}
 800d69e:	bf00      	nop
 800d6a0:	200018f0 	.word	0x200018f0

0800d6a4 <_isatty_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	4d05      	ldr	r5, [pc, #20]	; (800d6c0 <_isatty_r+0x1c>)
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	4608      	mov	r0, r1
 800d6ae:	602b      	str	r3, [r5, #0]
 800d6b0:	f7f5 f9c8 	bl	8002a44 <_isatty>
 800d6b4:	1c43      	adds	r3, r0, #1
 800d6b6:	d102      	bne.n	800d6be <_isatty_r+0x1a>
 800d6b8:	682b      	ldr	r3, [r5, #0]
 800d6ba:	b103      	cbz	r3, 800d6be <_isatty_r+0x1a>
 800d6bc:	6023      	str	r3, [r4, #0]
 800d6be:	bd38      	pop	{r3, r4, r5, pc}
 800d6c0:	200018f0 	.word	0x200018f0

0800d6c4 <log>:
 800d6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	460d      	mov	r5, r1
 800d6ca:	f000 f835 	bl	800d738 <__ieee754_log>
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	460f      	mov	r7, r1
 800d6d4:	462b      	mov	r3, r5
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	4629      	mov	r1, r5
 800d6da:	f7f3 f9d3 	bl	8000a84 <__aeabi_dcmpun>
 800d6de:	b998      	cbnz	r0, 800d708 <log+0x44>
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f7f3 f9c2 	bl	8000a70 <__aeabi_dcmpgt>
 800d6ec:	b960      	cbnz	r0, 800d708 <log+0x44>
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	4629      	mov	r1, r5
 800d6f6:	f7f3 f993 	bl	8000a20 <__aeabi_dcmpeq>
 800d6fa:	b140      	cbz	r0, 800d70e <log+0x4a>
 800d6fc:	f7fe f9b8 	bl	800ba70 <__errno>
 800d700:	2322      	movs	r3, #34	; 0x22
 800d702:	2600      	movs	r6, #0
 800d704:	4f06      	ldr	r7, [pc, #24]	; (800d720 <log+0x5c>)
 800d706:	6003      	str	r3, [r0, #0]
 800d708:	4630      	mov	r0, r6
 800d70a:	4639      	mov	r1, r7
 800d70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d70e:	f7fe f9af 	bl	800ba70 <__errno>
 800d712:	2321      	movs	r3, #33	; 0x21
 800d714:	6003      	str	r3, [r0, #0]
 800d716:	4803      	ldr	r0, [pc, #12]	; (800d724 <log+0x60>)
 800d718:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d71c:	f000 b804 	b.w	800d728 <nan>
 800d720:	fff00000 	.word	0xfff00000
 800d724:	0800e179 	.word	0x0800e179

0800d728 <nan>:
 800d728:	2000      	movs	r0, #0
 800d72a:	4901      	ldr	r1, [pc, #4]	; (800d730 <nan+0x8>)
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	7ff80000 	.word	0x7ff80000
 800d734:	00000000 	.word	0x00000000

0800d738 <__ieee754_log>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	460d      	mov	r5, r1
 800d746:	b087      	sub	sp, #28
 800d748:	da24      	bge.n	800d794 <__ieee754_log+0x5c>
 800d74a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800d74e:	4304      	orrs	r4, r0
 800d750:	d108      	bne.n	800d764 <__ieee754_log+0x2c>
 800d752:	2200      	movs	r2, #0
 800d754:	2300      	movs	r3, #0
 800d756:	2000      	movs	r0, #0
 800d758:	49cb      	ldr	r1, [pc, #812]	; (800da88 <__ieee754_log+0x350>)
 800d75a:	f7f3 f823 	bl	80007a4 <__aeabi_ddiv>
 800d75e:	b007      	add	sp, #28
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d764:	2900      	cmp	r1, #0
 800d766:	da04      	bge.n	800d772 <__ieee754_log+0x3a>
 800d768:	f7f2 fd3a 	bl	80001e0 <__aeabi_dsub>
 800d76c:	2200      	movs	r2, #0
 800d76e:	2300      	movs	r3, #0
 800d770:	e7f3      	b.n	800d75a <__ieee754_log+0x22>
 800d772:	2200      	movs	r2, #0
 800d774:	4bc5      	ldr	r3, [pc, #788]	; (800da8c <__ieee754_log+0x354>)
 800d776:	f7f2 feeb 	bl	8000550 <__aeabi_dmul>
 800d77a:	460b      	mov	r3, r1
 800d77c:	460d      	mov	r5, r1
 800d77e:	4602      	mov	r2, r0
 800d780:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d784:	48c2      	ldr	r0, [pc, #776]	; (800da90 <__ieee754_log+0x358>)
 800d786:	4285      	cmp	r5, r0
 800d788:	dd06      	ble.n	800d798 <__ieee754_log+0x60>
 800d78a:	4610      	mov	r0, r2
 800d78c:	4619      	mov	r1, r3
 800d78e:	f7f2 fd29 	bl	80001e4 <__adddf3>
 800d792:	e7e4      	b.n	800d75e <__ieee754_log+0x26>
 800d794:	2100      	movs	r1, #0
 800d796:	e7f5      	b.n	800d784 <__ieee754_log+0x4c>
 800d798:	152c      	asrs	r4, r5, #20
 800d79a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d79e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d7a2:	440c      	add	r4, r1
 800d7a4:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800d7a8:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800d7ac:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800d7b0:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800d7b4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800d7b8:	ea41 0305 	orr.w	r3, r1, r5
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4619      	mov	r1, r3
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	4bb4      	ldr	r3, [pc, #720]	; (800da94 <__ieee754_log+0x35c>)
 800d7c4:	f7f2 fd0c 	bl	80001e0 <__aeabi_dsub>
 800d7c8:	1cab      	adds	r3, r5, #2
 800d7ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	4682      	mov	sl, r0
 800d7d2:	468b      	mov	fp, r1
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800d7dc:	dc53      	bgt.n	800d886 <__ieee754_log+0x14e>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	f7f3 f91e 	bl	8000a20 <__aeabi_dcmpeq>
 800d7e4:	b1d0      	cbz	r0, 800d81c <__ieee754_log+0xe4>
 800d7e6:	2c00      	cmp	r4, #0
 800d7e8:	f000 8122 	beq.w	800da30 <__ieee754_log+0x2f8>
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7f2 fe45 	bl	800047c <__aeabi_i2d>
 800d7f2:	a391      	add	r3, pc, #580	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	460f      	mov	r7, r1
 800d7fc:	f7f2 fea8 	bl	8000550 <__aeabi_dmul>
 800d800:	a38f      	add	r3, pc, #572	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d806:	4604      	mov	r4, r0
 800d808:	460d      	mov	r5, r1
 800d80a:	4630      	mov	r0, r6
 800d80c:	4639      	mov	r1, r7
 800d80e:	f7f2 fe9f 	bl	8000550 <__aeabi_dmul>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4620      	mov	r0, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	e7b8      	b.n	800d78e <__ieee754_log+0x56>
 800d81c:	a38a      	add	r3, pc, #552	; (adr r3, 800da48 <__ieee754_log+0x310>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	4650      	mov	r0, sl
 800d824:	4659      	mov	r1, fp
 800d826:	f7f2 fe93 	bl	8000550 <__aeabi_dmul>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	2000      	movs	r0, #0
 800d830:	4999      	ldr	r1, [pc, #612]	; (800da98 <__ieee754_log+0x360>)
 800d832:	f7f2 fcd5 	bl	80001e0 <__aeabi_dsub>
 800d836:	4652      	mov	r2, sl
 800d838:	4606      	mov	r6, r0
 800d83a:	460f      	mov	r7, r1
 800d83c:	465b      	mov	r3, fp
 800d83e:	4650      	mov	r0, sl
 800d840:	4659      	mov	r1, fp
 800d842:	f7f2 fe85 	bl	8000550 <__aeabi_dmul>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4630      	mov	r0, r6
 800d84c:	4639      	mov	r1, r7
 800d84e:	f7f2 fe7f 	bl	8000550 <__aeabi_dmul>
 800d852:	4606      	mov	r6, r0
 800d854:	460f      	mov	r7, r1
 800d856:	b914      	cbnz	r4, 800d85e <__ieee754_log+0x126>
 800d858:	4632      	mov	r2, r6
 800d85a:	463b      	mov	r3, r7
 800d85c:	e0a2      	b.n	800d9a4 <__ieee754_log+0x26c>
 800d85e:	4620      	mov	r0, r4
 800d860:	f7f2 fe0c 	bl	800047c <__aeabi_i2d>
 800d864:	a374      	add	r3, pc, #464	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	4680      	mov	r8, r0
 800d86c:	4689      	mov	r9, r1
 800d86e:	f7f2 fe6f 	bl	8000550 <__aeabi_dmul>
 800d872:	a373      	add	r3, pc, #460	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	4604      	mov	r4, r0
 800d87a:	460d      	mov	r5, r1
 800d87c:	4640      	mov	r0, r8
 800d87e:	4649      	mov	r1, r9
 800d880:	f7f2 fe66 	bl	8000550 <__aeabi_dmul>
 800d884:	e0a7      	b.n	800d9d6 <__ieee754_log+0x29e>
 800d886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d88a:	f7f2 fcab 	bl	80001e4 <__adddf3>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4650      	mov	r0, sl
 800d894:	4659      	mov	r1, fp
 800d896:	f7f2 ff85 	bl	80007a4 <__aeabi_ddiv>
 800d89a:	e9cd 0100 	strd	r0, r1, [sp]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f7f2 fdec 	bl	800047c <__aeabi_i2d>
 800d8a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	f7f2 fe4e 	bl	8000550 <__aeabi_dmul>
 800d8b4:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d8b8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d8bc:	4602      	mov	r2, r0
 800d8be:	9305      	str	r3, [sp, #20]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	460f      	mov	r7, r1
 800d8c6:	f7f2 fe43 	bl	8000550 <__aeabi_dmul>
 800d8ca:	a361      	add	r3, pc, #388	; (adr r3, 800da50 <__ieee754_log+0x318>)
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	4680      	mov	r8, r0
 800d8d2:	4689      	mov	r9, r1
 800d8d4:	f7f2 fe3c 	bl	8000550 <__aeabi_dmul>
 800d8d8:	a35f      	add	r3, pc, #380	; (adr r3, 800da58 <__ieee754_log+0x320>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f2 fc81 	bl	80001e4 <__adddf3>
 800d8e2:	4642      	mov	r2, r8
 800d8e4:	464b      	mov	r3, r9
 800d8e6:	f7f2 fe33 	bl	8000550 <__aeabi_dmul>
 800d8ea:	a35d      	add	r3, pc, #372	; (adr r3, 800da60 <__ieee754_log+0x328>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fc78 	bl	80001e4 <__adddf3>
 800d8f4:	4642      	mov	r2, r8
 800d8f6:	464b      	mov	r3, r9
 800d8f8:	f7f2 fe2a 	bl	8000550 <__aeabi_dmul>
 800d8fc:	a35a      	add	r3, pc, #360	; (adr r3, 800da68 <__ieee754_log+0x330>)
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	f7f2 fc6f 	bl	80001e4 <__adddf3>
 800d906:	4632      	mov	r2, r6
 800d908:	463b      	mov	r3, r7
 800d90a:	f7f2 fe21 	bl	8000550 <__aeabi_dmul>
 800d90e:	a358      	add	r3, pc, #352	; (adr r3, 800da70 <__ieee754_log+0x338>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	4606      	mov	r6, r0
 800d916:	460f      	mov	r7, r1
 800d918:	4640      	mov	r0, r8
 800d91a:	4649      	mov	r1, r9
 800d91c:	f7f2 fe18 	bl	8000550 <__aeabi_dmul>
 800d920:	a355      	add	r3, pc, #340	; (adr r3, 800da78 <__ieee754_log+0x340>)
 800d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d926:	f7f2 fc5d 	bl	80001e4 <__adddf3>
 800d92a:	4642      	mov	r2, r8
 800d92c:	464b      	mov	r3, r9
 800d92e:	f7f2 fe0f 	bl	8000550 <__aeabi_dmul>
 800d932:	a353      	add	r3, pc, #332	; (adr r3, 800da80 <__ieee754_log+0x348>)
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	f7f2 fc54 	bl	80001e4 <__adddf3>
 800d93c:	4642      	mov	r2, r8
 800d93e:	464b      	mov	r3, r9
 800d940:	f7f2 fe06 	bl	8000550 <__aeabi_dmul>
 800d944:	460b      	mov	r3, r1
 800d946:	4602      	mov	r2, r0
 800d948:	4639      	mov	r1, r7
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7f2 fc4a 	bl	80001e4 <__adddf3>
 800d950:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d954:	9b05      	ldr	r3, [sp, #20]
 800d956:	3551      	adds	r5, #81	; 0x51
 800d958:	431d      	orrs	r5, r3
 800d95a:	2d00      	cmp	r5, #0
 800d95c:	4680      	mov	r8, r0
 800d95e:	4689      	mov	r9, r1
 800d960:	dd48      	ble.n	800d9f4 <__ieee754_log+0x2bc>
 800d962:	2200      	movs	r2, #0
 800d964:	4b4c      	ldr	r3, [pc, #304]	; (800da98 <__ieee754_log+0x360>)
 800d966:	4650      	mov	r0, sl
 800d968:	4659      	mov	r1, fp
 800d96a:	f7f2 fdf1 	bl	8000550 <__aeabi_dmul>
 800d96e:	4652      	mov	r2, sl
 800d970:	465b      	mov	r3, fp
 800d972:	f7f2 fded 	bl	8000550 <__aeabi_dmul>
 800d976:	4602      	mov	r2, r0
 800d978:	460b      	mov	r3, r1
 800d97a:	4606      	mov	r6, r0
 800d97c:	460f      	mov	r7, r1
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fc2f 	bl	80001e4 <__adddf3>
 800d986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d98a:	f7f2 fde1 	bl	8000550 <__aeabi_dmul>
 800d98e:	4680      	mov	r8, r0
 800d990:	4689      	mov	r9, r1
 800d992:	b964      	cbnz	r4, 800d9ae <__ieee754_log+0x276>
 800d994:	4602      	mov	r2, r0
 800d996:	460b      	mov	r3, r1
 800d998:	4630      	mov	r0, r6
 800d99a:	4639      	mov	r1, r7
 800d99c:	f7f2 fc20 	bl	80001e0 <__aeabi_dsub>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4650      	mov	r0, sl
 800d9a6:	4659      	mov	r1, fp
 800d9a8:	f7f2 fc1a 	bl	80001e0 <__aeabi_dsub>
 800d9ac:	e6d7      	b.n	800d75e <__ieee754_log+0x26>
 800d9ae:	a322      	add	r3, pc, #136	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9b8:	f7f2 fdca 	bl	8000550 <__aeabi_dmul>
 800d9bc:	a320      	add	r3, pc, #128	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	460d      	mov	r5, r1
 800d9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ca:	f7f2 fdc1 	bl	8000550 <__aeabi_dmul>
 800d9ce:	4642      	mov	r2, r8
 800d9d0:	464b      	mov	r3, r9
 800d9d2:	f7f2 fc07 	bl	80001e4 <__adddf3>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4630      	mov	r0, r6
 800d9dc:	4639      	mov	r1, r7
 800d9de:	f7f2 fbff 	bl	80001e0 <__aeabi_dsub>
 800d9e2:	4652      	mov	r2, sl
 800d9e4:	465b      	mov	r3, fp
 800d9e6:	f7f2 fbfb 	bl	80001e0 <__aeabi_dsub>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	e7d9      	b.n	800d9a8 <__ieee754_log+0x270>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	4659      	mov	r1, fp
 800d9fc:	f7f2 fbf0 	bl	80001e0 <__aeabi_dsub>
 800da00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da04:	f7f2 fda4 	bl	8000550 <__aeabi_dmul>
 800da08:	4606      	mov	r6, r0
 800da0a:	460f      	mov	r7, r1
 800da0c:	2c00      	cmp	r4, #0
 800da0e:	f43f af23 	beq.w	800d858 <__ieee754_log+0x120>
 800da12:	a309      	add	r3, pc, #36	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da1c:	f7f2 fd98 	bl	8000550 <__aeabi_dmul>
 800da20:	a307      	add	r3, pc, #28	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	4604      	mov	r4, r0
 800da28:	460d      	mov	r5, r1
 800da2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da2e:	e727      	b.n	800d880 <__ieee754_log+0x148>
 800da30:	2000      	movs	r0, #0
 800da32:	2100      	movs	r1, #0
 800da34:	e693      	b.n	800d75e <__ieee754_log+0x26>
 800da36:	bf00      	nop
 800da38:	fee00000 	.word	0xfee00000
 800da3c:	3fe62e42 	.word	0x3fe62e42
 800da40:	35793c76 	.word	0x35793c76
 800da44:	3dea39ef 	.word	0x3dea39ef
 800da48:	55555555 	.word	0x55555555
 800da4c:	3fd55555 	.word	0x3fd55555
 800da50:	df3e5244 	.word	0xdf3e5244
 800da54:	3fc2f112 	.word	0x3fc2f112
 800da58:	96cb03de 	.word	0x96cb03de
 800da5c:	3fc74664 	.word	0x3fc74664
 800da60:	94229359 	.word	0x94229359
 800da64:	3fd24924 	.word	0x3fd24924
 800da68:	55555593 	.word	0x55555593
 800da6c:	3fe55555 	.word	0x3fe55555
 800da70:	d078c69f 	.word	0xd078c69f
 800da74:	3fc39a09 	.word	0x3fc39a09
 800da78:	1d8e78af 	.word	0x1d8e78af
 800da7c:	3fcc71c5 	.word	0x3fcc71c5
 800da80:	9997fa04 	.word	0x9997fa04
 800da84:	3fd99999 	.word	0x3fd99999
 800da88:	c3500000 	.word	0xc3500000
 800da8c:	43500000 	.word	0x43500000
 800da90:	7fefffff 	.word	0x7fefffff
 800da94:	3ff00000 	.word	0x3ff00000
 800da98:	3fe00000 	.word	0x3fe00000

0800da9c <_init>:
 800da9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9e:	bf00      	nop
 800daa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daa2:	bc08      	pop	{r3}
 800daa4:	469e      	mov	lr, r3
 800daa6:	4770      	bx	lr

0800daa8 <_fini>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	bf00      	nop
 800daac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daae:	bc08      	pop	{r3}
 800dab0:	469e      	mov	lr, r3
 800dab2:	4770      	bx	lr
